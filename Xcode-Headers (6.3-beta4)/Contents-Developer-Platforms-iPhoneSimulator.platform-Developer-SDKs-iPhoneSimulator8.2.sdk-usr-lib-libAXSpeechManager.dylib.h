//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#pragma mark Blocks

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

struct _NSRange {
    unsigned long long _field1;
    unsigned long long _field2;
};

#pragma mark -

//
// File: /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/usr/lib/libAXSpeechManager.dylib
// UUID: 02075E88-1CE4-3FC6-A29F-5F4DFCEBFCB6
//
//                           Arch: x86_64
//                Current version: 1.0.0
//          Compatibility version: 1.0.0
//                 Source version: 1541.6.25.0.0
//            Minimum iOS version: 8.2.0
//                    SDK version: 8.2.0
//
// Objective-C Garbage Collection: Unsupported
//

@protocol NSObject
@property(readonly, copy) NSString *description;
@property(readonly) Class superclass;
@property(readonly) unsigned long long hash;
- (struct _NSZone *)zone;
- (unsigned long long)retainCount;
- (id)autorelease;
- (oneway void)release;
- (id)retain;
- (_Bool)respondsToSelector:(SEL)arg1;
- (_Bool)conformsToProtocol:(Protocol *)arg1;
- (_Bool)isMemberOfClass:(Class)arg1;
- (_Bool)isKindOfClass:(Class)arg1;
- (_Bool)isProxy;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2 withObject:(id)arg3;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2;
- (id)performSelector:(SEL)arg1;
- (id)self;
- (Class)class;
- (_Bool)isEqual:(id)arg1;

@optional
@property(readonly, copy) NSString *debugDescription;
@end

@protocol TTSSpeechSynthesizerDelegate <NSObject>

@optional
- (void)speechSynthesizer:(TTSSpeechSynthesizer *)arg1 willSpeakRangeOfSpeechString:(struct _NSRange)arg2 forRequest:(TTSSpeechRequest *)arg3;
- (void)speechSynthesizer:(TTSSpeechSynthesizer *)arg1 didContinueSpeakingRequest:(TTSSpeechRequest *)arg2;
- (void)speechSynthesizer:(TTSSpeechSynthesizer *)arg1 didPauseSpeakingRequest:(TTSSpeechRequest *)arg2;
- (void)speechSynthesizer:(TTSSpeechSynthesizer *)arg1 didFinishSpeakingRequest:(TTSSpeechRequest *)arg2 successfully:(_Bool)arg3 phonemesSpoken:(NSString *)arg4 withError:(NSError *)arg5;
- (void)speechSynthesizer:(TTSSpeechSynthesizer *)arg1 didFinishSpeakingRequest:(TTSSpeechRequest *)arg2 successfully:(_Bool)arg3 withError:(NSError *)arg4;
- (void)speechSynthesizer:(TTSSpeechSynthesizer *)arg1 didStartSpeakingRequest:(TTSSpeechRequest *)arg2;
@end

@interface AXSpeechAction : NSObject
{
    NSString *_string;
    double _pitch;
    double _volume;
    double _speakingRate;
    NSString *_language;
    _Bool _shouldQueue;
    _Bool _cannotInterrupt;
    _Bool _shouldDetectLanguage;
    _Bool _shouldProcessEmoji;
    _Bool _shouldProcessEmoticons;
    _Bool _shouldPrecomposeString;
    CDUnknownBlockType _completionCallback;
    CDUnknownBlockType _onPauseCallback;
    CDUnknownBlockType _onResumeCallback;
    CDUnknownBlockType _onWillSpeakRangeCallback;
    CDUnknownBlockType _onSpeechStartCallback;
    TTSSpeechRequest *_speechRequest;
    _Bool _useCompactVoice;
    NSString *_voiceIdentifier;
    NSString *_processedString;
    NSMutableArray *_emojiRangeReplacements;
    long long _wordCallbackPostProcessedOffset;
}

+ (id)actionWithString:(id)arg1 shouldQueue:(_Bool)arg2;
@property(nonatomic) long long wordCallbackPostProcessedOffset; // @synthesize wordCallbackPostProcessedOffset=_wordCallbackPostProcessedOffset;
@property(nonatomic) _Bool useCompactVoice; // @synthesize useCompactVoice=_useCompactVoice;
@property(retain, nonatomic) TTSSpeechRequest *speechRequest; // @synthesize speechRequest=_speechRequest;
@property(copy, nonatomic) CDUnknownBlockType onSpeechStartCallback; // @synthesize onSpeechStartCallback=_onSpeechStartCallback;
@property(copy, nonatomic) CDUnknownBlockType onWillSpeakRangeCallback; // @synthesize onWillSpeakRangeCallback=_onWillSpeakRangeCallback;
@property(copy, nonatomic) CDUnknownBlockType onResumeCallback; // @synthesize onResumeCallback=_onResumeCallback;
@property(copy, nonatomic) CDUnknownBlockType onPauseCallback; // @synthesize onPauseCallback=_onPauseCallback;
@property(copy, nonatomic) CDUnknownBlockType completionCallback; // @synthesize completionCallback=_completionCallback;
@property(retain, nonatomic) NSString *language; // @synthesize language=_language;
@property(nonatomic) _Bool shouldDetectLanguage; // @synthesize shouldDetectLanguage=_shouldDetectLanguage;
@property(nonatomic) _Bool shouldPrecomposeString; // @synthesize shouldPrecomposeString=_shouldPrecomposeString;
@property(nonatomic) _Bool shouldProcessEmoticons; // @synthesize shouldProcessEmoticons=_shouldProcessEmoticons;
@property(nonatomic) _Bool shouldProcessEmoji; // @synthesize shouldProcessEmoji=_shouldProcessEmoji;
@property(nonatomic) _Bool cannotInterrupt; // @synthesize cannotInterrupt=_cannotInterrupt;
@property(nonatomic) _Bool shouldQueue; // @synthesize shouldQueue=_shouldQueue;
@property(nonatomic) double volume; // @synthesize volume=_volume;
@property(nonatomic) double speakingRate; // @synthesize speakingRate=_speakingRate;
@property(nonatomic) double pitch; // @synthesize pitch=_pitch;
@property(retain, nonatomic) NSMutableArray *emojiRangeReplacements; // @synthesize emojiRangeReplacements=_emojiRangeReplacements;
@property(retain, nonatomic) NSString *processedString; // @synthesize processedString=_processedString;
@property(copy, nonatomic) NSString *string; // @synthesize string=_string;
@property(retain, nonatomic) NSString *voiceIdentifier; // @synthesize voiceIdentifier=_voiceIdentifier;
- (id)description;
- (id)_detectLanguageFromContent;
- (void)dealloc;
- (void)preprocessAction;
- (id)init;

@end

@interface AXSpeechManager : NSObject <TTSSpeechSynthesizerDelegate>
{
    NSMutableArray *_speechQueue;
    TTSSpeechSynthesizer *_synthesizer;
    NSThread *_runThread;
    _Bool _runLoopEnabled;
    _Bool _isSpeaking;
    _Bool _speechEnabled;
    NSObject<OS_dispatch_semaphore> *_runThreadSemaphore;
    _Bool isPaused;
    _Bool _showControlCenterControls;
    NSNumber *_originalSpeechRateForJobOverride;
}

+ (id)matchedRangesForString:(id)arg1 withRegularExpression:(struct URegularExpression *)arg2;
+ (struct URegularExpression *)createRegularExpressionFromString:(id)arg1;
+ (id)availableLanguageCodes;
+ (id)currentLanguageCode;
@property(retain, nonatomic) NSNumber *originalSpeechRateForJobOverride; // @synthesize originalSpeechRateForJobOverride=_originalSpeechRateForJobOverride;
@property(readonly, nonatomic) _Bool showControlCenterControls; // @synthesize showControlCenterControls=_showControlCenterControls;
@property(nonatomic) _Bool speechEnabled; // @synthesize speechEnabled=_speechEnabled;
@property(nonatomic) _Bool isPaused; // @synthesize isPaused;
- (void)speechSynthesizer:(id)arg1 willSpeakRangeOfSpeechString:(struct _NSRange)arg2 forRequest:(id)arg3;
- (void)speechSynthesizer:(id)arg1 didContinueSpeakingRequest:(id)arg2;
- (void)speechSynthesizer:(id)arg1 didPauseSpeakingRequest:(id)arg2;
- (void)speechSynthesizer:(id)arg1 didFinishSpeakingRequest:(id)arg2 successfully:(_Bool)arg3 withError:(id)arg4;
- (void)__speechJobFinished:(id)arg1;
- (void)speechSynthesizer:(id)arg1 didStartSpeakingRequest:(id)arg2;
- (void)showControlCenterControls:(_Bool)arg1;
@property(readonly, nonatomic) _Bool isSpeaking; // @dynamic isSpeaking;
- (void)_isSpeaking:(id)arg1;
- (void)stopSpeaking;
- (void)stopSpeaking:(int)arg1;
- (void)_stopSpeaking:(id)arg1;
- (void)continueSpeaking;
- (void)_continueSpeaking;
- (void)pauseSpeaking:(int)arg1;
- (void)_pauseSpeaking:(id)arg1;
- (void)dispatchSpeechAction:(id)arg1;
- (void)clearSpeechQueue;
- (void)_clearSpeechQueue;
- (void)_dispatchSpeechAction:(id)arg1;
- (void)_startNextSpeechJob;
- (void)_checkForLanguageMigration:(id)arg1;
- (void)_speechJobFinished:(_Bool)arg1 action:(id)arg2;
- (void)_initialize;
- (void)dealloc;
- (id)init;
- (void)_testSpeechTransforms;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface AVAlexSpeechSynthesisVoice : AVSpeechSynthesisVoice
{
}

+ (id)voiceIdentifier;
+ (id)voice;

@end

@interface AXEmojiUtilities : NSObject
{
}

+ (id)stringByReplacingEmojiCharactersWithEmojiDescriptions:(id)arg1 stringForPauses:(id)arg2 language:(id)arg3 rangeReplacements:(id)arg4;

@end

