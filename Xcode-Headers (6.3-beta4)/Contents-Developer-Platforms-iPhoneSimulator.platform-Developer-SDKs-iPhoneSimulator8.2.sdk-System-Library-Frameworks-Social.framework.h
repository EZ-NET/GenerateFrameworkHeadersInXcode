//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#pragma mark Function Pointers and Blocks

typedef void (*CDUnknownFunctionPointerType)(void); // return type and parameters are unknown

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

struct CGPoint {
    double x;
    double y;
};

struct CGRect {
    struct CGPoint origin;
    struct CGSize size;
};

struct CGSize {
    double width;
    double height;
};

struct UIEdgeInsets {
    double _field1;
    double _field2;
    double _field3;
    double _field4;
};

struct _NSRange {
    unsigned long long _field1;
    unsigned long long _field2;
};

#pragma mark Typedef'd Structures

typedef struct {
    double _field1;
    double _field2;
} CDStruct_c3b9c2ee;

typedef struct {
    long long version;
    void *info;
    CDUnknownFunctionPointerType retain;
    CDUnknownFunctionPointerType release;
    CDUnknownFunctionPointerType copyDescription;
} CDStruct_4210025a;

typedef struct {
    long long _field1;
    long long _field2;
} CDStruct_912cb5d2;

typedef struct {
    CDStruct_c3b9c2ee _field1;
    CDStruct_c3b9c2ee _field2;
} CDStruct_90e2a262;

#pragma mark -

//
// File: /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/System/Library/Frameworks/Social.framework/Social
// UUID: E5164F6A-0A5D-3B71-AB50-50B59F228646
//
//                           Arch: x86_64
//                Current version: 87.0.0
//          Compatibility version: 1.0.0
//                 Source version: 488.4.0.0.0
//            Minimum iOS version: 8.2.0
//                    SDK version: 8.2.0
//
// Objective-C Garbage Collection: Unsupported
//

@protocol CLLocationManagerDelegate <NSObject>

@optional
- (void)locationManager:(CLLocationManager *)arg1 didVisit:(CLVisit *)arg2;
- (void)locationManager:(CLLocationManager *)arg1 didFinishDeferredUpdatesWithError:(NSError *)arg2;
- (void)locationManagerDidResumeLocationUpdates:(CLLocationManager *)arg1;
- (void)locationManagerDidPauseLocationUpdates:(CLLocationManager *)arg1;
- (void)locationManager:(CLLocationManager *)arg1 didStartMonitoringForRegion:(CLRegion *)arg2;
- (void)locationManager:(CLLocationManager *)arg1 didChangeAuthorizationStatus:(int)arg2;
- (void)locationManager:(CLLocationManager *)arg1 monitoringDidFailForRegion:(CLRegion *)arg2 withError:(NSError *)arg3;
- (void)locationManager:(CLLocationManager *)arg1 didFailWithError:(NSError *)arg2;
- (void)locationManager:(CLLocationManager *)arg1 didExitRegion:(CLRegion *)arg2;
- (void)locationManager:(CLLocationManager *)arg1 didEnterRegion:(CLRegion *)arg2;
- (void)locationManager:(CLLocationManager *)arg1 rangingBeaconsDidFailForRegion:(CLBeaconRegion *)arg2 withError:(NSError *)arg3;
- (void)locationManager:(CLLocationManager *)arg1 didRangeBeacons:(NSArray *)arg2 inRegion:(CLBeaconRegion *)arg3;
- (void)locationManager:(CLLocationManager *)arg1 didDetermineState:(long long)arg2 forRegion:(CLRegion *)arg3;
- (_Bool)locationManagerShouldDisplayHeadingCalibration:(CLLocationManager *)arg1;
- (void)locationManager:(CLLocationManager *)arg1 didUpdateHeading:(CLHeading *)arg2;
- (void)locationManager:(CLLocationManager *)arg1 didUpdateLocations:(NSArray *)arg2;
- (void)locationManager:(CLLocationManager *)arg1 didUpdateToLocation:(CLLocation *)arg2 fromLocation:(CLLocation *)arg3;
@end

@protocol MKAnnotation <NSObject>
@property(readonly, nonatomic) CDStruct_c3b9c2ee coordinate;

@optional
@property(readonly, copy, nonatomic) NSString *subtitle;
@property(readonly, copy, nonatomic) NSString *title;
- (void)setCoordinate:(CDStruct_c3b9c2ee)arg1;
@end

@protocol MKMapViewDelegate <NSObject>

@optional
- (void)mapView:(MKMapView *)arg1 didAddOverlayViews:(NSArray *)arg2;
- (MKOverlayView *)mapView:(MKMapView *)arg1 viewForOverlay:(id <MKOverlay>)arg2;
- (void)mapView:(MKMapView *)arg1 didAddOverlayRenderers:(NSArray *)arg2;
- (MKOverlayRenderer *)mapView:(MKMapView *)arg1 rendererForOverlay:(id <MKOverlay>)arg2;
- (void)mapView:(MKMapView *)arg1 didChangeUserTrackingMode:(long long)arg2 animated:(_Bool)arg3;
- (void)mapView:(MKMapView *)arg1 annotationView:(MKAnnotationView *)arg2 didChangeDragState:(unsigned long long)arg3 fromOldState:(unsigned long long)arg4;
- (void)mapView:(MKMapView *)arg1 didFailToLocateUserWithError:(NSError *)arg2;
- (void)mapView:(MKMapView *)arg1 didUpdateUserLocation:(MKUserLocation *)arg2;
- (void)mapViewDidStopLocatingUser:(MKMapView *)arg1;
- (void)mapViewWillStartLocatingUser:(MKMapView *)arg1;
- (void)mapView:(MKMapView *)arg1 didDeselectAnnotationView:(MKAnnotationView *)arg2;
- (void)mapView:(MKMapView *)arg1 didSelectAnnotationView:(MKAnnotationView *)arg2;
- (void)mapView:(MKMapView *)arg1 annotationView:(MKAnnotationView *)arg2 calloutAccessoryControlTapped:(UIControl *)arg3;
- (void)mapView:(MKMapView *)arg1 didAddAnnotationViews:(NSArray *)arg2;
- (MKAnnotationView *)mapView:(MKMapView *)arg1 viewForAnnotation:(id <MKAnnotation>)arg2;
- (void)mapViewDidFinishRenderingMap:(MKMapView *)arg1 fullyRendered:(_Bool)arg2;
- (void)mapViewWillStartRenderingMap:(MKMapView *)arg1;
- (void)mapViewDidFailLoadingMap:(MKMapView *)arg1 withError:(NSError *)arg2;
- (void)mapViewDidFinishLoadingMap:(MKMapView *)arg1;
- (void)mapViewWillStartLoadingMap:(MKMapView *)arg1;
- (void)mapView:(MKMapView *)arg1 regionDidChangeAnimated:(_Bool)arg2;
- (void)mapView:(MKMapView *)arg1 regionWillChangeAnimated:(_Bool)arg2;
@end

@protocol NSCoding
- (id)initWithCoder:(NSCoder *)arg1;
- (void)encodeWithCoder:(NSCoder *)arg1;
@end

@protocol NSObject
@property(readonly, copy) NSString *description;
@property(readonly) Class superclass;
@property(readonly) unsigned long long hash;
- (struct _NSZone *)zone;
- (unsigned long long)retainCount;
- (id)autorelease;
- (oneway void)release;
- (id)retain;
- (_Bool)respondsToSelector:(SEL)arg1;
- (_Bool)conformsToProtocol:(Protocol *)arg1;
- (_Bool)isMemberOfClass:(Class)arg1;
- (_Bool)isKindOfClass:(Class)arg1;
- (_Bool)isProxy;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2 withObject:(id)arg3;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2;
- (id)performSelector:(SEL)arg1;
- (id)self;
- (Class)class;
- (_Bool)isEqual:(id)arg1;

@optional
@property(readonly, copy) NSString *debugDescription;
@end

@protocol NSSecureCoding <NSCoding>
+ (_Bool)supportsSecureCoding;
@end

@protocol NSXPCListenerDelegate <NSObject>

@optional
- (_Bool)listener:(NSXPCListener *)arg1 shouldAcceptNewConnection:(NSXPCConnection *)arg2;
@end

@protocol SLComposeSheetConfigurationItemObserving
- (void)configurationItemDidChange:(SLComposeSheetConfigurationItem *)arg1;
@end

@protocol SLFacebookAlbumChooserViewControllerDelegate <NSObject>
- (void)albumChooserViewController:(SLFacebookAlbumChooserViewController *)arg1 didSelectAlbum:(id)arg2;
@end

@protocol SLFacebookAlbumManagerDelegate
- (void)albumManager:(SLFacebookAlbumManager *)arg1 didFailLoadingCoverImageForAlbum:(SLFacebookAlbum *)arg2 withError:(NSError *)arg3;
- (void)albumManager:(SLFacebookAlbumManager *)arg1 didLoadCoverImage:(UIImage *)arg2 forAlbum:(SLFacebookAlbum *)arg3;
- (void)albumManager:(SLFacebookAlbumManager *)arg1 didFailAlbumRefreshWithError:(NSError *)arg2;
- (void)albumManager:(SLFacebookAlbumManager *)arg1 didRefreshAlbums:(NSArray *)arg2;
@end

@protocol SLFacebookAudienceViewController
- (void)setCurrentPrivacySetting:(SLFacebookPostPrivacySetting *)arg1;
- (void)setSelectionDelegate:(id <SLFacebookAudienceViewControllerDelegate>)arg1;
- (void)setPrivacySettings:(NSArray *)arg1;
@end

@protocol SLFacebookAudienceViewControllerDelegate
- (void)audienceViewController:(UIViewController<SLFacebookAudienceViewController> *)arg1 didSelectPostPrivacySetting:(SLFacebookPostPrivacySetting *)arg2;
@end

@protocol SLFacebookRemoteSessionProtocol <SLRemoteUploadCompletion>
- (void)injectCompletedUploadWithCompletion:(void (^)(void))arg1;
- (void)uploadProfileImageData:(NSData *)arg1 withCompletion:(void (^)(NSError *))arg2;
- (void)fetchLikeStatusForURL:(NSURL *)arg1 flags:(NSNumber *)arg2 completion:(void (^)(NSDictionary *, NSError *))arg3;
- (void)unlikeURL:(NSURL *)arg1 completion:(void (^)(id, NSError *))arg2;
- (void)likeURL:(NSURL *)arg1 completion:(void (^)(id, NSError *))arg2;
- (void)cancelUploadWithIdentifier:(NSString *)arg1;
- (void)uploadsInProgress:(void (^)(NSArray *))arg1;
- (void)uploadPost:(SLFacebookPost *)arg1 suppressAlerts:(NSNumber *)arg2 withPostCompletion:(void (^)(NSNumber *, NSError *))arg3;
- (void)uploadPost:(SLFacebookPost *)arg1 forPID:(NSNumber *)arg2 withXPCTransferCompletion:(void (^)(NSNumber *, NSError *))arg3;
- (void)uploadPost:(SLFacebookPost *)arg1 withXPCTransferCompletion:(void (^)(NSNumber *, NSError *))arg2;
- (void)tokenSecretForEntitledClientWithHandler:(void (^)(NSString *, NSError *))arg1;
- (void)revokeAllAccessTokensForDeviceWithCompletion:(void (^)(NSNumber *, NSError *))arg1;
- (void)revokeAccessTokenForAppWithID:(NSString *)arg1;
- (void)doTestCallWithDict:(NSDictionary *)arg1 withHandler:(void (^)(NSDictionary *, NSError *))arg2;
@end

@protocol SLFacebookVideoOptionsDelegate
- (void)videoOptionsViewController:(SLFacebookVideoOptionsViewController *)arg1 didSelectVideoQualityOption:(SLVideoQualityOption *)arg2;
@end

@protocol SLInternalComposeServiceHostProtocol
- (void)shouldShowNetworkActivityIndicator:(NSNumber *)arg1;
@end

@protocol SLInternalComposeServiceVendorProtocol
@end

@protocol SLMicroBlogAccountsTableViewControllerDelegate
- (void)accountsViewController:(SLMicroBlogAccountsTableViewController *)arg1 didSelectAccountUserRecord:(SLMicroBlogUserRecord *)arg2;
@end

@protocol SLMicroBlogMentionsDelegate
- (void)mentionsViewController:(SLMicroBlogMentionsViewController *)arg1 finishedWithResult:(NSString *)arg2;
@end

@protocol SLMicroBlogSheetDelegate
@property(copy, nonatomic) CDUnknownBlockType locationInformationChangedBlock;
- (void)stopDeferringExpensiveOperations;
- (void)deferExpensiveOperations;
- (NSString *)serviceAccountTypeIdentifier;
- (void)showSettingsIfNeeded;
- (void)sendStatus:(SLMicroBlogStatus *)arg1 completion:(void (^)(_Bool, NSError *))arg2;
- (void)fetchProfileImageDataForScreenName:(NSString *)arg1 completion:(void (^)(NSData *, NSError *))arg2;
- (void)recordsMatchingPrefixString:(NSString *)arg1 completion:(_Bool (^)(NSArray *, NSError *))arg2;
- (void)setGeotagStatus:(int)arg1;
- (void)fetchGeotagStatus:(void (^)(int, NSError *))arg1;
- (void)fetchCurrentImageLimits:(void (^)(NSNumber *, NSError *))arg1;
- (void)fetchCurrentUrlLimits:(void (^)(long long, long long, NSError *))arg1;
- (void)fetchSessionInfo:(void (^)(NSDictionary *, NSError *))arg1;
- (void)setActiveAccountIdentifier:(NSString *)arg1;
- (void)endPotentialLocationUse;
- (void)beginPotentialLocationUse;

@optional
- (void)ensureUserRecordStore;
- (NSData *)cachedProfileImageDataForScreenName:(NSString *)arg1;
- (_Bool)countMediaAttachmentsTowardCharacterCount;
- (long long)characterCountForText:(NSString *)arg1 shortenedURLCost:(long long)arg2;
@end

@protocol SLPlaceDataSource
@property __weak NSObject<SLPlaceDataSourceDelegate> *delegate;
- (CLLocation *)currentLocation;
- (void)fetchPlaces;
- (void)fetchPlacesWithSearchString:(NSString *)arg1;
- (void)cancelPlaceFetch;
- (void)stopUpdatingLocation;
- (void)startUpdatingLocation;
@end

@protocol SLPlaceDataSourceDelegate <NSObject>
- (void)placeManager:(NSObject<SLPlaceDataSource> *)arg1 failedWithError:(NSError *)arg2;
- (void)placeManager:(NSObject<SLPlaceDataSource> *)arg1 updatedPlaces:(NSArray *)arg2;
@end

@protocol SLRemoteComposeViewControllerDelegateProtocol
- (void)remoteViewController:(SLRemoteComposeViewController *)arg1 didTerminateWithError:(NSError *)arg2;
@end

@protocol SLRemoteUploadCompletion <NSObject>
- (void)completedUploadsWithHandler:(void (^)(NSArray *))arg1;
@end

@protocol SLSheetPlaceViewControllerDelegate
- (void)placeViewController:(SLSheetPlaceViewController *)arg1 didSelectPlace:(SLPlace *)arg2;

@optional
- (void)placeViewController:(SLSheetPlaceViewController *)arg1 willDisappear:(_Bool)arg2;
@end

@protocol SLTencentWeiboClientSessionProtocol <NSObject>
- (void)acceptLocationUpdate:(NSDictionary *)arg1;
@end

@protocol SLTencentWeiboRemoteSessionProtocol <NSObject>
- (void)revokeAllAccessTokensForDeviceWithCompletion:(void (^)(NSNumber *, NSError *))arg1;
- (void)revokeAccessTokenForAppWithOauthToken:(NSString *)arg1 completion:(void (^)(NSNumber *, NSError *))arg2;
- (void)getPermaLinkFromLastStatusUpdate:(void (^)(NSString *, NSError *))arg1;
- (void)showTencentWeiboSettingsIfNeeded:(void (^)(NSNumber *, NSError *))arg1;
- (void)sendStatus:(SLMicroBlogStatus *)arg1 completion:(void (^)(NSNumber *, NSError *))arg2;
- (void)fetchProfileImageDataForScreenName:(NSString *)arg1 completion:(void (^)(NSData *, NSError *))arg2;
- (void)recordsMatchingPrefixString:(NSString *)arg1 completion:(void (^)(NSArray *, NSError *))arg2;
- (void)fetchCurrentImageLimits:(void (^)(NSNumber *, NSError *))arg1;
- (void)fetchCurrentUrlLimits:(void (^)(int, int, NSError *))arg1;
- (void)setGeotagStatus:(NSNumber *)arg1;
- (void)fetchGeotagStatus:(void (^)(NSNumber *, NSError *))arg1;
- (void)setGeotagAccountSetting:(NSNumber *)arg1 withCompletion:(void (^)(NSNumber *, NSError *))arg2;
- (void)setActiveAccountIdentifier:(NSString *)arg1;
- (void)ensureUserRecordStore;
- (void)fetchSessionInfo:(void (^)(NSDictionary *, NSError *))arg1;
- (void)checkIn:(NSDictionary *)arg1;
@end

@protocol SLTwitterClientSessionProtocol <NSObject>
- (void)acceptLocationUpdate:(NSDictionary *)arg1;
@end

@protocol SLTwitterRemoteSessionProtocol
- (void)getPermaLinkFromLastStatusUpdate:(void (^)(NSString *, NSError *))arg1;
- (void)showTwitterSettingsIfNeeded:(void (^)(NSNumber *, NSError *))arg1;
- (void)sendDirectMessage:(NSString *)arg1 toUser:(NSString *)arg2 withScreenName:(NSString *)arg3 completion:(void (^)(NSError *))arg4;
- (void)retweetTweetWithID:(NSString *)arg1 completion:(void (^)(NSError *))arg2;
- (void)sendStatus:(SLMicroBlogStatus *)arg1 completion:(void (^)(NSNumber *, NSError *))arg2;
- (void)fetchProfileImageDataForScreenName:(NSString *)arg1 completion:(void (^)(NSData *, NSError *))arg2;
- (void)recordsMatchingPrefixString:(NSString *)arg1 completion:(void (^)(NSArray *, NSError *))arg2;
- (void)fetchRecordForScreenName:(NSString *)arg1 completion:(void (^)(SLTwitterUserRecord *, NSError *))arg2;
- (void)fetchCurrentImageLimits:(void (^)(NSDictionary *, NSError *))arg1;
- (void)fetchCurrentTCoLength:(void (^)(NSNumber *, NSError *))arg1;
- (void)setGeotagStatus:(NSNumber *)arg1;
- (void)fetchGeotagStatus:(void (^)(NSNumber *, NSError *))arg1;
- (void)fetchSessionInfo:(void (^)(NSDictionary *, NSError *))arg1;
- (void)setActiveAccountIdentifier:(NSString *)arg1;
- (void)ensureUserRecordStore;
- (void)checkIn:(NSDictionary *)arg1;
@end

@protocol SLWeiboClientSessionProtocol <NSObject>
- (void)acceptLocationUpdate:(NSDictionary *)arg1;
@end

@protocol SLWeiboRemoteSessionProtocol <NSObject>
- (void)getPermaLinkFromLastStatusUpdate:(void (^)(NSString *, NSError *))arg1;
- (void)showWeiboSettingsIfNeeded:(void (^)(NSNumber *, NSError *))arg1;
- (void)sendStatus:(SLMicroBlogStatus *)arg1 completion:(void (^)(NSNumber *, NSError *))arg2;
- (void)fetchProfileImageDataForScreenName:(NSString *)arg1 completion:(void (^)(NSData *, NSError *))arg2;
- (void)recordsMatchingPrefixString:(NSString *)arg1 completion:(void (^)(NSArray *, NSError *))arg2;
- (void)fetchRecordForScreenName:(NSString *)arg1 completion:(void (^)(SLWeiboUserRecord *, NSError *))arg2;
- (void)fetchCurrentImageLimits:(void (^)(NSNumber *, NSError *))arg1;
- (void)fetchCurrentUrlLimits:(void (^)(NSDictionary *, NSError *))arg1;
- (void)setGeotagStatus:(NSNumber *)arg1;
- (void)fetchGeotagStatus:(void (^)(NSNumber *, NSError *))arg1;
- (void)setGeotagAccountSetting:(NSNumber *)arg1 withCompletion:(void (^)(NSNumber *, NSError *))arg2;
- (void)setActiveAccountIdentifier:(NSString *)arg1;
- (void)ensureUserRecordStore;
- (void)fetchSessionInfo:(void (^)(NSDictionary *, NSError *))arg1;
- (void)checkIn:(NSDictionary *)arg1;
@end

@protocol UIBarPositioningDelegate <NSObject>

@optional
- (long long)positionForBar:(id <UIBarPositioning>)arg1;
@end

@protocol UINavigationControllerDelegate <NSObject>

@optional
- (id <UIViewControllerAnimatedTransitioning>)navigationController:(UINavigationController *)arg1 animationControllerForOperation:(long long)arg2 fromViewController:(UIViewController *)arg3 toViewController:(UIViewController *)arg4;
- (id <UIViewControllerInteractiveTransitioning>)navigationController:(UINavigationController *)arg1 interactionControllerForAnimationController:(id <UIViewControllerAnimatedTransitioning>)arg2;
- (long long)navigationControllerPreferredInterfaceOrientationForPresentation:(UINavigationController *)arg1;
- (unsigned long long)navigationControllerSupportedInterfaceOrientations:(UINavigationController *)arg1;
- (void)navigationController:(UINavigationController *)arg1 didShowViewController:(UIViewController *)arg2 animated:(_Bool)arg3;
- (void)navigationController:(UINavigationController *)arg1 willShowViewController:(UIViewController *)arg2 animated:(_Bool)arg3;
@end

@protocol UIScrollViewDelegate <NSObject>

@optional
- (void)scrollViewDidScrollToTop:(UIScrollView *)arg1;
- (_Bool)scrollViewShouldScrollToTop:(UIScrollView *)arg1;
- (void)scrollViewDidEndZooming:(UIScrollView *)arg1 withView:(UIView *)arg2 atScale:(double)arg3;
- (void)scrollViewWillBeginZooming:(UIScrollView *)arg1 withView:(UIView *)arg2;
- (UIView *)viewForZoomingInScrollView:(UIScrollView *)arg1;
- (void)scrollViewDidEndScrollingAnimation:(UIScrollView *)arg1;
- (void)scrollViewDidEndDecelerating:(UIScrollView *)arg1;
- (void)scrollViewWillBeginDecelerating:(UIScrollView *)arg1;
- (void)scrollViewDidEndDragging:(UIScrollView *)arg1 willDecelerate:(_Bool)arg2;
- (void)scrollViewWillEndDragging:(UIScrollView *)arg1 withVelocity:(struct CGPoint)arg2 targetContentOffset:(inout struct CGPoint *)arg3;
- (void)scrollViewWillBeginDragging:(UIScrollView *)arg1;
- (void)scrollViewDidZoom:(UIScrollView *)arg1;
- (void)scrollViewDidScroll:(UIScrollView *)arg1;
@end

@protocol UISearchBarDelegate <UIBarPositioningDelegate>

@optional
- (void)searchBar:(UISearchBar *)arg1 selectedScopeButtonIndexDidChange:(long long)arg2;
- (void)searchBarResultsListButtonClicked:(UISearchBar *)arg1;
- (void)searchBarCancelButtonClicked:(UISearchBar *)arg1;
- (void)searchBarBookmarkButtonClicked:(UISearchBar *)arg1;
- (void)searchBarSearchButtonClicked:(UISearchBar *)arg1;
- (_Bool)searchBar:(UISearchBar *)arg1 shouldChangeTextInRange:(struct _NSRange)arg2 replacementText:(NSString *)arg3;
- (void)searchBar:(UISearchBar *)arg1 textDidChange:(NSString *)arg2;
- (void)searchBarTextDidEndEditing:(UISearchBar *)arg1;
- (_Bool)searchBarShouldEndEditing:(UISearchBar *)arg1;
- (void)searchBarTextDidBeginEditing:(UISearchBar *)arg1;
- (_Bool)searchBarShouldBeginEditing:(UISearchBar *)arg1;
@end

@protocol UISearchDisplayDelegate <NSObject>

@optional
- (_Bool)searchDisplayController:(UISearchDisplayController *)arg1 shouldReloadTableForSearchScope:(long long)arg2;
- (_Bool)searchDisplayController:(UISearchDisplayController *)arg1 shouldReloadTableForSearchString:(NSString *)arg2;
- (void)searchDisplayController:(UISearchDisplayController *)arg1 didHideSearchResultsTableView:(UITableView *)arg2;
- (void)searchDisplayController:(UISearchDisplayController *)arg1 willHideSearchResultsTableView:(UITableView *)arg2;
- (void)searchDisplayController:(UISearchDisplayController *)arg1 didShowSearchResultsTableView:(UITableView *)arg2;
- (void)searchDisplayController:(UISearchDisplayController *)arg1 willShowSearchResultsTableView:(UITableView *)arg2;
- (void)searchDisplayController:(UISearchDisplayController *)arg1 willUnloadSearchResultsTableView:(UITableView *)arg2;
- (void)searchDisplayController:(UISearchDisplayController *)arg1 didLoadSearchResultsTableView:(UITableView *)arg2;
- (void)searchDisplayControllerDidEndSearch:(UISearchDisplayController *)arg1;
- (void)searchDisplayControllerWillEndSearch:(UISearchDisplayController *)arg1;
- (void)searchDisplayControllerDidBeginSearch:(UISearchDisplayController *)arg1;
- (void)searchDisplayControllerWillBeginSearch:(UISearchDisplayController *)arg1;
@end

@protocol UITableViewDataSource <NSObject>
- (UITableViewCell *)tableView:(UITableView *)arg1 cellForRowAtIndexPath:(NSIndexPath *)arg2;
- (long long)tableView:(UITableView *)arg1 numberOfRowsInSection:(long long)arg2;

@optional
- (void)tableView:(UITableView *)arg1 moveRowAtIndexPath:(NSIndexPath *)arg2 toIndexPath:(NSIndexPath *)arg3;
- (void)tableView:(UITableView *)arg1 commitEditingStyle:(long long)arg2 forRowAtIndexPath:(NSIndexPath *)arg3;
- (long long)tableView:(UITableView *)arg1 sectionForSectionIndexTitle:(NSString *)arg2 atIndex:(long long)arg3;
- (NSArray *)sectionIndexTitlesForTableView:(UITableView *)arg1;
- (_Bool)tableView:(UITableView *)arg1 canMoveRowAtIndexPath:(NSIndexPath *)arg2;
- (_Bool)tableView:(UITableView *)arg1 canEditRowAtIndexPath:(NSIndexPath *)arg2;
- (NSString *)tableView:(UITableView *)arg1 titleForFooterInSection:(long long)arg2;
- (NSString *)tableView:(UITableView *)arg1 titleForHeaderInSection:(long long)arg2;
- (long long)numberOfSectionsInTableView:(UITableView *)arg1;
@end

@protocol UITableViewDelegate <NSObject, UIScrollViewDelegate>

@optional
- (void)tableView:(UITableView *)arg1 performAction:(SEL)arg2 forRowAtIndexPath:(NSIndexPath *)arg3 withSender:(id)arg4;
- (_Bool)tableView:(UITableView *)arg1 canPerformAction:(SEL)arg2 forRowAtIndexPath:(NSIndexPath *)arg3 withSender:(id)arg4;
- (_Bool)tableView:(UITableView *)arg1 shouldShowMenuForRowAtIndexPath:(NSIndexPath *)arg2;
- (long long)tableView:(UITableView *)arg1 indentationLevelForRowAtIndexPath:(NSIndexPath *)arg2;
- (NSIndexPath *)tableView:(UITableView *)arg1 targetIndexPathForMoveFromRowAtIndexPath:(NSIndexPath *)arg2 toProposedIndexPath:(NSIndexPath *)arg3;
- (void)tableView:(UITableView *)arg1 didEndEditingRowAtIndexPath:(NSIndexPath *)arg2;
- (void)tableView:(UITableView *)arg1 willBeginEditingRowAtIndexPath:(NSIndexPath *)arg2;
- (_Bool)tableView:(UITableView *)arg1 shouldIndentWhileEditingRowAtIndexPath:(NSIndexPath *)arg2;
- (NSArray *)tableView:(UITableView *)arg1 editActionsForRowAtIndexPath:(NSIndexPath *)arg2;
- (NSString *)tableView:(UITableView *)arg1 titleForDeleteConfirmationButtonForRowAtIndexPath:(NSIndexPath *)arg2;
- (long long)tableView:(UITableView *)arg1 editingStyleForRowAtIndexPath:(NSIndexPath *)arg2;
- (void)tableView:(UITableView *)arg1 didDeselectRowAtIndexPath:(NSIndexPath *)arg2;
- (void)tableView:(UITableView *)arg1 didSelectRowAtIndexPath:(NSIndexPath *)arg2;
- (NSIndexPath *)tableView:(UITableView *)arg1 willDeselectRowAtIndexPath:(NSIndexPath *)arg2;
- (NSIndexPath *)tableView:(UITableView *)arg1 willSelectRowAtIndexPath:(NSIndexPath *)arg2;
- (void)tableView:(UITableView *)arg1 didUnhighlightRowAtIndexPath:(NSIndexPath *)arg2;
- (void)tableView:(UITableView *)arg1 didHighlightRowAtIndexPath:(NSIndexPath *)arg2;
- (_Bool)tableView:(UITableView *)arg1 shouldHighlightRowAtIndexPath:(NSIndexPath *)arg2;
- (void)tableView:(UITableView *)arg1 accessoryButtonTappedForRowWithIndexPath:(NSIndexPath *)arg2;
- (long long)tableView:(UITableView *)arg1 accessoryTypeForRowWithIndexPath:(NSIndexPath *)arg2;
- (UIView *)tableView:(UITableView *)arg1 viewForFooterInSection:(long long)arg2;
- (UIView *)tableView:(UITableView *)arg1 viewForHeaderInSection:(long long)arg2;
- (double)tableView:(UITableView *)arg1 estimatedHeightForFooterInSection:(long long)arg2;
- (double)tableView:(UITableView *)arg1 estimatedHeightForHeaderInSection:(long long)arg2;
- (double)tableView:(UITableView *)arg1 estimatedHeightForRowAtIndexPath:(NSIndexPath *)arg2;
- (double)tableView:(UITableView *)arg1 heightForFooterInSection:(long long)arg2;
- (double)tableView:(UITableView *)arg1 heightForHeaderInSection:(long long)arg2;
- (double)tableView:(UITableView *)arg1 heightForRowAtIndexPath:(NSIndexPath *)arg2;
- (void)tableView:(UITableView *)arg1 didEndDisplayingFooterView:(UIView *)arg2 forSection:(long long)arg3;
- (void)tableView:(UITableView *)arg1 didEndDisplayingHeaderView:(UIView *)arg2 forSection:(long long)arg3;
- (void)tableView:(UITableView *)arg1 didEndDisplayingCell:(UITableViewCell *)arg2 forRowAtIndexPath:(NSIndexPath *)arg3;
- (void)tableView:(UITableView *)arg1 willDisplayFooterView:(UIView *)arg2 forSection:(long long)arg3;
- (void)tableView:(UITableView *)arg1 willDisplayHeaderView:(UIView *)arg2 forSection:(long long)arg3;
- (void)tableView:(UITableView *)arg1 willDisplayCell:(UITableViewCell *)arg2 forRowAtIndexPath:(NSIndexPath *)arg3;
@end

@protocol UITextViewDelegate <NSObject, UIScrollViewDelegate>

@optional
- (_Bool)textView:(UITextView *)arg1 shouldInteractWithTextAttachment:(NSTextAttachment *)arg2 inRange:(struct _NSRange)arg3;
- (_Bool)textView:(UITextView *)arg1 shouldInteractWithURL:(NSURL *)arg2 inRange:(struct _NSRange)arg3;
- (void)textViewDidChangeSelection:(UITextView *)arg1;
- (void)textViewDidChange:(UITextView *)arg1;
- (_Bool)textView:(UITextView *)arg1 shouldChangeTextInRange:(struct _NSRange)arg2 replacementText:(NSString *)arg3;
- (void)textViewDidEndEditing:(UITextView *)arg1;
- (void)textViewDidBeginEditing:(UITextView *)arg1;
- (_Bool)textViewShouldEndEditing:(UITextView *)arg1;
- (_Bool)textViewShouldBeginEditing:(UITextView *)arg1;
@end

@protocol UIWebViewDelegate <NSObject>

@optional
- (void)webView:(UIWebView *)arg1 didFailLoadWithError:(NSError *)arg2;
- (void)webViewDidFinishLoad:(UIWebView *)arg1;
- (void)webViewDidStartLoad:(UIWebView *)arg1;
- (_Bool)webView:(UIWebView *)arg1 shouldStartLoadWithRequest:(NSURLRequest *)arg2 navigationType:(long long)arg3;
@end

__attribute__((visibility("hidden")))
@interface SLInternalComposeServiceHostContext : NSExtensionContext <SLInternalComposeServiceHostProtocol, SLInternalComposeServiceVendorProtocol>
{
}

+ (id)_extensionAuxiliaryHostProtocol;
+ (id)_extensionAuxiliaryVendorProtocol;
- (void)shouldShowNetworkActivityIndicator:(id)arg1;

@end

__attribute__((visibility("hidden")))
@interface SLInternalComposeServiceVendorContext : NSExtensionContext <SLInternalComposeServiceHostProtocol, SLInternalComposeServiceVendorProtocol>
{
}

+ (id)_extensionAuxiliaryHostProtocol;
+ (id)_extensionAuxiliaryVendorProtocol;
- (void)shouldShowNetworkActivityIndicator:(id)arg1;

@end

@interface SLInternalTencentWeiboRequest : SLRequest
{
    _Bool _shouldSign;
}

@property _Bool shouldSign; // @synthesize shouldSign=_shouldSign;
- (void)_addAuthenticationParameters:(id)arg1;
- (id)signedTencentRequestFromRequest:(id)arg1;
- (void)performRequestWithHandler:(CDUnknownBlockType)arg1;

@end

@interface SLRequest : NSObject
{
    ACAccount *_account;
    OACredential *_OAuthCredential;
    long long _requestMethod;
    NSURL *_url;
    NSMutableDictionary *_parameters;
    NSMutableArray *_multiParts;
    NSString *_multiPartBoundary;
    int _callingPID;
    NSString *_applicationID;
    NSString *_contentType;
    NSData *_payload;
    unsigned long long _networkServiceType;
    SLService *_service;
}

+ (id)requestForServiceType:(id)arg1 requestMethod:(long long)arg2 URL:(id)arg3 parameters:(id)arg4;
@property(readonly, nonatomic) long long requestMethod; // @synthesize requestMethod=_requestMethod;
@property(readonly, nonatomic) NSDictionary *parameters; // @synthesize parameters=_parameters;
@property(readonly, nonatomic) NSURL *URL; // @synthesize URL=_url;
- (void).cxx_destruct;
- (unsigned long long)networkServiceType;
- (void)setNetworkServiceType:(unsigned long long)arg1;
- (void)setPayload:(id)arg1;
- (void)setContentType:(id)arg1;
- (void)performJSONRequestWithHandler:(CDUnknownBlockType)arg1;
- (void)performJSONRequestWithHandler:(CDUnknownBlockType)arg1 retryCount:(int)arg2;
- (id)_commandName;
- (_Bool)_shouldRetryAfterCount:(int)arg1 delay:(float *)arg2;
- (void)performRequestWithHandler:(CDUnknownBlockType)arg1;
- (id)dictionaryRepresentationForJSONSerialization;
- (id)preparedURLRequest;
- (id)_HTTPMethodName;
- (id)_preparedURL;
- (_Bool)shouldIncludeParameterString;
- (_Bool)_requiresAuthorization;
- (id)_parameterString;
- (void)_addAuthenticationParameters:(id)arg1;
- (_Bool)_shouldAppendTencentWeiboParametersToRequest;
- (id)_allParameters;
- (void)_appendCoreSig1Signature;
- (void)setApplicationID:(id)arg1;
- (int)callingPID;
- (void)setCallingPID:(int)arg1;
- (id)OAuthCredential;
- (void)setOAuthCredential:(id)arg1;
@property(retain, nonatomic) ACAccount *account;
- (id)completeMultiParts;
- (id)multiPartBodyData;
- (void)addMultipartData:(id)arg1 withName:(id)arg2 type:(id)arg3 filename:(id)arg4;
- (void)addMultipartData:(id)arg1 withName:(id)arg2 type:(id)arg3;
- (void)addMultiPart:(id)arg1;
- (id)multiParts;
- (void)setMultiPartBoundary:(id)arg1;
- (id)multiPartBoundary;
- (id)_urlEncodedString:(id)arg1;
- (id)parameterForKey:(id)arg1;
- (void)removeParameterForKey:(id)arg1;
- (void)setParameterValue:(id)arg1 forKey:(id)arg2;
- (id)initWithServiceType:(id)arg1 URL:(id)arg2 parameters:(id)arg3 requestMethod:(long long)arg4;
- (id)init;

@end

@interface SLRequestMultiPart : NSObject
{
    NSData *_payload;
    NSString *_name;
    NSString *_type;
    NSString *_uniqueIdentifier;
    NSString *_multiPartBoundary;
    NSString *_filename;
}

+ (id)multiPartWithName:(id)arg1 payload:(id)arg2 type:(id)arg3 multiPartBoundary:(id)arg4;
@property(copy, nonatomic) NSString *multiPartBoundary; // @synthesize multiPartBoundary=_multiPartBoundary;
@property(copy, nonatomic) NSString *filename; // @synthesize filename=_filename;
@property(copy, nonatomic) NSString *type; // @synthesize type=_type;
@property(copy, nonatomic) NSString *name; // @synthesize name=_name;
@property(retain, nonatomic) NSData *payload; // @synthesize payload=_payload;
- (void).cxx_destruct;
- (unsigned long long)length;
- (id)payloadEpilogue;
- (id)payloadPreamble;
- (id)multiPartHeader;
- (id)partData;
@property(readonly, nonatomic) NSString *uniqueIdentifier; // @dynamic uniqueIdentifier;

@end

@interface SLService : NSObject
{
}

+ (id)allServices;
+ (id)serviceForServiceType:(id)arg1;
- (id)composeViewController;
- (id)activityImage;
- (id)activityTitle;
- (_Bool)supportsVideoURL:(id)arg1;
- (_Bool)supportsImageURL:(id)arg1;
- (long long)maximumVideoTimeLimit;
- (long long)maximumVideoDataSize;
- (long long)maximumVideoCount;
- (long long)maximumImageDataSize;
- (long long)maximumImageCount;
- (long long)maximumURLCount;
- (void)addExtraParameters:(id)arg1 forRequest:(id)arg2;
- (id)accountType;
- (id)serviceType;
- (_Bool)isFirstClassService;
- (_Bool)hasAccounts;

@end

@interface SLSystemConfigManager : NSObject
{
    void *_prefs;
    _Bool _notifyForExternalChangeOnly;
    int _applySkipCount;
    NSString *_serviceType;
}

+ (id)sharedInstanceForCallbackWhileLocked:(void *)arg1;
+ (id)sharedInstanceForServiceType:(id)arg1;
- (void).cxx_destruct;
- (void)_setCallback:(CDUnknownFunctionPointerType)arg1 withContext:(CDStruct_4210025a *)arg2;
- (void)_setValue:(void *)arg1 forKey:(id)arg2;
- (void *)_getValueForKey:(id)arg1;
- (void)_synchronize;
- (void)_notifyTarget:(unsigned int)arg1;
- (void)_tearDown;
- (void)_keepAlive;
- (void)_initializeSystemConfigPrefs:(id)arg1;
- (void)_refresh;
- (id)cachedUsername;
- (void)setCachedUsername:(id)arg1;
- (void)dealloc;
- (id)initWithServiceType:(id)arg1;

@end

__attribute__((visibility("hidden")))
@interface WECoreSig1Signer : NSObject
{
}

+ (id)signatureForBaseString:(id)arg1 withKey:(id)arg2;
+ (id)_hmacSha1SignatureForBaseString:(id)arg1 withKey:(id)arg2;
+ (id)_asciiStringToHexString:(id)arg1;

@end

@interface SLWeiboSession : NSObject <SLWeiboClientSessionProtocol, SLMicroBlogSheetDelegate>
{
    SLRemoteSessionProxy<SLWeiboRemoteSessionProtocol> *_remoteSession;
    NSCache *_profileImageCache;
    NSObject<OS_dispatch_queue> *_remoteSessionQueue;
    NSObject<OS_dispatch_semaphore> *_remoteSessionQueueSemaphore;
    NSBundle *_serviceBundle;
    CLInUseAssertion *_locationInUseAssertion;
    CDUnknownBlockType _connectionResetBlock;
    CDUnknownBlockType _locationInformationChangedBlock;
}

+ (id)_remoteInterface;
@property(copy, nonatomic) CDUnknownBlockType locationInformationChangedBlock; // @synthesize locationInformationChangedBlock=_locationInformationChangedBlock;
@property(copy, nonatomic) CDUnknownBlockType connectionResetBlock; // @synthesize connectionResetBlock=_connectionResetBlock;
- (void).cxx_destruct;
- (_Bool)countMediaAttachmentsTowardCharacterCount;
- (long long)characterCountForText:(id)arg1 shortenedURLCost:(long long)arg2;
- (id)serviceAccountTypeIdentifier;
- (void)acceptLocationUpdate:(id)arg1;
- (void)getPermaLinkFromLastStatusUpdate:(CDUnknownBlockType)arg1;
- (void)showSettingsIfNeeded;
- (void)sendStatus:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)setGeotagAccountSetting:(_Bool)arg1;
- (void)fetchGeotagStatus:(CDUnknownBlockType)arg1;
- (void)setGeotagStatus:(int)arg1;
- (void)fetchCurrentImageLimits:(CDUnknownBlockType)arg1;
- (void)fetchCurrentUrlLimits:(CDUnknownBlockType)arg1;
- (void)recordsMatchingPrefixString:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)fetchProfileImageDataForScreenName:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (id)cachedProfileImageDataForScreenName:(id)arg1;
- (void)ensureUserRecordStore;
- (void)fetchSessionInfo:(CDUnknownBlockType)arg1;
- (void)setActiveAccountIdentifier:(id)arg1;
- (void)setClientInfo:(id)arg1;
- (void)tearDownConnectionToRemoteSession;
- (void)stopDeferringExpensiveOperations;
- (void)deferExpensiveOperations;
- (id)_createOrGetRemoteSession;
- (void)endPotentialLocationUse;
- (void)beginPotentialLocationUse;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface SLWeiboUserRecord : SLMicroBlogUserRecord <NSSecureCoding>
{
    NSNumber *_uid;
    NSURL *_objectID;
}

+ (_Bool)supportsSecureCoding;
+ (id)userRecordWithDictionaryRepresentation:(id)arg1;
@property(retain, nonatomic) NSURL *objectID; // @synthesize objectID=_objectID;
@property(copy, nonatomic) NSNumber *uid; // @synthesize uid=_uid;
- (void).cxx_destruct;
- (void)setValuesWithUserDictionary:(id)arg1;
- (id)description;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;

@end

@interface SLWeiboServerInterface : NSObject
{
}

+ (id)urlForResource:(int)arg1;
+ (id)consumerKey;
+ (id)consumerSecret;

@end

__attribute__((visibility("hidden")))
@interface SLVimeoService : SLService
{
}

- (id)activityImage;
- (id)activityTitle;
- (long long)maximumVideoTimeLimit;
- (long long)maximumVideoDataSize;
- (long long)maximumVideoCount;
- (long long)maximumImageCount;
- (long long)maximumURLCount;
- (_Bool)isFirstClassService;
- (long long)authenticationStyle;
- (id)accountTypeIdentifier;
- (id)serviceType;

@end

__attribute__((visibility("hidden")))
@interface SLFlickrService : SLService
{
}

- (id)activityImage;
- (id)activityTitle;
- (_Bool)isFirstClassService;
- (long long)authenticationStyle;
- (id)accountTypeIdentifier;
- (id)serviceType;

@end

__attribute__((visibility("hidden")))
@interface SLTudouService : SLService
{
}

- (_Bool)isFirstClassService;
- (long long)authenticationStyle;
- (id)accountTypeIdentifier;
- (id)serviceType;

@end

__attribute__((visibility("hidden")))
@interface SLYoukuService : SLService
{
}

- (_Bool)isFirstClassService;
- (long long)authenticationStyle;
- (id)accountTypeIdentifier;
- (id)serviceType;

@end

__attribute__((visibility("hidden")))
@interface SLSheetPreviewImageSource : NSObject
{
    ALAssetsLibrary *_assetsLibrary;
    AVAssetImageGenerator *_assetImageGenerator;
}

- (void).cxx_destruct;
- (void)cancelVideoPreviewGeneration;
- (void)_generatePreviewImageForVideoFileURL:(id)arg1 resultBlock:(CDUnknownBlockType)arg2;
- (void)_generatePreviewImageForAttachment:(id)arg1 queueToBlockWhileDownsampling:(id)arg2 resultBlock:(CDUnknownBlockType)arg3;
- (void)_fetchPreviewImageForAssetURL:(id)arg1 resultBlock:(CDUnknownBlockType)arg2;
- (void)previewImageForAttachment:(id)arg1 queueToBlockWhileDownsampling:(id)arg2 resultBlock:(CDUnknownBlockType)arg3;
@property(readonly) ALAssetsLibrary *assetsLibrary;

@end

@interface SLBatchRequest : SLRequest
{
    NSMutableArray *_requests;
}

- (void).cxx_destruct;
- (id)preparedURLRequest;
- (void)addRequest:(id)arg1;
- (id)initWithServiceType:(id)arg1 URL:(id)arg2 parameters:(id)arg3 requestMethod:(long long)arg4;

@end

__attribute__((visibility("hidden")))
@interface SLFacebookAlbumChooserViewController : UITableViewController <SLFacebookAlbumManagerDelegate>
{
    NSCache *_coverImageCache;
    UIButton *_flipBackButton;
    SLFacebookAlbumManager *_albumManager;
    NSArray *_albums;
    id <SLFacebookAlbumChooserViewControllerDelegate> _delegate;
}

+ (id)_squareImageFromAlbumImage:(id)arg1;
+ (id)_blankSurrogateAlbumImage;
@property __weak id <SLFacebookAlbumChooserViewControllerDelegate> delegate; // @synthesize delegate=_delegate;
@property(retain) NSArray *albums; // @synthesize albums=_albums;
@property(retain) SLFacebookAlbumManager *albumManager; // @synthesize albumManager=_albumManager;
@property(retain) UIButton *flipBackButton; // @synthesize flipBackButton=_flipBackButton;
- (void).cxx_destruct;
- (id)tableView:(id)arg1 cellForRowAtIndexPath:(id)arg2;
- (long long)tableView:(id)arg1 numberOfRowsInSection:(long long)arg2;
- (void)tableView:(id)arg1 willDisplayCell:(id)arg2 forRowAtIndexPath:(id)arg3;
- (void)tableView:(id)arg1 didSelectRowAtIndexPath:(id)arg2;
- (_Bool)shouldAutorotateToInterfaceOrientation:(long long)arg1;
- (void)viewDidUnload;
- (void)viewDidLoad;
- (void)viewWillLayoutSubviews;
- (void)loadView;
- (void)albumManager:(id)arg1 didFailLoadingCoverImageForAlbum:(id)arg2 withError:(id)arg3;
- (void)albumManager:(id)arg1 didLoadCoverImage:(id)arg2 forAlbum:(id)arg3;
- (void)albumManager:(id)arg1 didFailAlbumRefreshWithError:(id)arg2;
- (void)albumManager:(id)arg1 didRefreshAlbums:(id)arg2;
- (void)flipBackTapped:(id)arg1;
- (void)didReceiveMemoryWarning;
- (id)initWithNibName:(id)arg1 bundle:(id)arg2;
- (id)initWithAlbumManager:(id)arg1;

@end

@interface SLFacebookAlbumManager : NSObject
{
    _Bool _isCanceled;
    NSOperationQueue *photoQueue;
    ACAccount *_account;
    id <SLFacebookAlbumManagerDelegate> _delegate;
    SLFacebookAlbum *_selectedAlbum;
}

@property(retain) SLFacebookAlbum *selectedAlbum; // @synthesize selectedAlbum=_selectedAlbum;
@property __weak id <SLFacebookAlbumManagerDelegate> delegate; // @synthesize delegate=_delegate;
@property(retain) ACAccount *account; // @synthesize account=_account;
- (void).cxx_destruct;
- (void)loadCoverImageForAlbum:(id)arg1;
- (void)performAlbumRequestWithBatchRequests:(id)arg1 handler:(CDUnknownBlockType)arg2;
- (void)fetchDefaultAlbum:(CDUnknownBlockType)arg1;
- (void)refreshAlbums;
- (void)handleDefaultAlbumFetchResponse:(id)arg1 handler:(CDUnknownBlockType)arg2 error:(id)arg3;
- (id)defaultAlbumWithDefaultAlbumResponse:(id)arg1;
- (id)parseAlbumsWithResponse:(id)arg1;
- (void)handleAlbumResponse:(id)arg1 error:(id)arg2;
- (id)checkErrorResponse:(id)arg1;
- (id)initWithAccount:(id)arg1;

@end

__attribute__((visibility("hidden")))
@interface SLFacebookAlbumTableViewCell : UITableViewCell
{
    NSString *_albumIdentifier;
}

@property(retain) NSString *albumIdentifier; // @synthesize albumIdentifier=_albumIdentifier;
- (void).cxx_destruct;

@end

@interface SLFacebookRequest : SLRequest
{
}

@property int responseDataFormat; // @dynamic responseDataFormat;
@property(retain) NSString *accessToken; // @dynamic accessToken;
- (id)preparedURLRequest;
- (void)preflightRequest;
- (id)initWithURL:(id)arg1 parameters:(id)arg2 requestMethod:(long long)arg3;

@end

@interface SLFacebookResponse : NSObject <NSCoding>
{
    NSData *_responseData;
    NSHTTPURLResponse *_urlResponse;
    id _untypedResponseParameters;
    long long _httpErrorCode;
}

@property(readonly) long long httpErrorCode; // @synthesize httpErrorCode=_httpErrorCode;
- (void).cxx_destruct;
@property(readonly) NSDictionary *responseParameters;
- (id)untypedResponseParameters;
- (_Bool)isBatchResponse;
- (id)checkpointURL;
- (_Bool)hasMissingTokenOrAppID;
- (_Bool)hasBadTokenError;
- (_Bool)hasHTTPStatusOK;
- (_Bool)hasError;
@property(readonly) int APIresponseErrorCode;
- (long long)httpStatusCode;
@property(readonly) NSHTTPURLResponse *urlResponse;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithResponseData:(id)arg1 urlResponse:(id)arg2;

@end

@interface SLFacebookPlaceManager : NSObject <CLLocationManagerDelegate, SLPlaceDataSource>
{
    CLLocationManager *_locationManager;
    double _timeout;
    _Bool _isCanceled;
    _Bool _isUpdatingLocation;
    _Bool _disableTimeout;
    NSMutableData *_placeData;
    NSHTTPURLResponse *_urlResponse;
    NSURLConnection *_urlConnection;
    CDUnknownBlockType _queuedSearchRequest;
    CLLocation *_currentLocation;
    NSObject<SLPlaceDataSourceDelegate> *_delegate;
    ACAccount *_account;
}

@property(retain) ACAccount *account; // @synthesize account=_account;
@property __weak NSObject<SLPlaceDataSourceDelegate> *delegate; // @synthesize delegate=_delegate;
@property(retain) CLLocation *currentLocation; // @synthesize currentLocation=_currentLocation;
- (void).cxx_destruct;
- (void)locationManager:(id)arg1 didFailWithError:(id)arg2;
- (void)locationManager:(id)arg1 didUpdateLocations:(id)arg2;
- (void)connectionDidFinishLoading:(id)arg1;
- (void)connection:(id)arg1 didReceiveData:(id)arg2;
- (void)connection:(id)arg1 didReceiveResponse:(id)arg2;
- (void)connection:(id)arg1 didFailWithError:(id)arg2;
- (void)_handleResponse:(id)arg1 error:(id)arg2;
- (id)_placesArrayWithPlacesData:(id)arg1;
- (double)distanceFromCurrentLocationToPlace:(id)arg1;
- (void)fetchPlaces;
- (void)fetchPlacesWithSearchString:(id)arg1;
- (void)locationDidTimeout;
- (void)cancelPlaceFetch;
- (void)stopUpdatingLocation;
- (void)startUpdatingLocation;
@property(readonly) double currentLocationAccuracy;
- (id)initWithLocationManager:(id)arg1 account:(id)arg2 desiredAccuracy:(double)arg3 timeout:(double)arg4;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

__attribute__((visibility("hidden")))
@interface SLFacebookVideoOptionsViewController : UITableViewController
{
    NSArray *_qualityOptions;
    NSURL *_videoAssetURL;
    SLVideoQualityOption *_selectedOption;
    id <SLFacebookVideoOptionsDelegate> _delegate;
}

@property(nonatomic) __weak id <SLFacebookVideoOptionsDelegate> delegate; // @synthesize delegate=_delegate;
- (void).cxx_destruct;
- (void)tableView:(id)arg1 didSelectRowAtIndexPath:(id)arg2;
- (id)tableView:(id)arg1 titleForHeaderInSection:(long long)arg2;
- (id)tableView:(id)arg1 cellForRowAtIndexPath:(id)arg2;
- (long long)tableView:(id)arg1 numberOfRowsInSection:(long long)arg2;
- (long long)numberOfSectionsInTableView:(id)arg1;
- (void)didReceiveMemoryWarning;
- (void)viewDidLoad;
- (void)_generateQualityOptionsWithAssetURL:(id)arg1;
- (void)setSelectedQualityOption:(id)arg1;
- (id)initWithVideoAssetURL:(id)arg1;

@end

@interface SLComposeViewController : UIViewController <SLRemoteComposeViewControllerDelegateProtocol>
{
    NSExtension *_extension;
    NSString *_initialText;
    NSArray *_itemProviders;
    NSArray *_extensionItems;
    NSLayoutConstraint *_keyboardTopConstraint;
    UIView *_keyboardTrackingView;
    long long _savedStatusBarStyle;
    _Bool _wasPresented;
    CDUnknownBlockType _completionHandler;
    _Bool _didFailLoadingRemoteViewController;
    _Bool _didCompleteSheet;
    long long _maximumImageCount;
    long long _maximumURLCount;
    long long _maximumVideoCount;
    long long _numVideosAdded;
    long long _numImagesAdded;
    long long _numURLsAdded;
    NSString *_serviceType;
    UIViewController *_remoteViewController;
}

+ (id)composeViewControllerForExtensionIdentifier:(id)arg1;
+ (id)composeViewControllerForServiceType:(id)arg1;
+ (id)composeViewControllerForExtension:(id)arg1;
+ (_Bool)isAvailableForExtensionIdentifier:(id)arg1;
+ (_Bool)isAvailableForServiceType:(id)arg1;
+ (_Bool)isAvailableForExtension:(id)arg1;
+ (_Bool)_isAvailableForService:(id)arg1;
+ (id)_shareExtensionWithIdentifier:(id)arg1;
+ (id)extensionIdentifierForActivityType:(id)arg1;
+ (_Bool)_isServiceType:(id)arg1;
+ (id)_serviceTypeForExtensionIdentifier:(id)arg1;
+ (id)_extensionIdentifierForServiceType:(id)arg1;
+ (id)_serviceTypeToExtensionIdentifierMap;
@property(retain) UIViewController *remoteViewController; // @synthesize remoteViewController=_remoteViewController;
@property(copy, nonatomic) CDUnknownBlockType completionHandler; // @synthesize completionHandler=_completionHandler;
@property(readonly, nonatomic) NSString *serviceType; // @synthesize serviceType=_serviceType;
- (void).cxx_destruct;
- (_Bool)canSendTweet;
- (_Bool)shouldAutorotateToInterfaceOrientation:(long long)arg1;
- (void)viewDidUnload;
- (void)viewDidAppear:(_Bool)arg1;
- (void)viewDidDisappear:(_Bool)arg1;
- (void)viewWillDisappear:(_Bool)arg1;
- (void)viewWillAppear:(_Bool)arg1;
- (_Bool)_useCustomDimmingView;
- (void)remoteViewController:(id)arg1 didTerminateWithError:(id)arg2;
- (void)remoteController:(id)arg1 didLoadWithError:(id)arg2;
- (void)_handleRemoteViewFailure;
- (void)remoteViewControllerLoadDidTimeout;
- (void)didLoadSheetViewController;
- (void)userDidPost;
- (void)userDidCancel;
- (void)completeWithResult:(long long)arg1;
- (void)setLongitude:(double)arg1 latitude:(double)arg2 name:(id)arg3;
- (CDUnknownBlockType)addDownSampledImageDataByProxyWithPreviewImage:(id)arg1;
- (_Bool)addAttachment:(id)arg1;
- (_Bool)addExtensionItem:(id)arg1;
- (_Bool)addItemProvider:(id)arg1;
- (_Bool)removeAllURLs;
- (_Bool)_addURL:(id)arg1 type:(long long)arg2 preview:(id)arg3;
- (_Bool)addURL:(id)arg1 withPreviewImage:(id)arg2;
- (_Bool)addURL:(id)arg1;
- (_Bool)_addVideoData:(id)arg1 preview:(id)arg2;
- (_Bool)_addVideoAsset:(id)arg1 preview:(id)arg2;
- (_Bool)removeAllImages;
- (_Bool)_addImageJPEGData:(id)arg1 preview:(id)arg2;
- (_Bool)addImage:(id)arg1;
- (_Bool)_addImageAsset:(id)arg1 preview:(id)arg2;
- (_Bool)addImageAsset:(id)arg1;
- (id)_urlForUntypedAsset:(id)arg1;
- (_Bool)supportsVideoAsset:(id)arg1;
- (_Bool)supportsImageAsset:(id)arg1;
- (_Bool)setInitialText:(id)arg1;
- (_Bool)canAddContent;
- (void)dealloc;
- (id)initWithExtensionIdentifier:(id)arg1;
- (id)initWithServiceType:(id)arg1;
- (id)initWithExtension:(id)arg1 requestedServiceType:(id)arg2;

@end

@interface SLSheetPlaceViewController : UIViewController <UITableViewDelegate, UITableViewDataSource, UISearchBarDelegate, UISearchDisplayDelegate, MKMapViewDelegate, SLPlaceDataSourceDelegate>
{
    NSArray *_places;
    SLPlace *_selectedPlace;
    NSBundle *_effectiveBundle;
    UITableView *_tableView;
    UISearchBar *_searchBar;
    UISearchDisplayController *_searchDisplayController;
    SLSheetPlaceSearchController *_placeSearchController;
    MKMapView *_mapView;
    _Bool _searchPresented;
    _Bool _searchAnimationComplete;
    double _mapHeight;
    _Bool _searchEnabled;
    NSObject<SLSheetPlaceViewControllerDelegate> *_selectionDelegate;
    ACAccount *_account;
    NSObject<SLPlaceDataSource> *_placeDataSource;
}

@property(retain) NSObject<SLPlaceDataSource> *placeDataSource; // @synthesize placeDataSource=_placeDataSource;
@property(retain) ACAccount *account; // @synthesize account=_account;
@property(nonatomic) _Bool searchEnabled; // @synthesize searchEnabled=_searchEnabled;
@property __weak NSObject<SLSheetPlaceViewControllerDelegate> *selectionDelegate; // @synthesize selectionDelegate=_selectionDelegate;
- (void).cxx_destruct;
- (_Bool)searchDisplayController:(id)arg1 shouldReloadTableForSearchString:(id)arg2;
- (void)searchDisplayControllerDidEndSearch:(id)arg1;
- (void)searchDisplayControllerWillEndSearch:(id)arg1;
- (void)searchDisplayControllerDidBeginSearch:(id)arg1;
- (void)tableView:(id)arg1 didSelectRowAtIndexPath:(id)arg2;
- (void)tableView:(id)arg1 willDisplayCell:(id)arg2 forRowAtIndexPath:(id)arg3;
- (id)tableView:(id)arg1 cellForRowAtIndexPath:(id)arg2;
- (long long)tableView:(id)arg1 numberOfRowsInSection:(long long)arg2;
- (long long)numberOfSectionsInTableView:(id)arg1;
- (_Bool)shouldAutorotateToInterfaceOrientation:(long long)arg1;
- (void)viewDidDisappear:(_Bool)arg1;
- (void)viewWillDisappear:(_Bool)arg1;
- (void)viewDidAppear:(_Bool)arg1;
- (void)viewWillAppear:(_Bool)arg1;
- (void)viewDidLoad;
- (void)loadView;
- (void)placeManager:(id)arg1 failedWithError:(id)arg2;
- (void)placeManager:(id)arg1 updatedPlaces:(id)arg2;
- (_Bool)_forceSelectPlace:(id)arg1 setMapAnnotation:(_Bool)arg2;
- (void)mapView:(id)arg1 didSelectAnnotationView:(id)arg2;
- (void)_centerMapForPlaces;
- (void)_centerMapWithSelectedPlace:(id)arg1;
- (void)_layoutNormal;
- (void)_layoutForSearch;
- (void)_restoreFromSearch;
- (void)searchBarCancelButtonClicked:(id)arg1;
- (void)searchBarTextDidEndEditing:(id)arg1;
- (void)_presentSearch;
- (void)searchBarTextDidBeginEditing:(id)arg1;
- (_Bool)searchBarShouldBeginEditing:(id)arg1;
- (double)_mapHeightForInterfaceOrientation:(long long)arg1;
- (void)willAnimateRotationToInterfaceOrientation:(long long)arg1 duration:(double)arg2;
- (void)_calculatePreferredContentSize;
- (double)_preferredViewHeight;
- (void)cancelButtonTapped:(id)arg1;
- (id)_placeForRow:(long long)arg1;
@property(retain) NSArray *places; // @dynamic places;
- (void)setSelectedPlace:(id)arg1;
- (CDStruct_90e2a262)_regionForPlaces:(id)arg1;
- (void)didReceiveMemoryWarning;
- (void)dealloc;
- (id)initWithPlaceDataSource:(id)arg1 effectiveBundle:(id)arg2;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface SLFacebookPostPrivacyCategory : NSObject
{
    NSString *_name;
    NSArray *_audiencePrivacySettings;
}

@property(retain) NSArray *audiencePrivacySettings; // @synthesize audiencePrivacySettings=_audiencePrivacySettings;
@property(retain) NSString *name; // @synthesize name=_name;
- (void).cxx_destruct;

@end

@interface SLPlace : NSObject <MKAnnotation, NSSecureCoding>
{
    NSString *_identifier;
    NSString *_name;
    NSURL *_pictureURL;
    NSString *_category;
    double _latitude;
    double _longitude;
    double _distance;
}

+ (_Bool)supportsSecureCoding;
@property double distance; // @synthesize distance=_distance;
@property double longitude; // @synthesize longitude=_longitude;
@property double latitude; // @synthesize latitude=_latitude;
@property(retain) NSString *category; // @synthesize category=_category;
@property(retain) NSURL *pictureURL; // @synthesize pictureURL=_pictureURL;
@property(retain) NSString *name; // @synthesize name=_name;
@property(retain) NSString *identifier; // @synthesize identifier=_identifier;
- (void).cxx_destruct;
@property(readonly, copy) NSString *description;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)encodableProperties;
@property(readonly, copy, nonatomic) NSString *subtitle;
@property(readonly, copy, nonatomic) NSString *title;
@property(readonly, nonatomic) CDStruct_c3b9c2ee coordinate;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface SLFacebookPostPrivacyManager : NSObject
{
    ACAccount *_account;
    NSArray *_privacySettings;
}

- (void).cxx_destruct;
- (void)updatePrivacySettingsWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)_handlePrivacySettingsUpdateResponseWithData:(id)arg1 urlResponse:(id)arg2 error:(id)arg3 handler:(CDUnknownBlockType)arg4;
- (id)_privacySettingsFromPrivacyOptionDictionaries:(id)arg1;
- (id)defaultPrivacySetting;
@property(retain) SLFacebookPostPrivacySetting *privacySetting; // @dynamic privacySetting;
- (id)_userDefaultsDict;
- (void)_setPrivacySettings:(id)arg1;
- (id)privacySettings;
- (id)initWithAccount:(id)arg1;

@end

__attribute__((visibility("hidden")))
@interface SLFacebookFriendList : NSObject
{
    NSString *_identifier;
    NSString *_name;
    NSString *_type;
}

+ (id)friendListsWithResponseData:(id)arg1;
+ (id)friendListWithDictionary:(id)arg1;
@property(retain) NSString *type; // @synthesize type=_type;
@property(retain) NSString *name; // @synthesize name=_name;
@property(retain) NSString *identifier; // @synthesize identifier=_identifier;
- (void).cxx_destruct;
- (id)initWithFriendListDictionary:(id)arg1;

@end

__attribute__((visibility("hidden")))
@interface SLFacebookAudienceTableViewController : UITableViewController <SLFacebookAudienceViewController>
{
    NSArray *_privacySettings;
    SLFacebookPostPrivacySetting *_selectedSetting;
    id <SLFacebookAudienceViewControllerDelegate> _selectionDelegate;
    UINavigationItem *_navigationItem;
}

- (void).cxx_destruct;
- (void)tableView:(id)arg1 didSelectRowAtIndexPath:(id)arg2;
- (void)tableView:(id)arg1 willDisplayCell:(id)arg2 forRowAtIndexPath:(id)arg3;
- (id)tableView:(id)arg1 cellForRowAtIndexPath:(id)arg2;
- (long long)tableView:(id)arg1 numberOfRowsInSection:(long long)arg2;
- (long long)numberOfSectionsInTableView:(id)arg1;
- (id)_privacySettingForIndexPath:(id)arg1;
- (void)setCurrentPrivacySetting:(id)arg1;
- (void)setPrivacySettings:(id)arg1;
- (void)setSelectionDelegate:(id)arg1;
- (void)cancelButtonTapped:(id)arg1;
- (void)viewWillLayoutSubviews;
- (void)viewDidDisappear:(_Bool)arg1;
- (void)viewWillDisappear:(_Bool)arg1;
- (void)viewDidAppear:(_Bool)arg1;
- (void)viewWillAppear:(_Bool)arg1;
- (void)viewDidUnload;
- (void)viewDidLoad;
- (void)loadView;
- (void)didReceiveMemoryWarning;
- (id)initWithStyle:(long long)arg1;

@end

__attribute__((visibility("hidden")))
@interface SLSheetBevelledImageView : SLSheetImagePreviewView
{
    UIView *_placeholderPreviewView;
    UIImageView *_placeholderGlyphView;
    _Bool _needsURLPlaceholderImage;
}

@property(nonatomic) _Bool needsURLPlaceholderImage; // @synthesize needsURLPlaceholderImage=_needsURLPlaceholderImage;
- (void).cxx_destruct;
- (void)layoutSubviews;
- (_Bool)generatePreviewImageFromAttachments;
- (void)setImage:(id)arg1;
- (void)ensurePlaceholderPreviewImage;
- (struct CGSize)intrinsicContentSize;
- (id)init;

@end

@interface SLFacebookPlace : SLPlace
{
}

+ (id)placeWithResponseDictionary:(id)arg1;

@end

@interface SLFacebookComposeViewController : SLComposeServiceViewController <SLFacebookAudienceViewControllerDelegate, SLFacebookAlbumChooserViewControllerDelegate, SLFacebookVideoOptionsDelegate, SLPlaceDataSourceDelegate, SLSheetPlaceViewControllerDelegate>
{
    _Bool _hasAccessToAccount;
    _Bool _hasCheckedAccess;
    _Bool _hasShowedLocationDeniedAlert;
    SLFacebookSession *_session;
    ACAccountStore *_accountStore;
    _Bool _didFetchPrivilegedAccount;
    ACAccount *_privilegedAccount;
    SLSheetPlaceViewController *_placeViewController;
    UIViewController<SLFacebookAudienceViewController> *_audienceViewController;
    SLFacebookAlbumChooserViewController *_albumChooserViewController;
    SLFacebookVideoOptionsViewController *_videoOptionsViewController;
    SLFacebookPost *_post;
    SLFacebookPostPrivacyManager *_postPrivacyManager;
    SLFacebookPlaceManager *_placeManager;
    SLFacebookAlbumManager *_albumManager;
    ALAssetsLibrary *_assetsLibrary;
    SLComposeSheetConfigurationItem *_privacyConfigurationItem;
    SLComposeSheetConfigurationItem *_albumConfigurationItem;
    SLComposeSheetConfigurationItem *_placeConfigurationItem;
    SLComposeSheetConfigurationItem *_videoOptionsConfigurationItem;
    SLVideoQualityOption *_selectedVideoQualityOption;
    struct {
        unsigned int showAlbumAction:1;
        unsigned int showPrivacyAction:1;
        unsigned int showPlaceAction:1;
        unsigned int showVideoDetailAction:1;
    } _actionFlags;
    CLInUseAssertion *_locationInUseAssertion;
    CDUnknownBlockType _completionHandler;
}

+ (id)serviceBundle;
@property(copy, nonatomic) CDUnknownBlockType completionHandler; // @synthesize completionHandler=_completionHandler;
- (void).cxx_destruct;
- (void)_presentFacebookDisabledAlert;
- (void)_presentNoAccountsAlert;
- (void)presentationAnimationDidFinish;
- (void)callCompletionHandlerWithResult:(long long)arg1;
- (void)setupCommonUI;
- (void)handleImagePostWithURL;
- (_Bool)hasAccountAccess;
- (void)didSelectPost;
- (_Bool)isContentValid;
- (void)placeViewController:(id)arg1 didSelectPlace:(id)arg2;
- (void)placeManager:(id)arg1 failedWithError:(id)arg2;
- (void)_setPlace:(id)arg1;
- (void)placeManager:(id)arg1 updatedPlaces:(id)arg2;
- (_Bool)_isLocationAuthorizationDenied;
- (void)_presentPlaceViewController;
- (void)_handlePostPrivacyResultWithSuccess:(_Bool)arg1 error:(id)arg2;
- (id)_postPrivacyManager;
- (void)audienceViewController:(id)arg1 didSelectPostPrivacySetting:(id)arg2;
- (void)_presentAudienceViewController;
- (void)albumChooserViewController:(id)arg1 didSelectAlbum:(id)arg2;
- (void)_presentAlbumViewController;
- (void)_setVideoSizeOptionIdentifier:(id)arg1;
- (id)_videoOptionIdentifer;
- (void)videoOptionsViewController:(id)arg1 didSelectVideoQualityOption:(id)arg2;
- (id)_videoQualityOption;
- (void)_presentVideoOptionsViewController;
- (id)albumManager;
@property(retain) ACAccountStore *accountStore; // @dynamic accountStore;
@property(readonly) ACAccount *privilegedAccount;
- (void)_hostApplicationWillEnterForeground;
- (void)_hostApplicationDidEnterBackground;
- (void)viewWillDisappear:(_Bool)arg1;
- (void)viewDidAppear:(_Bool)arg1;
- (void)viewWillAppear:(_Bool)arg1;
- (id)configurationItems;
- (id)_videoOptionsConfigurationItem;
- (void)_updateAlbumConfigurationItemWithDefaultAlbum;
- (id)_albumConfigurationItem;
- (id)_placeConfigurationItem;
- (void)_updatePrivacyConfigurationItemWithDefaultPrivacySetting;
- (id)_privacyConfigurationItem;
- (void)didReceiveMemoryWarning;
- (id)initWithNibName:(id)arg1 bundle:(id)arg2;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

__attribute__((visibility("hidden")))
@interface SLRemoteComposeViewController : _UIRemoteViewController
{
    id <SLRemoteComposeViewControllerDelegateProtocol> _delegate;
}

@property(nonatomic) __weak id <SLRemoteComposeViewControllerDelegateProtocol> delegate; // @synthesize delegate=_delegate;
- (void).cxx_destruct;
- (void)viewServiceDidTerminateWithError:(id)arg1;

@end

@interface SLFacebookPost : NSObject <NSSecureCoding>
{
    NSMutableArray *_imageData;
    NSMutableArray *_imageAssetURLs;
    NSMutableArray *_videoData;
    NSMutableArray *_videoAssetURLs;
    NSString *_maskedApplicationID;
    NSString *_text;
    NSString *_videoExportPreset;
    NSURL *_link;
    SLFacebookPlace *_place;
    SLFacebookAlbum *_album;
    SLFacebookPostPrivacySetting *_privacySetting;
    NSArray *_taggedUserIDs;
}

+ (_Bool)supportsSecureCoding;
@property(retain) NSArray *taggedUserIDs; // @synthesize taggedUserIDs=_taggedUserIDs;
@property(retain) SLFacebookPostPrivacySetting *privacySetting; // @synthesize privacySetting=_privacySetting;
@property(retain) SLFacebookAlbum *album; // @synthesize album=_album;
@property(retain) SLFacebookPlace *place; // @synthesize place=_place;
@property(retain) NSURL *link; // @synthesize link=_link;
@property(retain) NSString *videoExportPreset; // @synthesize videoExportPreset=_videoExportPreset;
@property(retain) NSString *text; // @synthesize text=_text;
- (void).cxx_destruct;
- (id)copy;
@property(retain) NSString *maskedApplicationID; // @synthesize maskedApplicationID=_maskedApplicationID;
- (void)addVideoData:(id)arg1;
- (void)addVideoAssetURL:(id)arg1;
@property(retain) NSArray *videoAssetURLs; // @dynamic videoAssetURLs;
@property(retain) NSArray *videoData; // @dynamic videoData;
@property(retain) NSArray *imageAssetURLs; // @dynamic imageAssetURLs;
@property(retain) NSArray *imageData; // @dynamic imageData;
- (void)addImageData:(id)arg1;
- (void)addImageAssetURL:(id)arg1;
- (id)_encodableObjectProperties;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)init;

@end

__attribute__((visibility("hidden")))
@interface SLSheetNavigationController : UINavigationController
{
}

- (void)didReceiveMemoryWarning;
- (void)viewDidLoad;
- (void)setDefaultNavigationBarStyle;
- (void)setSheetNavigationBarStyle;
- (void)loadView;
- (id)initWithNibName:(id)arg1 bundle:(id)arg2;

@end

@interface SLFacebookAlbum : NSObject <NSSecureCoding>
{
    _Bool _canUpload;
    _Bool _isDefaultAlbum;
    NSString *_identifier;
    NSString *_name;
    NSString *_coverPhotoIdentifier;
    long long _count;
}

+ (id)albumsWithAlbumDataDictionaries:(id)arg1;
+ (id)albumWithDataDictionary:(id)arg1;
+ (_Bool)supportsSecureCoding;
@property _Bool isDefaultAlbum; // @synthesize isDefaultAlbum=_isDefaultAlbum;
@property _Bool canUpload; // @synthesize canUpload=_canUpload;
@property long long count; // @synthesize count=_count;
@property(retain) NSString *coverPhotoIdentifier; // @synthesize coverPhotoIdentifier=_coverPhotoIdentifier;
@property(retain) NSString *name; // @synthesize name=_name;
@property(retain) NSString *identifier; // @synthesize identifier=_identifier;
- (void).cxx_destruct;
- (id)description;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;

@end

@interface SLFacebookPostPrivacySetting : NSObject <NSSecureCoding>
{
    int _type;
    NSString *_identifier;
    NSString *_name;
    NSDictionary *_parameters;
}

+ (_Bool)supportsSecureCoding;
+ (int)_privacySettingTypeFromTypeIdentifier:(id)arg1;
+ (id)postPrivacySettingsForPrivacyOptions:(id)arg1;
+ (id)postPrivacySettingForPrivacyOptionDictionary:(id)arg1;
+ (id)postPrivacySettingWithIdentifier:(id)arg1 name:(id)arg2 type:(int)arg3 parameters:(id)arg4;
@property int type; // @synthesize type=_type;
@property(retain) NSDictionary *parameters; // @synthesize parameters=_parameters;
@property(retain) NSString *name; // @synthesize name=_name;
@property(retain) NSString *identifier; // @synthesize identifier=_identifier;
- (void).cxx_destruct;
- (id)_parametersJSONStringRepresentation;
- (id)parametersFormValueString;
- (id)description;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;

@end

__attribute__((visibility("hidden")))
@interface _SLSheetMaskLayer : CALayer
{
    double _clipCornerRadius;
    UIColor *_clipBackgroundColor;
}

@property(retain, nonatomic) UIColor *clipBackgroundColor; // @synthesize clipBackgroundColor=_clipBackgroundColor;
@property(nonatomic) double clipCornerRadius; // @synthesize clipCornerRadius=_clipCornerRadius;
- (void).cxx_destruct;
- (void)drawInContext:(struct CGContext *)arg1;

@end

__attribute__((visibility("hidden")))
@interface SLSheetMasklayer : CALayer
{
    CALayer *_topLayer;
    CALayer *_leftLayer;
    CALayer *_bottomLayer;
    CALayer *_rightLayer;
    _SLSheetMaskLayer *_sheetMaskLayer;
    CALayer *_solidSheetMaskLayer;
    UIColor *_backgroundColor;
    struct CGRect _lastBounds;
    struct CGRect _lastMaskRect;
    double _clipCornerRadius;
    UIColor *_clipBackgroundColor;
}

@property(retain, nonatomic) UIColor *clipBackgroundColor; // @synthesize clipBackgroundColor=_clipBackgroundColor;
@property(nonatomic) double clipCornerRadius; // @synthesize clipCornerRadius=_clipCornerRadius;
- (void).cxx_destruct;
- (void)updateMaskWithBounds:(struct CGRect)arg1 maskRect:(struct CGRect)arg2;
- (void)animateSheetMaskFromOldSheetFrame:(struct CGRect)arg1 toSheetFrame:(struct CGRect)arg2 duration:(double)arg3;
- (void)restoreSheetCutout;
- (void)removeSheetCutout;
- (void)removeAllAnimations;
- (id)initWithBackgroundColor:(id)arg1 cornerRadius:(double)arg2;

@end

@interface SLFacebookSession : NSObject
{
    id <SLFacebookRemoteSessionProtocol> _remoteSession;
}

+ (id)_remoteInterface;
+ (id)sharedSession;
- (void).cxx_destruct;
- (void)fetchLikeStatusForURL:(id)arg1 flags:(unsigned long long)arg2 completion:(CDUnknownBlockType)arg3;
- (void)unlikeURL:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)likeURL:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (_Bool)uploadProfilePicture:(id)arg1 error:(id *)arg2;
- (void)revokeAllAccessTokensForDevice;
- (void)revokeAccessTokenForAppWithID:(id)arg1;
- (void)cancelUploadWithIdentifier:(id)arg1;
- (void)uploadsInProgress:(CDUnknownBlockType)arg1;
- (void)uploadPost:(id)arg1 suppressAlerts:(_Bool)arg2 withPostCompletion:(CDUnknownBlockType)arg3;
- (_Bool)uploadPost:(id)arg1 forPID:(int)arg2;
- (_Bool)uploadPost:(id)arg1;
- (void)injectCompletedUploadWithCompletion:(CDUnknownBlockType)arg1;
- (void)testCall;
- (id)tokenSecretForEntitledClientWithError:(id *)arg1;
- (id)init;

@end

@interface SLFacebookRegistrationInfo : NSObject
{
    NSString *_firstName;
    NSString *_lastName;
    NSString *_email;
    NSNumber *_phone;
    NSString *_password;
    NSString *_gender;
    NSDate *_birthday;
}

@property(retain, nonatomic) NSDate *birthday; // @synthesize birthday=_birthday;
@property(retain, nonatomic) NSString *gender; // @synthesize gender=_gender;
@property(retain, nonatomic) NSString *password; // @synthesize password=_password;
@property(retain, nonatomic) NSNumber *phone; // @synthesize phone=_phone;
@property(retain, nonatomic) NSString *email; // @synthesize email=_email;
@property(retain, nonatomic) NSString *lastName; // @synthesize lastName=_lastName;
@property(retain, nonatomic) NSString *firstName; // @synthesize firstName=_firstName;
- (void).cxx_destruct;
- (id)debugDescription;
- (_Bool)hasAllRequiredValues;

@end

@interface SLFacebookRegistrationRequest : SLFacebookRequest
{
    SLFacebookRegistrationInfo *_registrationInfo;
}

- (void).cxx_destruct;
- (id)_urlEncodedString:(id)arg1;
- (id)_tokenSecret;
- (void)performRequestWithHandler:(CDUnknownBlockType)arg1;
- (id)_sha1HashForString:(id)arg1;
- (void)_prepareRequestForValidation;
- (id)initWithRegistrationInfo:(id)arg1;

@end

@interface SLFacebookLoginRequest : SLFacebookRequest
{
    ACAccount *_account;
}

- (void).cxx_destruct;
- (void)preflightRequest;
- (id)_tokenSecret;
- (id)initWithAccount:(id)arg1;

@end

@interface SLFacebookAuthorizationRequest : SLFacebookRequest
{
}

- (id)_csvStringFromSet:(id)arg1;
- (id)initWithAppId:(id)arg1 bundleId:(id)arg2 permissions:(id)arg3 audience:(id)arg4;

@end

@interface SLFacebookRenewTokenRequest : SLFacebookRequest
{
}

- (id)_csvStringFromSet:(id)arg1;
- (id)initWithAppId:(id)arg1 bundleId:(id)arg2 permissions:(id)arg3;

@end

@interface SLSheetPlaceSearchController : NSObject <UITableViewDataSource, SLPlaceDataSourceDelegate>
{
    NSTimer *_delayTimer;
    _Bool _isSearching;
    NSString *_searchString;
    int _retryCount;
    NSLock *_retryLock;
    NSObject<SLPlaceDataSource> *_placeDataSource;
    UISearchDisplayController *_searchDisplayController;
    NSArray *_searchResults;
}

@property(retain) NSArray *searchResults; // @synthesize searchResults=_searchResults;
@property(retain) UISearchDisplayController *searchDisplayController; // @synthesize searchDisplayController=_searchDisplayController;
@property(retain) NSObject<SLPlaceDataSource> *placeDataSource; // @synthesize placeDataSource=_placeDataSource;
- (void).cxx_destruct;
- (id)tableView:(id)arg1 cellForRowAtIndexPath:(id)arg2;
- (long long)tableView:(id)arg1 numberOfRowsInSection:(long long)arg2;
- (void)placeManager:(id)arg1 failedWithError:(id)arg2;
- (void)placeManager:(id)arg1 updatedPlaces:(id)arg2;
- (void)performDelayedFetch:(id)arg1;
- (void)cancelSearch;
- (void)searchWithSearchString:(id)arg1;
- (id)initWithPlaceDataSource:(id)arg1 searchDisplayController:(id)arg2;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface SLSheetAction : SLComposeSheetConfigurationItem
{
}

@property(copy, nonatomic) CDUnknownBlockType actionBlock;
- (id)initWithTitle:(id)arg1 value:(id)arg2 actionBlock:(CDUnknownBlockType)arg3;

@end

__attribute__((visibility("hidden")))
@interface SLTwitterExpandedHitTestButton : UIButton
{
}

- (_Bool)pointInside:(struct CGPoint)arg1 withEvent:(id)arg2;

@end

__attribute__((visibility("hidden")))
@interface SLTwitterExpandedHitTestView : UIView
{
}

- (_Bool)pointInside:(struct CGPoint)arg1 withEvent:(id)arg2;

@end

__attribute__((visibility("hidden")))
@interface SLTwitterExpandedHitTestImageView : UIImageView
{
}

- (_Bool)pointInside:(struct CGPoint)arg1 withEvent:(id)arg2;

@end

@interface SLTwitterRequest : NSObject
{
    ACAccount *_account;
    OACredential *_credential;
    int _callingPID;
    NSObject<SLTimestampSkewStorageDelegate> *_timestampSkewStorageDelegate;
    NSURL *_url;
    NSMutableDictionary *_parameters;
    long long _requestMethod;
    NSMutableArray *_multiParts;
    NSString *_applicationID;
}

+ (float)retryDelayForRetryCount:(int)arg1;
+ (_Bool)responseIsTimestampOutOfBounds:(id)arg1 data:(id)arg2 JSONResponseObject:(id)arg3;
@property(readonly, nonatomic) NSDictionary *parameters; // @synthesize parameters=_parameters;
@property(readonly, nonatomic) long long requestMethod; // @synthesize requestMethod=_requestMethod;
@property(retain, nonatomic) ACAccount *account; // @synthesize account=_account;
@property(readonly, nonatomic) NSURL *URL; // @synthesize URL=_url;
- (void).cxx_destruct;
- (void)performJSONRequestWithHandler:(CDUnknownBlockType)arg1;
- (void)setApplicationID:(id)arg1;
- (id)timestampSkewStorageDelegate;
- (void)setTimestampSkewStorageDelegate:(id)arg1;
- (int)callingPID;
- (void)setCallingPID:(int)arg1;
- (void)performRequestWithHandler:(CDUnknownBlockType)arg1;
- (void)_performRequestExtractingJSONResponse:(_Bool)arg1 retryCount:(int)arg2 maxRetries:(int)arg3 completion:(CDUnknownBlockType)arg4;
- (void)calculateTimestampSkewFromResponse:(id)arg1;
- (id)multiPartBodyData;
- (id)_urlEncodedString:(id)arg1;
- (id)_parameterString;
- (id)_allParameters;
- (void)addMultiPartData:(id)arg1 withName:(id)arg2 type:(id)arg3;
- (id)signedURLRequest;
- (void)_setTimestampSkew:(double)arg1;
- (double)_timestampSkew;
- (void)setParameter:(id)arg1 forKey:(id)arg2;
- (id)commandName;
- (_Bool)requiresAuthorization;
- (id)credential;
- (void)setCredential:(id)arg1;
- (void)setRequestMethod:(long long)arg1;
- (id)initWithCredential:(id)arg1 URL:(id)arg2;
- (id)initWithURL:(id)arg1;
- (id)initWithURL:(id)arg1 parameters:(id)arg2 requestMethod:(long long)arg3;
- (void)sharedPrivateInit;

@end

__attribute__((visibility("hidden")))
@interface SLTwitterRequestMultiPart : NSObject
{
    NSData *_payload;
    NSString *_name;
    NSString *_type;
}

+ (id)multipartBoundary;
+ (id)multiPartWithName:(id)arg1 payload:(id)arg2 type:(id)arg3;
@property(copy, nonatomic) NSString *name; // @synthesize name=_name;
@property(copy, nonatomic) NSString *type; // @synthesize type=_type;
@property(retain, nonatomic) NSData *payload; // @synthesize payload=_payload;
- (void).cxx_destruct;
- (id)partData;
- (id)formPartData;
- (id)imagePartData;

@end

__attribute__((visibility("hidden")))
@interface SLTwitterSearchBar : UISearchBar
{
}

- (_Bool)textFieldShouldClear:(id)arg1;

@end

@interface SLTwitterSession : NSObject <SLTwitterClientSessionProtocol, SLMicroBlogSheetDelegate>
{
    SLRemoteSessionProxy<SLTwitterRemoteSessionProtocol> *_remoteSession;
    NSCache *_profileImageCache;
    NSObject<OS_dispatch_queue> *_remoteSessionQueue;
    NSObject<OS_dispatch_semaphore> *_remoteSessionQueueSemaphore;
    NSBundle *_serviceBundle;
    CLInUseAssertion *_locationInUseAssertion;
    CDUnknownBlockType _connectionResetBlock;
    CDUnknownBlockType _locationInformationChangedBlock;
}

+ (id)_remoteInterface;
@property(copy, nonatomic) CDUnknownBlockType locationInformationChangedBlock; // @synthesize locationInformationChangedBlock=_locationInformationChangedBlock;
@property(copy, nonatomic) CDUnknownBlockType connectionResetBlock; // @synthesize connectionResetBlock=_connectionResetBlock;
- (void).cxx_destruct;
- (id)serviceAccountTypeIdentifier;
- (void)getPermaLinkFromLastStatusUpdate:(CDUnknownBlockType)arg1;
- (void)showSettingsIfNeeded;
- (void)acceptLocationUpdate:(id)arg1;
- (void)sendDirectMessage:(id)arg1 toUser:(id)arg2 withScreenName:(id)arg3 completion:(CDUnknownBlockType)arg4;
- (void)retweetTweetWithID:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)sendStatus:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)fetchGeotagStatus:(CDUnknownBlockType)arg1;
- (void)setGeotagStatus:(int)arg1;
- (void)fetchCurrentImageLimits:(CDUnknownBlockType)arg1;
- (void)fetchCurrentUrlLimits:(CDUnknownBlockType)arg1;
- (void)recordsMatchingPrefixString:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (id)cachedProfileImageDataForScreenName:(id)arg1;
- (void)fetchProfileImageDataForScreenName:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)ensureUserRecordStore;
- (void)fetchSessionInfo:(CDUnknownBlockType)arg1;
- (void)setActiveAccountIdentifier:(id)arg1;
- (void)tearDownConnectionToRemoteSession;
- (void)stopDeferringExpensiveOperations;
- (void)deferExpensiveOperations;
- (id)_createOrGetRemoteSession;
- (void)endPotentialLocationUse;
- (void)beginPotentialLocationUse;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface SLMicroBlogStatus : NSObject <NSSecureCoding>
{
    NSString *_statusText;
    NSArray *_imageData;
    NSArray *_imageAssetURLs;
    NSString *_maskedApplicationID;
    NSString *_inReplyToStatusID;
}

+ (_Bool)supportsSecureCoding;
@property(retain, nonatomic) NSString *inReplyToStatusID; // @synthesize inReplyToStatusID=_inReplyToStatusID;
@property(retain, nonatomic) NSString *maskedApplicationID; // @synthesize maskedApplicationID=_maskedApplicationID;
@property(retain, nonatomic) NSArray *imageAssetURLs; // @synthesize imageAssetURLs=_imageAssetURLs;
@property(retain, nonatomic) NSArray *imageData; // @synthesize imageData=_imageData;
@property(retain, nonatomic) NSString *statusText; // @synthesize statusText=_statusText;
- (void).cxx_destruct;
- (void)loadAssetDataIfNecessaryWithMaxByteSize:(unsigned long long)arg1 completion:(CDUnknownBlockType)arg2;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;

@end

@interface SLMicroBlogComposeViewController : SLComposeServiceViewController <UITextViewDelegate, SLMicroBlogMentionsDelegate, SLMicroBlogAccountsTableViewControllerDelegate, SLSheetPlaceViewControllerDelegate>
{
    NSObject<SLMicroBlogSheetDelegate> *_microBlogSheetDelegate;
    NSString *_serviceAccountTypeIdentifier;
    SLMicroBlogMentionsViewController *_mentionsViewController;
    unsigned long long _mentionStartLocation;
    _Bool _mentionPendingStart;
    _Bool _rotatedDuringAccountsPopover;
    _Bool _usingLocationOverride;
    NSArray *_accountUserRecords;
    NSArray *_accountIdentifiers;
    SLMicroBlogUserRecord *_selectedAccountUserRecord;
    SLComposeSheetConfigurationItem *_accountConfigurationItem;
    SLComposeSheetConfigurationItem *_locationConfigurationItem;
    SLMicroBlogAccountsTableViewController *_accountViewController;
    SLSheetPlaceViewController *_placeViewController;
    SLPlace *_currentPlace;
    long long _shortenedURLCost;
    long long _maxURLLength;
    _Bool _isPresentingPlaces;
}

+ (id)serviceBundle;
- (void).cxx_destruct;
- (void)textViewDidChangeSelection:(id)arg1;
- (void)textViewDidChange:(id)arg1;
- (_Bool)textView:(id)arg1 shouldChangeTextInRange:(struct _NSRange)arg2 replacementText:(id)arg3;
- (void)didSelectPost;
- (id)_mentionsSearchString;
- (void)applyMention:(id)arg1;
- (void)mentionsViewController:(id)arg1 finishedWithResult:(id)arg2;
- (void)_dismissMentionsViewController;
- (void)_presentMentionsViewControllerIfApplicableForSearchString:(id)arg1;
- (void)_presentMentionsViewControllerWithSearchString:(id)arg1;
- (void)noteLocationInfoChanged:(id)arg1;
- (void)setGeotagStatus:(int)arg1;
- (void)placeViewController:(id)arg1 willDisappear:(_Bool)arg2;
- (void)placeViewController:(id)arg1 didSelectPlace:(id)arg2;
- (id)_placeViewController;
- (void)updateGeotagStatus;
- (void)_presentPlaceViewController;
- (void)updateShortenedURLCost;
- (int)characterCountForEnteredText:(id)arg1 attachments:(id)arg2;
- (_Bool)_countMediaAttachmentsTowardCharacterCount;
- (long long)_characterCountForText:(id)arg1;
- (id)completeText:(id)arg1 withAttachments:(id)arg2;
- (_Bool)isContentValid;
- (int)_charactersRemainingWithText:(id)arg1;
- (void)_hostApplicationDidEnterBackground;
- (void)_hostApplicationWillEnterForeground;
- (id)initWithNibName:(id)arg1 bundle:(id)arg2;
- (void)presentNoAccountsAlert;
- (void)_presentNoAccountsAlertIfNecessaryAndReady;
- (void)presentationAnimationDidFinish;
@property __weak NSObject<SLMicroBlogSheetDelegate> *microBlogSheetDelegate;
- (id)configurationItems;
- (id)_locationConfigurationItem;
- (void)_performLocationAction;
- (id)_accountConfigurationItem;
- (void)accountsViewController:(id)arg1 didSelectAccountUserRecord:(id)arg2;
- (void)_presentAccountPickerController;
- (void)_beginLoadingAccountProfileImages;
- (void)viewWillDisappear:(_Bool)arg1;
- (void)viewDidAppear:(_Bool)arg1;
- (void)loadView;
- (void)appWillEnterForeground:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

__attribute__((visibility("hidden")))
@interface SLSheetRootViewController : UIViewController <UITableViewDataSource, UITableViewDelegate, SLComposeSheetConfigurationItemObserving>
{
    NSArray *_configurationItems;
    UITableViewController *_tableViewController;
    SLSheetTitleView *_titleView;
    UINavigationItem *_navItem;
    UIViewController *_autoCompletionViewController;
    SLComposeServiceViewController *_delegate;
    UIView *_contentView;
    UIImage *_serviceIconImage;
}

@property(retain, nonatomic) UIImage *serviceIconImage; // @synthesize serviceIconImage=_serviceIconImage;
@property(retain, nonatomic) UIView *contentView; // @synthesize contentView=_contentView;
@property(nonatomic) __weak SLComposeServiceViewController *delegate; // @synthesize delegate=_delegate;
- (void).cxx_destruct;
- (void)tableView:(id)arg1 didSelectRowAtIndexPath:(id)arg2;
- (void)tableView:(id)arg1 willDisplayCell:(id)arg2 forRowAtIndexPath:(id)arg3;
- (id)tableView:(id)arg1 cellForRowAtIndexPath:(id)arg2;
- (void)_updateCell:(id)arg1 withConfigurationItem:(id)arg2;
- (long long)tableView:(id)arg1 numberOfRowsInSection:(long long)arg2;
- (long long)numberOfSectionsInTableView:(id)arg1;
- (void)_updateCellForConfigurationItem:(id)arg1;
@property(copy, nonatomic) NSArray *configurationItems;
- (void)configurationItemDidChange:(id)arg1;
- (void)observeConfigurationItems:(id)arg1;
- (void)resetConfigurationItems;
- (void)dismissAutoCompletionViewControllerWithContentViewChangeBlock:(CDUnknownBlockType)arg1;
- (void)presentAutoCompletionViewController:(id)arg1 apparentContentHeight:(double)arg2 contentViewChangeBlock:(CDUnknownBlockType)arg3;
- (void)updateContentViewSize:(struct CGSize)arg1;
- (id)navigationItem;
- (double)_preferredTableViewHeight;
- (void)setPostButtonEnabled:(_Bool)arg1;
- (void)setTitle:(id)arg1;
@property(readonly, nonatomic) UITableView *tableView;
- (void)viewDidLayoutSubviews;
- (void)viewDidLoad;
- (void)loadView;
- (void)dealloc;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

__attribute__((visibility("hidden")))
@interface SLMicroBlogAccountsTableViewController : UITableViewController
{
    NSArray *_accountUserRecords;
    SLMicroBlogUserRecord *_selectedAccountUserRecord;
    id <SLMicroBlogAccountsTableViewControllerDelegate> _selectionDelegate;
    UIImage *_blankImage;
}

- (void).cxx_destruct;
- (void)tableView:(id)arg1 didSelectRowAtIndexPath:(id)arg2;
- (void)tableView:(id)arg1 willDisplayCell:(id)arg2 forRowAtIndexPath:(id)arg3;
- (id)tableView:(id)arg1 cellForRowAtIndexPath:(id)arg2;
- (long long)tableView:(id)arg1 numberOfRowsInSection:(long long)arg2;
- (long long)numberOfSectionsInTableView:(id)arg1;
- (id)_accountUserRecordForIndexPath:(id)arg1;
- (void)didUpdateAccountUserRecord:(id)arg1;
- (void)setCurrentAccountUserRecord:(id)arg1;
- (void)setAccountUserRecords:(id)arg1;
- (void)setSelectionDelegate:(id)arg1;
- (void)cancelButtonTapped:(id)arg1;
- (void)viewDidLoad;
- (id)_blankImage;
- (id)initWithStyle:(long long)arg1;

@end

@interface SLTwitterUserRecord : SLMicroBlogUserRecord <NSSecureCoding>
{
    NSString *_id_str;
    NSURL *_objectID;
}

+ (_Bool)supportsSecureCoding;
+ (id)userRecordWithScreenName:(id)arg1;
+ (id)userRecordWithDictionaryRepresentation:(id)arg1;
@property(retain, nonatomic) NSURL *objectID; // @synthesize objectID=_objectID;
@property(retain, nonatomic) NSString *id_str; // @synthesize id_str=_id_str;
- (void).cxx_destruct;
- (id)description;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (void)setValuesWithUserDictionary:(id)arg1;

@end

__attribute__((visibility("hidden")))
@interface SLAbsintheSigningSession : NSObject
{
    NSString *_certURL;
    NSString *_sessionURL;
}

- (void).cxx_destruct;
- (id)_urlEncodedString:(id)arg1;
- (id)signatureForData:(id)arg1;
- (_Bool)establish;
- (void)dealloc;
- (id)initWithCertURL:(id)arg1 sessionURL:(id)arg2;

@end

@interface SLFacebookLoginInfoViewController : UITableViewController
{
    SLFacebookLoginInfoFooter *_footerView;
    id <SLFacebookLoginInfoViewControllerDelegate> _delegate;
}

@property(nonatomic) __weak id <SLFacebookLoginInfoViewControllerDelegate> delegate; // @synthesize delegate=_delegate;
- (void).cxx_destruct;
- (void)_cancelTapped:(id)arg1;
- (void)_signInTapped:(id)arg1;
- (void)tableView:(id)arg1 didSelectRowAtIndexPath:(id)arg2;
- (double)tableView:(id)arg1 heightForRowAtIndexPath:(id)arg2;
- (void)viewDidLoad;
- (void)loadView;
- (id)tableView:(id)arg1 viewForFooterInSection:(long long)arg2;
- (double)tableView:(id)arg1 heightForFooterInSection:(long long)arg2;
- (id)tableView:(id)arg1 cellForRowAtIndexPath:(id)arg2;
- (long long)tableView:(id)arg1 numberOfRowsInSection:(long long)arg2;
- (id)tableView:(id)arg1 titleForHeaderInSection:(long long)arg2;
- (id)init;

@end

__attribute__((visibility("hidden")))
@interface SLFacebookLoginInfoCell : UITableViewCell
{
    SLFacebookLoginInfoCellContentView *_infoView;
}

+ (double)desiredRowHeightForWidth:(double)arg1;
- (void).cxx_destruct;
- (void)layoutSubviews;

@end

__attribute__((visibility("hidden")))
@interface SLFacebookLoginInfoCellContentView : UIView
{
    UIFont *_font;
    UIImageView *_addressBookIcon;
    UIImageView *_calendarIcon;
    UIImageView *_photosIcon;
    UIImageView *_appStoreIcon;
    UILabel *_addressBookLabel;
    UILabel *_calendarLabel;
    UILabel *_photosLabel;
    UILabel *_appStoreLabel;
    NSString *_addressBookLabelText;
    NSString *_calendarLabelText;
    NSString *_photosLabelText;
    NSString *_appStoreLabelText;
}

- (void).cxx_destruct;
- (void)layoutSubviews;
- (id)initWithFrame:(struct CGRect)arg1;

@end

__attribute__((visibility("hidden")))
@interface SLFacebookLoginInfoFooter : UIView
{
    UIFont *_font;
    NSString *_paragraph1;
    NSString *_paragraph2;
    NSString *_paragraph3;
    NSString *_paragraph4;
    UILabel *_label1;
    UILabel *_label2;
    UILabel *_label3;
    UILabel *_label4;
}

- (void).cxx_destruct;
- (double)preferredHeightForWidth:(double)arg1;
- (void)layoutSubviews;
- (id)initWithFrame:(struct CGRect)arg1;

@end

@interface SLSheetImagePreviewView : UIView
{
    UIImage *_image;
    NSMutableDictionary *_intrinsicSizes;
    long long _verticalSizeClass;
    UIImageView *_imageView;
    NSArray *_principalAttachments;
}

+ (id)fallbackPreviewImage;
@property(retain, nonatomic) NSArray *principalAttachments; // @synthesize principalAttachments=_principalAttachments;
@property(retain, nonatomic) UIImageView *imageView; // @synthesize imageView=_imageView;
- (void).cxx_destruct;
- (struct CGSize)intrinsicContentSize;
- (_Bool)generatePreviewImageFromAttachments;
- (void)ensurePlaceholderPreviewImage;
- (void)setPreviewImage:(id)arg1 forAttachment:(id)arg2;
@property(retain, nonatomic) UIImage *image;
- (void)verticalSizeClassDidChange;
@property(nonatomic) long long verticalSizeClass;
- (struct CGSize)sizeForVerticalSizeClass:(long long)arg1;
- (void)setSize:(struct CGSize)arg1 forVerticalSizeClass:(long long)arg2;
- (id)initWithFrame:(struct CGRect)arg1;

@end

@interface SLSheetPhotoAlbumImageView : SLSheetImagePreviewView
{
    CALayer *_frameLayer;
    CALayer *_glossLayer;
    NSMutableArray *_frameViews;
    long long _frameQuantity;
    long long _imageQuantity;
    long long _numPreviewImagesAdded;
    UILabel *_imageCountLabel;
    _Bool _updateLayout;
    _Bool _allAttachmentsAreImages;
}

+ (unsigned long long)displayedFrameMaximum;
- (void).cxx_destruct;
- (struct UIEdgeInsets)alignmentRectInsets;
- (void)layoutSubviews;
- (void)sizeToFit;
- (struct CGSize)intrinsicContentSize;
- (void)setItemCountString:(id)arg1;
- (id)_itemCountString;
- (_Bool)_shouldDisplayImageCountLabel;
- (void)addPreviewImage:(id)arg1;
- (void)setPreviewImage:(id)arg1 forAttachment:(id)arg2;
- (void)verticalSizeClassDidChange;
- (id)initWithPrincipalAttachments:(id)arg1;

@end

@interface SLOpenGraphNode : NSObject
{
    _Bool _likedByMe;
    unsigned long long _numberOfLikes;
    unsigned long long _numberOfFriendLikes;
    int _fetchState;
    NSURL *_URL;
    NSArray *_likedByFriends;
}

@property(nonatomic) int fetchState; // @synthesize fetchState=_fetchState;
@property(readonly) NSArray *likedByFriends; // @synthesize likedByFriends=_likedByFriends;
@property(readonly) NSURL *URL; // @synthesize URL=_URL;
- (void).cxx_destruct;
- (void)invalidate;
- (void)unlikeWithCompletion:(CDUnknownBlockType)arg1;
- (void)likeWithCompletion:(CDUnknownBlockType)arg1;
@property(readonly) unsigned long long friendLikeCount;
@property(readonly) unsigned long long globalLikeCount;
@property(readonly) _Bool likedByMe;
- (void)_startUpdateIfNeeded;
- (id)initWithURL:(id)arg1;
- (id)cache;

@end

@interface SLFacebookGraphUtils : NSObject
{
}

+ (id)_likeQueryStringForURL:(id)arg1 flags:(unsigned long long)arg2;
+ (id)_parseServerResponse:(id)arg1 error:(id *)arg2;
+ (void)fetchLikeStatusForURL:(id)arg1 flags:(id)arg2 account:(id)arg3 completion:(CDUnknownBlockType)arg4;
+ (void)_likeURL:(id)arg1 requestMethod:(long long)arg2 account:(id)arg3 completion:(CDUnknownBlockType)arg4;
+ (void)unlikeURL:(id)arg1 account:(id)arg2 completion:(CDUnknownBlockType)arg3;
+ (void)likeURL:(id)arg1 account:(id)arg2 completion:(CDUnknownBlockType)arg3;

@end

__attribute__((visibility("hidden")))
@interface SLSheetURLPreviewView : SLSheetImagePreviewView
{
    UIImage *_shadowImage;
    SLURLPreviewGenerator *_webPreviewGenerator;
    UIView *_placeholderPreviewView;
    UIImageView *_placeholderGlyphView;
}

- (void).cxx_destruct;
- (void)_generateAutomaticPreviewForURL:(id)arg1;
- (_Bool)generatePreviewImageFromAttachments;
- (void)setImage:(id)arg1;
- (void)ensurePlaceholderPreviewImage;
- (void)layoutSubviews;
- (id)initWithFrame:(struct CGRect)arg1;
- (id)init;

@end

@interface SLFacebookBatchResponse : SLFacebookResponse
{
}

@property(readonly) NSArray *batchResponseParameters;
- (id)responseAtBatchIndex:(long long)arg1;
- (long long)batchedResponsesCount;

@end

@interface SLRequestMultiPartInputStream : NSInputStream
{
    SLRequestMultiPart *_multiPart;
    unsigned long long _streamStatus;
    unsigned long long _bytesReadInState;
    unsigned long long _totalBytesRead;
    NSData *_srcData;
    int _currentState;
}

- (void).cxx_destruct;
- (_Bool)hasBytesAvailable;
- (_Bool)getBuffer:(char **)arg1 length:(unsigned long long *)arg2;
- (long long)read:(char *)arg1 maxLength:(unsigned long long)arg2;
- (void)close;
- (void)open;
- (unsigned long long)length;
- (long long)currentStateRead:(char *)arg1 maxLength:(unsigned long long)arg2;
- (unsigned long long)readStateSourceData:(id)arg1 toBuffer:(char *)arg2 offset:(unsigned long long)arg3 maxLength:(unsigned long long)arg4;
- (void)transitionState;
- (id)initWithMultiPart:(id)arg1;

@end

@interface SLRequestBodyInputStream : NSInputStream
{
    NSArray *_inputStreams;
    SLRequestMultiPartInputStream *_currentStream;
    unsigned long long _dataLength;
    unsigned long long _dataOffset;
    unsigned long long _currentIndex;
    unsigned long long _currentOffset;
    unsigned long long _currentLength;
    _Bool _openEventSent;
    unsigned long long _streamStatus;
    struct __CFRunLoopSource *_rls;
    CDUnknownFunctionPointerType _clientCallback;
    CDStruct_4210025a _clientContext;
    SLRequestBodyInputStream *_selfReferenceDuringStreamEventTrigger;
    id <NSStreamDelegate> _delegate;
}

@property(nonatomic) __weak id <NSStreamDelegate> delegate; // @synthesize delegate=_delegate;
- (void).cxx_destruct;
- (_Bool)getBuffer:(char **)arg1 length:(unsigned long long *)arg2;
- (_Bool)hasBytesAvailable;
- (unsigned long long)bytesRead;
@property(readonly) unsigned long long totalBytes;
- (long long)read:(char *)arg1 maxLength:(unsigned long long)arg2;
- (unsigned long long)streamStatus;
- (id)streamError;
- (void)close;
- (void)open;
- (void)removeFromRunLoop:(id)arg1 forMode:(id)arg2;
- (void)scheduleInRunLoop:(id)arg1 forMode:(id)arg2;
- (_Bool)_setCFClientFlags:(unsigned long long)arg1 callback:(CDUnknownFunctionPointerType)arg2 context:(CDStruct_4210025a *)arg3;
- (void)_unscheduleFromCFRunLoop:(struct __CFRunLoop *)arg1 forMode:(struct __CFString *)arg2;
- (void)_scheduleInCFRunLoop:(struct __CFRunLoop *)arg1 forMode:(struct __CFString *)arg2;
- (void)_scheduleCallback;
- (void)_streamEventTrigger;
- (id)nextStream;
- (void)dealloc;
- (id)initWithMultiParts:(id)arg1 multiPartBoundary:(id)arg2;

@end

@interface SLAggregateLogger : NSObject
{
}

+ (_Bool)_tencentWeiboAttachmentsContainURL:(id)arg1;
+ (_Bool)_tencentWeiboAttachmentsContainImage:(id)arg1;
+ (_Bool)_weiboAttachmentsContainURL:(id)arg1;
+ (_Bool)_weiboAttachmentsContainImage:(id)arg1;
+ (_Bool)_twitterAttachmentsContainURL:(id)arg1;
+ (_Bool)_twitterAttachmentsContainImage:(id)arg1;
+ (id)_logIdentifierForPID:(int)arg1;
+ (void)logVimeoAppInstallChoice:(_Bool)arg1;
+ (void)logFlickrAppInstallChoice:(_Bool)arg1;
+ (void)logTencentWeiboAppInstallChoice:(_Bool)arg1;
+ (void)logWeiboAppInstallChoice:(_Bool)arg1;
+ (void)logTencentWeiboWithText:(id)arg1 attachments:(id)arg2 locationAttached:(_Bool)arg3 fromProcessWithPID:(int)arg4;
+ (void)logWeiboWithText:(id)arg1 attachments:(id)arg2 locationAttached:(_Bool)arg3 fromProcessWithPID:(int)arg4;
+ (void)logTwitterAppInstallChoice:(_Bool)arg1;
+ (void)logTweetWithText:(id)arg1 attachments:(id)arg2 locationAttached:(_Bool)arg3 fromProcessWithPID:(int)arg4;
+ (void)logFacebookAppInstallChoice:(_Bool)arg1;
+ (void)logFacebookPost:(id)arg1 fromProcessWithPID:(int)arg2;

@end

@interface SLAttachment : NSObject <NSSecureCoding>
{
    CDUnknownBlockType _previewUpdateObserver;
    CDUnknownBlockType _payloadUpdateObserver;
    NSString *_identifier;
    _Bool _startedPayloadLoad;
    _Bool _needsAnotherPreviewGeneration;
    long long _previewType;
    UIImage *_previewImage;
    long long _type;
    id _payload;
    NSURL *_payloadSourceFileURL;
    NSItemProvider *_itemProvider;
    NSString *_typeIdentifier;
    long long _itemProviderPreviewType;
    long long _downsampleStatus;
}

+ (_Bool)attachmentTypeRepresentsAnImage:(long long)arg1;
+ (_Bool)supportsSecureCoding;
@property(nonatomic) _Bool needsAnotherPreviewGeneration; // @synthesize needsAnotherPreviewGeneration=_needsAnotherPreviewGeneration;
@property(nonatomic) _Bool startedPayloadLoad; // @synthesize startedPayloadLoad=_startedPayloadLoad;
@property(nonatomic) long long downsampleStatus; // @synthesize downsampleStatus=_downsampleStatus;
@property(readonly, nonatomic) long long itemProviderPreviewType; // @synthesize itemProviderPreviewType=_itemProviderPreviewType;
@property(copy, nonatomic) NSString *typeIdentifier; // @synthesize typeIdentifier=_typeIdentifier;
@property(retain, nonatomic) NSItemProvider *itemProvider; // @synthesize itemProvider=_itemProvider;
@property(copy, nonatomic) NSURL *payloadSourceFileURL; // @synthesize payloadSourceFileURL=_payloadSourceFileURL;
@property(copy, nonatomic) id payload; // @synthesize payload=_payload;
@property(nonatomic) long long type; // @synthesize type=_type;
@property(readonly, nonatomic) NSString *identifier; // @synthesize identifier=_identifier;
@property(retain, nonatomic) UIImage *previewImage; // @synthesize previewImage=_previewImage;
@property long long previewType; // @synthesize previewType=_previewType;
- (void).cxx_destruct;
- (id)description;
- (void)setPayloadUpdateObserverWithBlock:(CDUnknownBlockType)arg1;
- (void)setPreviewUpdateObserverWithBlock:(CDUnknownBlockType)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)_uniqueIdentifier;
- (id)initWithPayload:(id)arg1 type:(long long)arg2 previewImage:(id)arg3;
- (id)init;

@end

@interface SLURLAttachment : SLAttachment
{
    long long _urlType;
}

- (long long)urlType;
- (id)initWithURL:(id)arg1 ofType:(long long)arg2 preview:(id)arg3;
- (id)initWithURL:(id)arg1 previewImage:(id)arg2;

@end

@interface SLImageAttachment : SLAttachment
{
}

- (id)initWithAsset:(id)arg1 preview:(id)arg2;
- (id)initWithImage:(id)arg1 preview:(id)arg2;
- (id)initWithJPEGData:(id)arg1 preview:(id)arg2;

@end

@interface SLVideoAttachment : SLAttachment
{
}

- (id)initWithVideoData:(id)arg1 preview:(id)arg2;
- (id)initWithAsset:(id)arg1 preview:(id)arg2;

@end

@interface SLComposeSheetConfigurationItem : NSObject
{
    id <SLComposeSheetConfigurationItemObserving> _changeObserver;
    _Bool _valuePending;
    NSString *_title;
    NSString *_value;
    CDUnknownBlockType _tapHandler;
}

@property(copy, nonatomic) CDUnknownBlockType tapHandler; // @synthesize tapHandler=_tapHandler;
@property(nonatomic) _Bool valuePending; // @synthesize valuePending=_valuePending;
@property(copy, nonatomic) NSString *value; // @synthesize value=_value;
@property(copy, nonatomic) NSString *title; // @synthesize title=_title;
- (void).cxx_destruct;
- (void)setChangeObserver:(id)arg1;
- (id)changeObserver;
- (id)init;

@end

__attribute__((visibility("hidden")))
@interface SLSheetPreComposedAppIconImageView : SLSheetImagePreviewView
{
    UIImage *_shadowImage;
}

- (void).cxx_destruct;
- (struct CGSize)intrinsicContentSize;
- (struct UIEdgeInsets)alignmentRectInsets;
- (void)setImage:(id)arg1;
- (id)init;

@end

@interface SLAssetDataProvider : NSObject
{
    ALAssetsLibrary *_assetsLibrary;
    int _numRequestedImages;
    unsigned long long _maxByteSize;
    NSMutableArray *_deliveryQueue;
    NSError *_lastError;
    AVAssetExportSession *_assetExportSession;
    NSObject<OS_dispatch_queue> *_downsamplingQueue;
    CDUnknownBlockType _fetchCompletion;
}

@property(copy) CDUnknownBlockType fetchCompletion; // @synthesize fetchCompletion=_fetchCompletion;
- (void).cxx_destruct;
- (void)mappedDataFromVideoAtFileURL:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)exportDataFromVideoAssetURL:(id)arg1 toFileURL:(id)arg2 exportPreset:(id)arg3 completion:(CDUnknownBlockType)arg4;
- (id)_generateTemporaryFilename;
- (void)fetchImageDataForAssetsURLs:(id)arg1 maxByteSize:(unsigned long long)arg2 completion:(CDUnknownBlockType)arg3;
- (void)fetchedAsset:(id)arg1;
- (void)_downsamplingCompletedForAsset:(id)arg1 withDownsampledData:(id)arg2;
- (void)_downsamplingFailedForAsset:(id)arg1 withError:(id)arg2;
- (void)_assetFetchFailedWithError:(id)arg1;
- (void)_checkDeliveryComplete;
- (id)init;

@end

@interface SLSafeLocationManagerDelegate : NSObject <CLLocationManagerDelegate>
{
    id <CLLocationManagerDelegate> _delegate;
}

@property __weak id <CLLocationManagerDelegate> delegate; // @synthesize delegate=_delegate;
- (void).cxx_destruct;
- (void)locationManager:(id)arg1 didFailWithError:(id)arg2;
- (void)locationManager:(id)arg1 didUpdateLocations:(id)arg2;
- (void)locationManager:(id)arg1 didChangeAuthorizationStatus:(int)arg2;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface SLImageDownsampling : NSObject
{
}

+ (void)generateThumbnailFromImageData:(id)arg1 adjustSmallestSideToSize:(unsigned long long)arg2 resultsHandler:(CDUnknownBlockType)arg3;
+ (void)downsampleImageData:(id)arg1 toMaxByteSize:(unsigned long long)arg2 resultsHandler:(CDUnknownBlockType)arg3;
+ (id)createThumbnailWithData:(id)arg1 adjustSmallestSideToSize:(unsigned long long)arg2;
+ (CDStruct_912cb5d2)imageSizeWithData:(id)arg1;
+ (id)downsampleImageData:(id)arg1 toMaxByteSize:(unsigned long long)arg2;

@end

@interface SLFacebookPermissionDescriptionRequest : SLFacebookRequest
{
}

- (id)_csvStringFromSet:(id)arg1;
- (id)initWithPermissions:(id)arg1 audience:(id)arg2;

@end

@interface SLFacebookUpload : NSObject <NSSecureCoding>
{
    NSString *_uploadID;
    long long _uploadType;
    unsigned long long _totalBytes;
    unsigned long long _transferredBytes;
}

+ (_Bool)supportsSecureCoding;
@property(nonatomic) unsigned long long transferredBytes; // @synthesize transferredBytes=_transferredBytes;
@property(nonatomic) unsigned long long totalBytes; // @synthesize totalBytes=_totalBytes;
@property(nonatomic) long long uploadType; // @synthesize uploadType=_uploadType;
@property(retain, nonatomic) NSString *uploadID; // @synthesize uploadID=_uploadID;
- (void).cxx_destruct;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;

@end

@interface SLServiceListener : NSObject <NSXPCListenerDelegate>
{
    Class _sessionClass;
    Protocol *_serviceProtocol;
    NSXPCInterface *_clientInterface;
    NSXPCListener *_listener;
    NSString *_persistentStoreName;
    NSString *_managedObjectModelPath;
    NSArray *_allowedEntitlements;
    NSString *_serviceName;
}

@property(retain) NSString *managedObjectModelPath; // @synthesize managedObjectModelPath=_managedObjectModelPath;
@property(retain) NSString *persistentStoreName; // @synthesize persistentStoreName=_persistentStoreName;
@property(retain) NSXPCInterface *clientInterface; // @synthesize clientInterface=_clientInterface;
@property(retain) NSString *serviceName; // @synthesize serviceName=_serviceName;
- (void).cxx_destruct;
- (_Bool)listener:(id)arg1 shouldAcceptNewConnection:(id)arg2;
- (_Bool)_verifyAuthorizationForConnection:(id)arg1;
- (void)beginAcceptingConnections;
- (void)restrictToClientsWithEntitlements:(id)arg1;
- (id)initWithExportedSessionClass:(Class)arg1 serviceProtocol:(id)arg2;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface SLRemoteSession : NSObject
{
    NSXPCConnection *_connection;
    SLDatabase *_database;
}

@property(retain, nonatomic) SLDatabase *database; // @synthesize database=_database;
@property(retain, nonatomic) NSXPCConnection *connection; // @synthesize connection=_connection;
- (void).cxx_destruct;
- (_Bool)clientHasEntitlement:(id)arg1;
- (id)initWithConnection:(id)arg1 database:(id)arg2;

@end

@interface SLDatabase : NSObject
{
    NSString *_modelPath;
    NSString *_storePath;
    NSPersistentStoreCoordinator *_persistentStoreCoordinator;
    NSManagedObjectContext *_managedObjectContext;
    NSManagedObjectModel *_managedObjectModel;
}

- (void).cxx_destruct;
- (void)_removeFilesAtURL:(id)arg1 forStoreCoordinator:(id)arg2;
- (id)_managedObjectModel;
- (id)_persistentStoreCoordinator;
- (void)_setUpManagedObjectContext;
- (_Bool)save:(id *)arg1;
- (id)newObjectForEntityNamed:(id)arg1;
- (id)fetchObjectsForEntityNamed:(id)arg1 withPredicate:(id)arg2;
- (id)initWithStoreName:(id)arg1 modelPath:(id)arg2;

@end

@interface SLManagedObject : NSManagedObject
{
}

- (void)setValuesWithObject:(id)arg1;
- (id)objectOfClass:(Class)arg1;
- (void)encodeWithCoder:(id)arg1;

@end

__attribute__((visibility("hidden")))
@interface SLVideoQualityOption : NSObject
{
    NSString *_identifier;
    NSString *_name;
    long long _size;
    NSString *_exportPreset;
}

+ (id)videoQualityOptionForIdentifier:(id)arg1;
@property(retain, nonatomic) NSString *exportPreset; // @synthesize exportPreset=_exportPreset;
@property(nonatomic) long long size; // @synthesize size=_size;
@property(retain, nonatomic) NSString *name; // @synthesize name=_name;
@property(retain, nonatomic) NSString *identifier; // @synthesize identifier=_identifier;
- (void).cxx_destruct;
- (id)sizeDescription;
- (id)initWithIdentifier:(id)arg1 name:(id)arg2 exportPreset:(id)arg3 size:(long long)arg4;

@end

__attribute__((visibility("hidden")))
@interface SLURLPreviewGenerator : NSObject <UIWebViewDelegate>
{
    UIWebView *_webView;
    CDUnknownBlockType _completion;
}

@property(readonly) UIWebView *webView; // @synthesize webView=_webView;
- (void).cxx_destruct;
- (void)uiWebView:(id)arg1 decidePolicyForGeolocationRequestFromOrigin:(id)arg2 frame:(id)arg3 listener:(id)arg4;
- (void)webView:(id)arg1 didFailLoadWithError:(id)arg2;
- (void)webViewDidFinishLoad:(id)arg1;
- (_Bool)webView:(id)arg1 shouldStartLoadWithRequest:(id)arg2 navigationType:(long long)arg3;
- (void)loadURL:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)_callCompletionWithPreview:(id)arg1;
- (void)dealloc;
- (id)initWithFrame:(struct CGRect)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface SLComposeServiceViewController : UIViewController <UINavigationControllerDelegate, UITextViewDelegate>
{
    NSObject<SLSheetViewHostProtocol> *_hostProxy;
    unsigned long long _unfulfilledItemProviderRepresentations;
    NSMutableArray *_attachments;
    UIImage *_serviceIconImage;
    NSNumber *_charactersRemaining;
    SLSheetContentView *_contentView;
    SLSheetMasklayer *_vignetteLayer;
    UIAlertController *_alertController;
    _Bool _isShowingLocationDeniedAlert;
    _Bool _isPresentingActionViewController;
    _Bool _autoCompletionViewControllerAffectsSheetSize;
    SLSheetPreviewImageSource *_previewImageSource;
    UIView *_maskView;
    _Bool _didFirstSheetActionLoad;
    _Bool _didCallPresentSheet;
    _Bool _triggerPresentationAnimationOnKeyboard;
    _Bool _hasPresentedSheet;
    _Bool _isPerformationRotation;
    _Bool _inPostButtonTapped;
    struct CGRect _sheetFrameStartingRotation;
    UIViewController *_viewControllerForTrackingSheetSize;
    _Bool _preventSheetPositionChanges;
    _Bool _wasPresented;
    _Bool _suppressKeyboard;
    NSString *_placeholder;
    UIViewController *_autoCompletionViewController;
    SLSheetRootViewController *_sheetRootViewController;
    SLSheetNavigationController *_navigationController;
    unsigned long long _maxImageAttachmentSize;
    NSMutableArray *_constraints;
}

+ (id)_imageAttachmentLoadDownsamplePreviewQueue;
+ (_Bool)_preventsAppearanceProxyCustomization;
@property(retain) NSMutableArray *constraints; // @synthesize constraints=_constraints;
@property(retain, nonatomic) SLSheetContentView *contentView; // @synthesize contentView=_contentView;
@property(nonatomic) unsigned long long maxImageAttachmentSize; // @synthesize maxImageAttachmentSize=_maxImageAttachmentSize;
@property(nonatomic) _Bool suppressKeyboard; // @synthesize suppressKeyboard=_suppressKeyboard;
@property(readonly) _Bool wasPresented; // @synthesize wasPresented=_wasPresented;
@property(nonatomic) _Bool preventSheetPositionChanges; // @synthesize preventSheetPositionChanges=_preventSheetPositionChanges;
@property(retain, nonatomic) SLSheetNavigationController *navigationController; // @synthesize navigationController=_navigationController;
@property(retain, nonatomic) SLSheetRootViewController *sheetRootViewController; // @synthesize sheetRootViewController=_sheetRootViewController;
@property(retain, nonatomic) UIViewController *autoCompletionViewController; // @synthesize autoCompletionViewController=_autoCompletionViewController;
@property(copy, nonatomic) NSString *placeholder; // @synthesize placeholder=_placeholder;
- (void).cxx_destruct;
- (void)networkActivityIndicatorNotification:(id)arg1;
- (void)shouldShowNetworkActivityIndicator:(_Bool)arg1;
- (void)didReceiveMemoryWarning;
- (void)viewDidDisappear:(_Bool)arg1;
- (void)viewWillDisappear:(_Bool)arg1;
- (void)viewDidAppear:(_Bool)arg1;
- (void)viewWillAppear:(_Bool)arg1;
- (void)viewDidLoad;
- (_Bool)shouldAutorotateToInterfaceOrientation:(long long)arg1;
- (_Bool)shouldAutorotate;
- (void)_convertExtensionItemProvidersToAttachments:(id)arg1;
- (void)loadView;
- (void)didRotateFromInterfaceOrientation:(long long)arg1;
- (void)willRotateToInterfaceOrientation:(long long)arg1 duration:(double)arg2;
- (void)willAnimateRotationToInterfaceOrientation:(long long)arg1 duration:(double)arg2;
- (void)setHostProxy:(id)arg1;
- (void)_willAppearInRemoteViewController;
- (double)_sheetMinBottomMarginForVerticalSizeClass:(long long)arg1;
- (struct CGRect)sheetFrameForViewController:(id)arg1 verticalSizeClass:(long long)arg2 orientation:(long long)arg3 topSpaceProportion:(double)arg4 topSpaceOffset:(double)arg5;
- (struct CGRect)sheetFrameForViewController:(id)arg1 verticalSizeClass:(long long)arg2 orientation:(long long)arg3;
- (struct CGSize)_intrinsicSheetSizeForVerticalSizeClass:(long long)arg1;
@property(readonly) UIView *sheetView;
- (void)_positionVignetteForSheetFrame:(struct CGRect)arg1;
- (void)setSheetFrame:(struct CGRect)arg1;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (void)updateKeyboardSize;
- (void)keyboardDidChange:(id)arg1;
- (void)_animateSheetCancelFinished;
- (void)animateSheetCancelWithDuration:(double)arg1;
- (void)presentationAnimationDidFinish;
- (void)_animateSheetPresentationFinished;
- (void)animateSheetPresentationWithDuration:(double)arg1;
- (void)_presentSheet;
- (void)_animateCardSendFinished;
- (void)animateCardSendOrientation:(long long)arg1;
- (void)presentSettingsAlertWithTitle:(id)arg1 message:(id)arg2 targetURL:(id)arg3;
- (void)showLocationDeniedAlertWithTitle:(id)arg1 settingsURL:(id)arg2;
- (void)postButtonTapped:(id)arg1;
- (void)cancelButtonTapped:(id)arg1;
- (void)setServiceIconImage:(id)arg1;
- (void)setTitle:(id)arg1;
- (void)reloadSheetActions;
- (void)pushActionViewController:(id)arg1;
- (void)popConfigurationViewController;
- (void)_animateVignetteMaskFromSheetFrame:(struct CGRect)arg1 toSheetFrame:(struct CGRect)arg2 duration:(double)arg3;
- (void)_positionSheetViewAnimatedForViewController:(id)arg1;
- (void)_presentedViewControllerContentSizeDidChange;
- (void)navigationController:(id)arg1 didShowViewController:(id)arg2 animated:(_Bool)arg3;
- (void)navigationController:(id)arg1 willShowViewController:(id)arg2 animated:(_Bool)arg3;
- (void)_setViewControllerForTrackingSheetSize:(id)arg1;
- (void)pushConfigurationViewController:(id)arg1;
- (void)reloadConfigurationItems;
- (id)sheetActions;
- (id)configurationItems;
- (void)didSendWithSuccess:(_Bool)arg1 error:(id)arg2;
- (void)cancel;
- (void)send;
- (void)didSelectCancel;
- (void)didSelectPost;
- (void)createPreviewIfNeeded;
- (id)loadPreviewView;
- (long long)_previewDisplayFormat;
- (void)_adjustContentViewIntrinsicHeightForPreviewView;
- (void)_loadPreviewView;
- (void)_downsampleImageAttachment:(id)arg1;
- (void)_imageAttachmentDataDidLoad:(id)arg1;
- (void)_loadImageAttachmentData:(id)arg1;
- (id)URLAttachments;
- (void)validateContent;
- (_Bool)_areAttachmentsReady;
- (void)_addAttachment:(id)arg1;
- (void)addAttachment:(id)arg1;
- (_Bool)isContentValid;
- (id)attachments;
- (void)textViewDidChange:(id)arg1;
- (void)setPlaceholderText:(id)arg1;
- (id)text;
@property(readonly, nonatomic) NSString *contentText;
@property(readonly, nonatomic) UITextView *textView;
- (void)_updateContentViewWithCharactersRemaining;
@property(retain, nonatomic) NSNumber *charactersRemaining;
- (void)hideKeyboardWithAnimationTime:(double)arg1;
- (void)showKeyboardWithAnimationTime:(double)arg1;
- (void)hideKeyboardAnimated:(_Bool)arg1;
- (void)showKeyboardAnimated:(_Bool)arg1;
- (void)keyboardWillShow:(id)arg1;
- (void)keyboardWillHide:(id)arg1;
- (void)updateSheetForVerticalSizeClass;
- (void)positionSheetView;
- (void)_positionSheetViewForViewController:(id)arg1;
- (id)previewImageSource;
- (void)dealloc;
- (id)initWithCoder:(id)arg1;
- (id)initWithNibName:(id)arg1 bundle:(id)arg2;
- (id)initWithServiceIconImage:(id)arg1;
- (void)_performCommonInitialization:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

__attribute__((visibility("hidden")))
@interface SLSheetContentView : UIView
{
    SLSheetTextComposeView *_textComposeView;
    NSMutableArray *_constraints;
    NSMutableDictionary *_intrinsicSizes;
    double _previewTopMargin;
    double _textViewTopMargin;
    UIView *_bottomSeparator;
    UIView *_autoCompletionModeSeparator;
    long long _currentVerticalSizeClass;
    _Bool _autoCompletionMode;
    double _autoCompletionTextViewHeight;
    UIView *_previewView;
    UIView *_accessoryView;
}

@property(retain, nonatomic) UIView *accessoryView; // @synthesize accessoryView=_accessoryView;
@property(retain, nonatomic) UIView *previewView; // @synthesize previewView=_previewView;
- (void).cxx_destruct;
- (void)endAutoCompletionMode;
- (void)beginAutoCompletionMode;
- (void)preflightAutoCompletionModeWithApparentHeight:(double)arg1;
- (void)adjustComposeViewForPreview;
- (void)layoutSubviews;
- (void)updateTextViewMargin;
- (void)updatePreviewMargin;
- (double)_textTopMarginForContentSize:(struct CGSize)arg1;
- (double)_previewMarginForContentSize:(struct CGSize)arg1;
- (void)resetPreview;
- (void)_resetAccessoryView;
@property(readonly, nonatomic) UILabel *placeholderLabel;
@property(readonly, nonatomic) UITextView *textView;
- (void)setCurrentVerticalSizeClass:(long long)arg1;
- (void)setIntrinsicSize:(struct CGSize)arg1 forVerticalSizeClass:(long long)arg2;
- (void)_setConstraints;
- (void)updateConstraints;
- (struct CGSize)intrinsicContentSize;
- (void)_setupConstraints;
- (void)_setupView;
- (id)initWithFrame:(struct CGRect)arg1;

@end

@interface SLLastAccountManager : NSObject
{
}

+ (void)setLastTwitterAccount:(id)arg1;
+ (id)lastTwitterAccountInAccountStore:(id)arg1 updatePrefs:(_Bool)arg2;
+ (id)_lastAccountOfTypeIdentifier:(id)arg1 inStore:(id)arg2 updatePrefs:(_Bool)arg3 prefKey:(id)arg4 prefAppID:(id)arg5;
+ (void)_setLastAccount:(id)arg1 prefKey:(id)arg2 prefAppID:(id)arg3;

@end

__attribute__((visibility("hidden")))
@interface SLSheetTextComposeView : UIView
{
    UITextView *_textView;
    UILabel *_placeholderLabel;
    double _textRightInset;
}

@property(nonatomic) double textRightInset; // @synthesize textRightInset=_textRightInset;
@property(retain, nonatomic) UILabel *placeholderLabel; // @synthesize placeholderLabel=_placeholderLabel;
@property(retain, nonatomic) UITextView *textView; // @synthesize textView=_textView;
- (void).cxx_destruct;
- (void)restoreKeyboard;
- (void)layoutSubviews;
- (_Bool)resignFirstResponder;
- (_Bool)becomeFirstResponder;
- (void)_assembleView;
- (id)initWithFrame:(struct CGRect)arg1;

@end

__attribute__((visibility("hidden")))
@interface SLSheetTitleView : UIView
{
    UIImageView *_serviceIconView;
    NSMutableArray *_constraints;
    UILabel *_titleLabel;
    NSString *_title;
}

@property(copy, nonatomic) NSString *title; // @synthesize title=_title;
- (void).cxx_destruct;
- (struct CGSize)intrinsicContentSize;
- (void)sizeToFit;
- (void)setServiceIconImage:(id)arg1;
- (void)_setupTitleLabel;
- (void)layoutSubviews;
- (void)updateConstraints;
- (id)initWithFrame:(struct CGRect)arg1;

@end

__attribute__((visibility("hidden")))
@interface SLFacebookAudienceButton : UIButton
{
    _Bool _hasEnteredLayout;
}

- (struct CGSize)intrinsicContentSize;
- (void)layoutSubviews;
- (id)initWithFrame:(struct CGRect)arg1;

@end

__attribute__((visibility("hidden")))
@interface SLMicroBlogMentionsViewController : UIViewController <UITableViewDataSource, UITableViewDelegate>
{
    NSObject<SLMicroBlogSheetDelegate> *_sheetDelegate;
    NSArray *_mentions;
    NSString *_searchString;
    UITableView *_tableView;
    NSObject<SLMicroBlogMentionsDelegate> *_delegate;
}

+ (id)_blankSurrogateProfileImage;
@property(nonatomic) __weak NSObject<SLMicroBlogMentionsDelegate> *delegate; // @synthesize delegate=_delegate;
- (void).cxx_destruct;
- (void)tableView:(id)arg1 didSelectRowAtIndexPath:(id)arg2;
- (void)chooseRow:(long long)arg1;
- (void)tableView:(id)arg1 willDisplayCell:(id)arg2 forRowAtIndexPath:(id)arg3;
- (id)tableView:(id)arg1 cellForRowAtIndexPath:(id)arg2;
- (long long)tableView:(id)arg1 numberOfRowsInSection:(long long)arg2;
- (long long)numberOfSectionsInTableView:(id)arg1;
- (void)loadView;
- (void)setSearchString:(id)arg1;
- (void)updateMentions;
- (void)setMentions:(id)arg1;
- (id)mentions;
- (void)completeWithSelectedMention:(id)arg1;
- (id)initWithSheetDelegate:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface SLRemoteSessionProxy : NSObject
{
    NSString *_serviceName;
    NSXPCInterface *_remoteInterface;
    id _remoteProxy;
    NSXPCConnection *_connection;
    NSMutableArray *_guaranteedRemoteCalls;
    NSLock *_guaranteedRemoteCallsLock;
    NSObject *_exportedObject;
    NSXPCInterface *_exportedInterface;
    CDUnknownBlockType _connectionResetBlock;
}

@property(copy) CDUnknownBlockType connectionResetBlock; // @synthesize connectionResetBlock=_connectionResetBlock;
@property(retain) NSXPCInterface *exportedInterface; // @synthesize exportedInterface=_exportedInterface;
@property __weak NSObject *exportedObject; // @synthesize exportedObject=_exportedObject;
- (void).cxx_destruct;
- (void)dropGuaraneteedRemoteCall:(id)arg1;
- (void)registerGuaranteedRemoteCall:(id)arg1;
- (void)forwardInvocation:(id)arg1;
- (id)methodSignatureForSelector:(SEL)arg1;
- (void)_remoteSessionConnectionWasInterrupted;
- (void)disconnect;
- (void)_setupConnection;
- (void)dealloc;
- (id)initForRemoteServiceName:(id)arg1 remoteInterface:(id)arg2;

@end

__attribute__((visibility("hidden")))
@interface SLGuaranteedRemoteCall : NSObject
{
    CDUnknownBlockType _block;
    id _proxy;
}

@property(retain) id proxy; // @synthesize proxy=_proxy;
@property(copy) CDUnknownBlockType block; // @synthesize block=_block;
- (void).cxx_destruct;

@end

@interface SLRemoteService : SLService <NSSecureCoding>
{
    long long _maximumVideoCount;
    UIImage *_activityImage;
    NSBundle *_serviceBundle;
    _Bool _serviceRegionTargetIsChina;
    _Bool _addDeviceClassToRequest;
    NSString *_serviceTypeIdentifier;
    NSString *_accountTypeIdentifier;
    NSString *_localizedServiceName;
    NSString *_activityViewIconResourceName;
    long long _authenticationStyle;
    long long _maximumURLCount;
    long long _maximumImageCount;
    long long _maximumImageDataSize;
    long long _maximumVideoDataSize;
    long long _maximumVideoTimeLimit;
    NSSet *_supportedImageAssetURLSchemes;
    NSSet *_supportedVideoAssetURLSchemes;
    NSString *_activityImageName;
    NSURL *_serviceBundleURL;
}

+ (id)remoteServiceForTypeIdentifier:(id)arg1;
+ (id)remoteServices;
+ (id)_cachedServiceWithType:(id)arg1;
+ (id)_cachedServices;
+ (_Bool)supportsSecureCoding;
@property(retain) NSURL *serviceBundleURL; // @synthesize serviceBundleURL=_serviceBundleURL;
@property(retain) NSString *activityImageName; // @synthesize activityImageName=_activityImageName;
@property _Bool addDeviceClassToRequest; // @synthesize addDeviceClassToRequest=_addDeviceClassToRequest;
@property(retain) NSSet *supportedVideoAssetURLSchemes; // @synthesize supportedVideoAssetURLSchemes=_supportedVideoAssetURLSchemes;
@property(retain) NSSet *supportedImageAssetURLSchemes; // @synthesize supportedImageAssetURLSchemes=_supportedImageAssetURLSchemes;
@property long long maximumVideoTimeLimit; // @synthesize maximumVideoTimeLimit=_maximumVideoTimeLimit;
@property long long maximumVideoDataSize; // @synthesize maximumVideoDataSize=_maximumVideoDataSize;
@property long long maximumImageDataSize; // @synthesize maximumImageDataSize=_maximumImageDataSize;
@property long long maximumImageCount; // @synthesize maximumImageCount=_maximumImageCount;
@property long long maximumURLCount; // @synthesize maximumURLCount=_maximumURLCount;
@property long long authenticationStyle; // @synthesize authenticationStyle=_authenticationStyle;
@property _Bool serviceRegionTargetIsChina; // @synthesize serviceRegionTargetIsChina=_serviceRegionTargetIsChina;
@property(retain) NSString *activityViewIconResourceName; // @synthesize activityViewIconResourceName=_activityViewIconResourceName;
@property(retain) NSString *localizedServiceName; // @synthesize localizedServiceName=_localizedServiceName;
@property(retain) NSString *accountTypeIdentifier; // @synthesize accountTypeIdentifier=_accountTypeIdentifier;
@property(retain) NSString *serviceTypeIdentifier; // @synthesize serviceTypeIdentifier=_serviceTypeIdentifier;
- (void).cxx_destruct;
@property(nonatomic) long long maximumVideoCount; // @dynamic maximumVideoCount;
- (id)description;
- (id)composeViewController;
- (id)activityTitle;
- (id)activityImage;
@property(readonly) NSBundle *serviceBundle;
- (_Bool)_isSupportedURL:(id)arg1 withSupportedSchemes:(id)arg2;
- (_Bool)supportsVideoURL:(id)arg1;
- (_Bool)supportsImageURL:(id)arg1;
- (_Bool)isFirstClassService;
- (void)addExtraParameters:(id)arg1 forRequest:(id)arg2;
- (id)serviceType;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)_activityImageForImageResourceName:(id)arg1 inBundle:(id)arg2;
- (id)_setFromArrayWithKey:(id)arg1 inDictionary:(id)arg2;
- (long long)_authenticationStyleFromAuthenticationStyleIdentifier:(id)arg1;
- (_Bool)_isValidAuthenicationStyleIdentifier:(id)arg1;
- (id)_encodableStringProperties;
- (id)_authenticationStyleIdentifierMappings;
- (id)integerPropertyKeyMappings;
- (id)_requiredInfoDictKeys;
- (_Bool)infoDictHasRequiredKeys:(id)arg1;
- (id)initWithServiceBundle:(id)arg1 socialInfoDictionary:(id)arg2;

@end

@interface SLNetworkReachabilityWarning : NSObject
{
    CDUnknownBlockType _completionHandler;
    NSString *_serviceType;
}

- (void).cxx_destruct;
- (void)alertView:(id)arg1 didDismissWithButtonIndex:(long long)arg2;
- (void)showIfNecessaryWithCompletion:(CDUnknownBlockType)arg1;
- (void)showIfNecessary;
- (id)initWithServiceType:(id)arg1;

@end

__attribute__((visibility("hidden")))
@interface SLSheetVideoPreviewView : SLSheetImagePreviewView
{
    UIView *_infoBar;
    UIImageView *_videoGlyphView;
    UILabel *_durationLabel;
}

- (void).cxx_destruct;
- (void)_applyConstraints;
- (void)setVideoDuration:(double)arg1;
- (id)initWithFrame:(struct CGRect)arg1;

@end

@interface SLRemoteServicePlistLoader : NSObject
{
}

+ (id)loadRemoteServicesFromPlistResourceName:(id)arg1 inBundle:(id)arg2;
+ (id)allServices;

@end

@interface SLTencentWeiboServerInterface : NSObject
{
}

+ (id)urlForResource:(int)arg1;
+ (id)consumerKey;
+ (id)consumerSecret;

@end

@interface SLTencentWeiboSession : NSObject <SLTencentWeiboClientSessionProtocol, SLMicroBlogSheetDelegate>
{
    SLRemoteSessionProxy<SLTencentWeiboRemoteSessionProtocol> *_remoteSession;
    NSCache *_profileImageCache;
    NSObject<OS_dispatch_queue> *_remoteSessionQueue;
    NSObject<OS_dispatch_semaphore> *_remoteSessionQueueSemaphore;
    NSBundle *_serviceBundle;
    CLInUseAssertion *_locationInUseAssertion;
    CDUnknownBlockType _connectionResetBlock;
    CDUnknownBlockType _locationInformationChangedBlock;
}

+ (id)_remoteInterface;
@property(copy, nonatomic) CDUnknownBlockType locationInformationChangedBlock; // @synthesize locationInformationChangedBlock=_locationInformationChangedBlock;
@property(copy, nonatomic) CDUnknownBlockType connectionResetBlock; // @synthesize connectionResetBlock=_connectionResetBlock;
- (void).cxx_destruct;
- (id)serviceAccountTypeIdentifier;
- (void)acceptLocationUpdate:(id)arg1;
- (void)getPermaLinkFromLastStatusUpdate:(CDUnknownBlockType)arg1;
- (void)showSettingsIfNeeded;
- (void)sendStatus:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (long long)characterCountForText:(id)arg1 shortenedURLCost:(long long)arg2;
- (void)setGeotagAccountSetting:(_Bool)arg1;
- (void)fetchGeotagStatus:(CDUnknownBlockType)arg1;
- (void)setGeotagStatus:(int)arg1;
- (void)fetchCurrentImageLimits:(CDUnknownBlockType)arg1;
- (void)fetchCurrentUrlLimits:(CDUnknownBlockType)arg1;
- (void)recordsMatchingPrefixString:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)fetchProfileImageDataForScreenName:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)ensureUserRecordStore;
- (void)fetchSessionInfo:(CDUnknownBlockType)arg1;
- (void)setActiveAccountIdentifier:(id)arg1;
- (void)revokeAllAccessTokensForDevice;
- (void)revokeAccessTokenForAppWithOauthToken:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)setClientInfo:(id)arg1;
- (void)tearDownConnectionToRemoteSession;
- (void)stopDeferringExpensiveOperations;
- (void)deferExpensiveOperations;
- (id)_createOrGetRemoteSession;
- (void)endPotentialLocationUse;
- (void)beginPotentialLocationUse;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface SLTencentWeiboUserRecord : SLMicroBlogUserRecord <NSSecureCoding>
{
    NSString *_openid;
    NSURL *_objectID;
}

+ (_Bool)supportsSecureCoding;
+ (id)userRecordWithDictionaryRepresentation:(id)arg1;
@property(retain, nonatomic) NSURL *objectID; // @synthesize objectID=_objectID;
@property(copy, nonatomic) NSString *openid; // @synthesize openid=_openid;
- (void).cxx_destruct;
- (void)setValuesWithUserDictionary:(id)arg1;
- (id)description;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;

@end

@interface SLMicroBlogUserRecord : NSObject <NSSecureCoding>
{
    NSString *_name;
    NSString *_screen_name;
    NSString *_profile_image_url;
    UIImage *_profileImageCache;
}

+ (_Bool)supportsSecureCoding;
+ (id)userRecordWithDictionaryRepresentation:(id)arg1;
@property(retain) UIImage *profileImageCache; // @synthesize profileImageCache=_profileImageCache;
@property(retain, nonatomic) NSString *profile_image_url; // @synthesize profile_image_url=_profile_image_url;
@property(retain, nonatomic) NSString *screen_name; // @synthesize screen_name=_screen_name;
@property(retain, nonatomic) NSString *name; // @synthesize name=_name;
- (void).cxx_destruct;
- (id)description;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (void)setValuesWithUserDictionary:(id)arg1;

@end

@interface SLTwitterReverseAuthRequest : NSObject
{
}

+ (void)performReverseAuthForLastTwitterAccountWithConsumerKey:(id)arg1 secret:(id)arg2 completion:(CDUnknownBlockType)arg3;

@end

@interface NSString (SLWeiboStringAdditions)
- (_Bool)isWeiboDuplicatePostError;
- (unsigned long long)SLWeiboCharacterCountWithShortenedURLLength:(unsigned long long)arg1;
@end

@interface NSError (WEDErrorAdditions)
- (id)encodeableError;
@end

@interface NSXPCConnection (SLClientAuthentication)
- (id)_clientBundleID;
- (id)sl_localizedClientName;
- (_Bool)sl_clientHasEntitlement:(id)arg1;
@end

@interface NSHTTPURLResponse (SLTwitterAdditions)
+ (id)sl_twitterResponseObjectErrorCode:(id)arg1;
- (int)sl_twitterResponseType:(id)arg1;
@end

@interface NSError (FBErrorAdditions)
- (id)encodeableError;
@end

@interface NSDictionary (SocialAdditions)
+ (id)SLDictionaryWithOAuthAccessTokenResponseData:(id)arg1;
@end

@interface NSError (TEErrorAdditions)
+ (id)APIGenericErrorFromErrorCode:(long long)arg1;
+ (id)APIFakeUserErrorFromErrorCode:(long long)arg1;
+ (id)APIUserErrorFromErrorCode:(long long)arg1;
+ (id)APIInternalServerErrorFromErrorCode:(long long)arg1;
+ (id)APIAuthorizationErrorFromErrorCode:(long long)arg1;
+ (id)APILimitErrorFromErrorCode:(long long)arg1;
+ (id)APIParameterErrorFromErrorCode:(long long)arg1;
+ (id)errorFromTencentWeiboAPIResponseErrorWithType:(long long)arg1 code:(long long)arg2;
- (id)encodeableError;
@end

@interface NSDictionary (SLFacebookNSDictionaryAdditions)
+ (id)dictionaryWithParametersInURLString:(id)arg1;
@end

@interface NSError (TWDErrorAdditions)
- (id)encodeableError;
@end

@interface NSString (SLTwitterStringAdditions)
- (_Bool)isTwitterDuplicatePostError;
- (unsigned long long)SLTwitterCharacterCountWithShortenedURLLength:(unsigned long long)arg1;
@end

@interface NSURL (SLTwitterURLAdditions)
+ (id)SLTwitterDirectMessageURL;
+ (id)SLTwitterRetweetURLForTweetID:(id)arg1;
+ (id)SLTwitterAccountGenerateURL;
+ (id)SLTwitterUsersLookupURL;
+ (id)SLTwitterAccountSettingsURL;
+ (id)SLTwitterUserInfoURL;
+ (id)SLTwitterAccessTokenURL;
+ (id)SLTwitterRequestTokenURL;
+ (id)SLTwitterCleanupPushDestinationsURL;
+ (id)SLTwitterVerifyCredentialsURL;
+ (id)SLTwitterImageLimitsURL;
+ (id)SLTwitterTCoLengthURL;
+ (id)SLTwitterFriendsURL;
+ (id)SLTwitterFriendshipsURL;
+ (id)SLTwitterNearbyPlacesURL;
+ (id)SLTwitterUpdateMultiPartStatusURL;
+ (id)SLTwitterUpdateStatusURL;
@end

@interface NSURL (SLFacebookURLAdditions)
+ (id)URLForFacebookPageAtPath:(id)arg1;
+ (id)URLForFacebookGraphAPIWithDomain:(id)arg1 path:(id)arg2;
+ (id)URLForFacebookGraphAPIWithPath:(id)arg1;
+ (id)URLForFacebookRESTMethod:(id)arg1;
+ (_Bool)_isBetaSwitchEnabledForKey:(struct __CFString *)arg1;
- (_Bool)loadingInUIWebViewWillLaunchAnotherApp;
- (_Bool)isAssetURL;
- (_Bool)isAppStoreURL;
- (_Bool)isMusicStoreURL;
@end

@interface NSString (SLTencentWeiboStringAdditions)
- (_Bool)isTencentWeiboDuplicatePostError;
- (unsigned long long)SLTencentWeiboCharacterCountWithShortenedURLLength:(unsigned long long)arg1;
@end

@interface NSArray (SLSocialNSArrayAdditions)
- (id)objectsPassingTest:(CDUnknownBlockType)arg1;
- (id)firstObjectPassingTest:(CDUnknownBlockType)arg1;
- (unsigned long long)countObjectsPassingTest:(CDUnknownBlockType)arg1;
@end

@interface UIImage (SocialAdditions)
+ (id)socialFrameworkImageNamed:(id)arg1;
@end

@interface NSLocale (SLFacebookLocaleAdditions)
+ (id)currentDeviceLanguageForFacebook;
@end

@interface NSArray (SLSocialNSArrayAdditions)
- (id)objectsPassingTest:(CDUnknownBlockType)arg1;
- (id)firstObjectPassingTest:(CDUnknownBlockType)arg1;
- (unsigned long long)countObjectsPassingTest:(CDUnknownBlockType)arg1;
@end

@interface UIApplication (SLUIApplicationAdditions)
+ (void)shouldShowNetworkActivityIndicatorInRemoteApplication:(_Bool)arg1;
@end

@interface NSString (SLAdditions)
- (_Bool)hasCaseInsensitiveSuffix:(id)arg1;
- (id)urlEncodedString;
@end

