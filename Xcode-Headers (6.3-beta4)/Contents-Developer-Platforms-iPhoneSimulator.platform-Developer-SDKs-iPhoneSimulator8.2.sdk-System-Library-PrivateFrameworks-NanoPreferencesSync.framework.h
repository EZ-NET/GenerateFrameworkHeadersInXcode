//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#pragma mark Blocks

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark -

//
// File: /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/System/Library/PrivateFrameworks/NanoPreferencesSync.framework/NanoPreferencesSync
// UUID: 2053E1A4-6CC1-3A3A-927F-9EC7DA1A3C85
//
//                           Arch: x86_64
//                Current version: 1.0.0
//          Compatibility version: 1.0.0
//                 Source version: 132.0.0.0.0
//            Minimum iOS version: 8.2.0
//                    SDK version: 8.2.0
//
// Objective-C Garbage Collection: Unsupported
//

@protocol NPSCompanionServerProtocol <NPSServerProtocol>
- (void)synchronizeNanoDomain:(NSString *)arg1 keys:(NSSet *)arg2;
- (void)synchronizeManagedConfigurationKind:(NSString *)arg1 feature:(NSString *)arg2;
@end

@protocol NPSDomainAccessorFilePresenterDelegate
- (void)filePresenterBecameNonCurrent:(NPSDomainAccessorFilePresenter *)arg1;
@end

@protocol NPSServerProtocol <NSObject>
- (void)synchronizeUserDefaultsDomain:(NSString *)arg1 keys:(NSSet *)arg2 containerPath:(NSString *)arg3;
- (void)synchronizeUserDefaultsDomain:(NSString *)arg1 keys:(NSSet *)arg2 container:(NSString *)arg3;
@end

@protocol NSFilePresenter <NSObject>
@property(readonly, retain) NSOperationQueue *presentedItemOperationQueue;
@property(readonly, copy) NSURL *presentedItemURL;

@optional
@property(readonly, copy) NSURL *primaryPresentedItemURL;
- (void)presentedSubitemAtURL:(NSURL *)arg1 didResolveConflictVersion:(NSFileVersion *)arg2;
- (void)presentedSubitemAtURL:(NSURL *)arg1 didLoseVersion:(NSFileVersion *)arg2;
- (void)presentedSubitemAtURL:(NSURL *)arg1 didGainVersion:(NSFileVersion *)arg2;
- (void)presentedSubitemDidChangeAtURL:(NSURL *)arg1;
- (void)presentedSubitemAtURL:(NSURL *)arg1 didMoveToURL:(NSURL *)arg2;
- (void)presentedSubitemDidAppearAtURL:(NSURL *)arg1;
- (void)accommodatePresentedSubitemDeletionAtURL:(NSURL *)arg1 completionHandler:(void (^)(NSError *))arg2;
- (void)presentedItemDidResolveConflictVersion:(NSFileVersion *)arg1;
- (void)presentedItemDidLoseVersion:(NSFileVersion *)arg1;
- (void)presentedItemDidGainVersion:(NSFileVersion *)arg1;
- (void)presentedItemDidChange;
- (void)presentedItemDidMoveToURL:(NSURL *)arg1;
- (void)accommodatePresentedItemDeletionWithCompletionHandler:(void (^)(NSError *))arg1;
- (void)savePresentedItemChangesWithCompletionHandler:(void (^)(NSError *))arg1;
- (void)relinquishPresentedItemToWriter:(void (^)(void (^)(void)))arg1;
- (void)relinquishPresentedItemToReader:(void (^)(void (^)(void)))arg1;
@end

@protocol NSObject
@property(readonly, copy) NSString *description;
@property(readonly) Class superclass;
@property(readonly) unsigned long long hash;
- (struct _NSZone *)zone;
- (unsigned long long)retainCount;
- (id)autorelease;
- (oneway void)release;
- (id)retain;
- (_Bool)respondsToSelector:(SEL)arg1;
- (_Bool)conformsToProtocol:(Protocol *)arg1;
- (_Bool)isMemberOfClass:(Class)arg1;
- (_Bool)isKindOfClass:(Class)arg1;
- (_Bool)isProxy;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2 withObject:(id)arg3;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2;
- (id)performSelector:(SEL)arg1;
- (id)self;
- (Class)class;
- (_Bool)isEqual:(id)arg1;

@optional
@property(readonly, copy) NSString *debugDescription;
@end

@interface NPSDomainAccessorUtils : NSObject
{
}

+ (id)objectForURL:(id)arg1;
+ (id)URLForObject:(id)arg1;
+ (_Bool)boolForObject:(id)arg1 existsAndHasValidFormat:(_Bool *)arg2;
+ (double)doubleForObject:(id)arg1 existsAndHasValidFormat:(_Bool *)arg2;
+ (float)floatForObject:(id)arg1 existsAndHasValidFormat:(_Bool *)arg2;
+ (long long)longForObject:(id)arg1 existsAndHasValidFormat:(_Bool *)arg2;
+ (long long)integerForObject:(id)arg1 existsAndHasValidFormat:(_Bool *)arg2;
+ (id)stringArrayForObject:(id)arg1;
+ (id)dataForObject:(id)arg1;
+ (id)dictionaryForObject:(id)arg1;
+ (id)arrayForObject:(id)arg1;
+ (id)stringForObject:(id)arg1;

@end

@interface NPSDomainAccessor : NSObject
{
    NSObject<OS_dispatch_queue> *_externalQueue;
    NSObject<OS_dispatch_queue> *_invalidationQueue;
    NPSDomainAccessorInternal *_internalAccessor;
}

+ (id)copyDomainListForPairingID:(id)arg1 pairingDataStore:(id)arg2;
+ (id)copyDomainList;
+ (void)resolveActivePairedDevicePairingID:(id *)arg1 pairingDataStore:(id *)arg2;
@property(retain, nonatomic) NPSDomainAccessorInternal *internalAccessor; // @synthesize internalAccessor=_internalAccessor;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *invalidationQueue; // @synthesize invalidationQueue=_invalidationQueue;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *externalQueue; // @synthesize externalQueue=_externalQueue;
- (void).cxx_destruct;
- (id)copyKeyList;
- (void)setURL:(id)arg1 forKey:(id)arg2;
- (void)setBool:(_Bool)arg1 forKey:(id)arg2;
- (void)setDouble:(double)arg1 forKey:(id)arg2;
- (void)setFloat:(float)arg1 forKey:(id)arg2;
- (void)setInteger:(long long)arg1 forKey:(id)arg2;
- (_Bool)boolForKey:(id)arg1 keyExistsAndHasValidFormat:(_Bool *)arg2;
- (double)doubleForKey:(id)arg1 keyExistsAndHasValidFormat:(_Bool *)arg2;
- (float)floatForKey:(id)arg1 keyExistsAndHasValidFormat:(_Bool *)arg2;
- (long long)longForKey:(id)arg1 keyExistsAndHasValidFormat:(_Bool *)arg2;
- (long long)integerForKey:(id)arg1 keyExistsAndHasValidFormat:(_Bool *)arg2;
- (id)URLForKey:(id)arg1;
- (_Bool)boolForKey:(id)arg1;
- (double)doubleForKey:(id)arg1;
- (float)floatForKey:(id)arg1;
- (long long)longForKey:(id)arg1;
- (long long)integerForKey:(id)arg1;
- (id)stringArrayForKey:(id)arg1;
- (id)dataForKey:(id)arg1;
- (id)dictionaryForKey:(id)arg1;
- (id)arrayForKey:(id)arg1;
- (id)stringForKey:(id)arg1;
- (void)removeObjectForKey:(id)arg1;
- (void)setObject:(id)arg1 forKey:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;
- (void)setObject:(id)arg1 forKey:(id)arg2;
- (void)objectForKey:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (id)objectForKey:(id)arg1;
- (void)synchronizeWithCompletionHandler:(CDUnknownBlockType)arg1;
- (id)synchronize;
- (void)invalidate;
- (void)dealloc;
- (id)initWithInternalDomainAccessor:(id)arg1 queue:(id)arg2;
- (id)initWithDomain:(id)arg1 queue:(id)arg2 pairingID:(id)arg3 pairingDataStore:(id)arg4;
- (id)initWithDomain:(id)arg1 pairingID:(id)arg2 pairingDataStore:(id)arg3;
- (id)initWithDomain:(id)arg1 queue:(id)arg2;
- (id)initWithDomain:(id)arg1;
- (id)queue;
@property(readonly, nonatomic) NSUUID *pairingID;
@property(readonly, nonatomic) NSString *domain;

@end

@interface NPSSettingAccessor : NSObject
{
    _Bool _hasChangesToWrite;
    NSString *_domain;
    long long _type;
    NSString *_container;
    NSString *_containerPath;
    NPSDomainAccessor *_nanoDomainAccessor;
}

+ (id)unserializeObject:(id)arg1 error:(id *)arg2;
+ (id)serializeObject:(id)arg1 error:(id *)arg2;
@property(nonatomic) _Bool hasChangesToWrite; // @synthesize hasChangesToWrite=_hasChangesToWrite;
@property(retain, nonatomic) NPSDomainAccessor *nanoDomainAccessor; // @synthesize nanoDomainAccessor=_nanoDomainAccessor;
@property(retain, nonatomic) NSString *containerPath; // @synthesize containerPath=_containerPath;
@property(retain, nonatomic) NSString *container; // @synthesize container=_container;
@property(nonatomic) long long type; // @synthesize type=_type;
@property(retain, nonatomic) NSString *domain; // @synthesize domain=_domain;
- (void).cxx_destruct;
- (id)serializedObjectForKey:(id)arg1 error:(id *)arg2;
- (id)copyKeyList;
- (void)setObject:(id)arg1 forKey:(id)arg2;
- (id)objectForKey:(id)arg1;
- (_Bool)synchronize;
- (_Bool)synchronizeForWriting;
- (_Bool)synchronizeForReading;
- (id)initWithNanoDomain:(id)arg1;
- (id)initWithUserDefaultsDomain:(id)arg1 containerPath:(id)arg2;
- (id)initWithUserDefaultsDomain:(id)arg1 container:(id)arg2;

@end

@interface NPSDomainAccessorFilePresenter : NSObject <NSFilePresenter>
{
    NSURL *_domainURL;
    id <NPSDomainAccessorFilePresenterDelegate> _delegate;
    NSOperationQueue *_presenterOperationQueue;
}

@property(retain, nonatomic) NSOperationQueue *presenterOperationQueue; // @synthesize presenterOperationQueue=_presenterOperationQueue;
@property(readonly, nonatomic) __weak id <NPSDomainAccessorFilePresenterDelegate> delegate; // @synthesize delegate=_delegate;
@property(retain, nonatomic) NSURL *domainURL; // @synthesize domainURL=_domainURL;
- (void).cxx_destruct;
- (_Bool)presentedItemNeedsWatching;
- (void)relinquishPresentedItemToWriter:(CDUnknownBlockType)arg1;
@property(readonly, retain) NSOperationQueue *presentedItemOperationQueue;
@property(readonly, copy) NSURL *presentedItemURL;
- (id)synchronizeForReadingOnly:(_Bool)arg1 handler:(CDUnknownBlockType)arg2;
- (void)dealloc;
- (id)initWithDelegate:(id)arg1 domainURL:(id)arg2;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly, copy) NSURL *primaryPresentedItemURL;
@property(readonly) Class superclass;

@end

@interface NPSManager : NSObject
{
    NSObject<OS_dispatch_queue> *_internalQueue;
    NSXPCConnection *_xpcConnection;
}

@property(retain, nonatomic) NSXPCConnection *xpcConnection; // @synthesize xpcConnection=_xpcConnection;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *internalQueue; // @synthesize internalQueue=_internalQueue;
- (void).cxx_destruct;
- (void)synchronizeNanoDomain:(id)arg1 keys:(id)arg2;
- (void)synchronizeManagedConfigurationKind:(id)arg1 feature:(id)arg2;
- (void)synchronizeUserDefaultsDomain:(id)arg1 keys:(id)arg2 containerPath:(id)arg3;
- (void)synchronizeUserDefaultsDomain:(id)arg1 keys:(id)arg2 container:(id)arg3;
- (void)synchronizeUserDefaultsDomain:(id)arg1 keys:(id)arg2;
- (void)invalidate;
- (id)connection;
- (void)dealloc;
- (void)unsafe_invalidate;
- (id)init;

@end

@interface NPSDomainAccessorInternal : NSObject <NPSDomainAccessorFilePresenterDelegate>
{
    _Bool _nanoSettingsDirectoryExists;
    _Bool _hasReadFromDisk;
    NSUUID *_pairingID;
    NSString *_pairingStorePath;
    NSString *_domain;
    NSURL *_domainURL;
    NSObject<OS_dispatch_queue> *_internalQueue;
    NSObject<OS_dispatch_queue> *_externalQueue;
    unsigned long long _referenceCounter;
    NSMutableSet *_dirtyKeysForWriting;
    NSMutableDictionary *_map;
    NPSDomainAccessorFilePresenter *_filePresenter;
}

+ (id)writeDomain:(id)arg1 toURL:(id)arg2;
+ (id)readDomainURL:(id)arg1 withError:(id *)arg2;
+ (id)copyDomainListForPairingDataStore:(id)arg1;
+ (void)mergeDirtyKeys:(id)arg1 fromDictionary:(id)arg2 toDictionary:(id)arg3;
+ (id)cfTypeNameForCFPropertyListRef:(void *)arg1;
+ (_Bool)valueIsValid:(id)arg1;
+ (_Bool)domainIsValid:(id)arg1;
+ (id)urlForDomain:(id)arg1 pairingDataStore:(id)arg2;
+ (void)invalidateAndReleaseUnreferencedAccessors;
+ (void)decrementInternalAccessorReferenceCount:(id)arg1;
+ (id)internalAccessorForPairingID:(id)arg1 pairingDataStore:(id)arg2 domain:(id)arg3;
+ (void)extensionWillResignActive;
+ (void)extensionDidBecomeActive;
+ (void)applicationDidEnterBackground;
+ (void)applicationDidResume;
+ (void)initialize;
@property(retain, nonatomic) NPSDomainAccessorFilePresenter *filePresenter; // @synthesize filePresenter=_filePresenter;
@property(retain, nonatomic) NSMutableDictionary *map; // @synthesize map=_map;
@property(retain, nonatomic) NSMutableSet *dirtyKeysForWriting; // @synthesize dirtyKeysForWriting=_dirtyKeysForWriting;
@property(nonatomic) _Bool hasReadFromDisk; // @synthesize hasReadFromDisk=_hasReadFromDisk;
@property(nonatomic) _Bool nanoSettingsDirectoryExists; // @synthesize nanoSettingsDirectoryExists=_nanoSettingsDirectoryExists;
@property(nonatomic) unsigned long long referenceCounter; // @synthesize referenceCounter=_referenceCounter;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *externalQueue; // @synthesize externalQueue=_externalQueue;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *internalQueue; // @synthesize internalQueue=_internalQueue;
@property(retain, nonatomic) NSURL *domainURL; // @synthesize domainURL=_domainURL;
@property(retain, nonatomic) NSString *domain; // @synthesize domain=_domain;
@property(retain, nonatomic) NSString *pairingStorePath; // @synthesize pairingStorePath=_pairingStorePath;
@property(retain, nonatomic) NSUUID *pairingID; // @synthesize pairingID=_pairingID;
- (void).cxx_destruct;
- (void)filePresenterBecameNonCurrent:(id)arg1;
- (id)createNanoSettingsDirectory;
- (id)canSynchronizeForWritingURL:(id)arg1 readFirst:(_Bool)arg2;
- (id)canSynchronizeForReadingURL:(id)arg1;
- (void)setURL:(id)arg1 forKey:(id)arg2;
- (void)setBool:(_Bool)arg1 forKey:(id)arg2;
- (void)setDouble:(double)arg1 forKey:(id)arg2;
- (void)setFloat:(float)arg1 forKey:(id)arg2;
- (void)setLong:(long long)arg1 forKey:(id)arg2;
- (void)setInteger:(long long)arg1 forKey:(id)arg2;
- (id)URLForKey:(id)arg1;
- (_Bool)boolForKey:(id)arg1 keyExistsAndHasValidFormat:(_Bool *)arg2;
- (double)doubleForKey:(id)arg1 keyExistsAndHasValidFormat:(_Bool *)arg2;
- (float)floatForKey:(id)arg1 keyExistsAndHasValidFormat:(_Bool *)arg2;
- (long long)longForKey:(id)arg1 keyExistsAndHasValidFormat:(_Bool *)arg2;
- (long long)integerForKey:(id)arg1 keyExistsAndHasValidFormat:(_Bool *)arg2;
- (_Bool)boolForKey:(id)arg1;
- (double)doubleForKey:(id)arg1;
- (float)floatForKey:(id)arg1;
- (long long)longForKey:(id)arg1;
- (long long)integerForKey:(id)arg1;
- (id)stringArrayForKey:(id)arg1;
- (id)dataForKey:(id)arg1;
- (id)dictionaryForKey:(id)arg1;
- (id)arrayForKey:(id)arg1;
- (id)stringForKey:(id)arg1;
- (void)removeObjectForKey:(id)arg1;
- (void)_setObject:(id)arg1 forKey:(id)arg2;
- (void)setObject:(id)arg1 forKey:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;
- (void)setObject:(id)arg1 forKey:(id)arg2;
- (id)_objectForKey:(id)arg1 error:(id *)arg2;
- (void)objectForKey:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (id)objectForKey:(id)arg1;
- (id)_synchronizeReadOnly:(_Bool)arg1;
- (void)synchronizeWithCompletionHandler:(CDUnknownBlockType)arg1;
- (id)synchronize;
- (id)_copyKeyList;
- (id)copyKeyList;
- (void)dealloc;
- (id)initWithPairingID:(id)arg1 pairingDataStore:(id)arg2 domain:(id)arg3;
- (void)_invalidatePresenter;
- (void)invalidatePresenter;

@end

