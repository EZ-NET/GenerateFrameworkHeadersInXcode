//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#pragma mark Blocks

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark -

//
// File: /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/System/Library/PrivateFrameworks/NanoRegistry.framework/NanoRegistry
// UUID: 2E571A60-7C2B-3D67-84FB-478632142388
//
//                           Arch: x86_64
//                Current version: 1.0.0
//          Compatibility version: 1.0.0
//                 Source version: 110.0.0.0.0
//            Minimum iOS version: 8.2.0
//                    SDK version: 8.2.0
//
// Objective-C Garbage Collection: Unsupported
//

@protocol NRDeviceDiscoveryControllerXPCDaemonDelegate
- (void)xpcEndDiscovery;
- (void)xpcBeginDiscovery;
@end

@protocol NRDeviceDiscoveryControllerXPCFrameworkDelegate <NRPropertyXPCFrameworkDelegate>
- (void)xpcDidRestartDiscovery;
- (void)xpcDidDiscoverDevice:(NRDevice *)arg1 deviceID:(NSUUID *)arg2 advertisedName:(NSString *)arg3;
@end

@protocol NRPairedDeviceRegistryXPCDaemonDelegate <NRPropertyXPCDaemonDelegate>
- (void)xpcRetriggerUnpairInfoDialogWithBlock:(void (^)(void))arg1;
- (void)xpcAddRemoveRecoveryStepIDSFinalize:(_Bool)arg1 block:(void (^)(void))arg2;
- (void)xpcAddRemoveRecoveryStepObliterate:(_Bool)arg1 withStatePath:(NSString *)arg2 block:(void (^)(void))arg3;
- (void)xpcAddRemoveRecoveryStepResetNVRAM:(_Bool)arg1 block:(void (^)(void))arg2;
- (void)xpcAddRemoveRecoveryStepICloudDeletePaymentCards:(_Bool)arg1 block:(void (^)(void))arg2;
- (void)xpcAddRemoveRecoveryStepStockholmReset:(_Bool)arg1 block:(void (^)(void))arg2;
- (void)xpcAddRemoveRecoveryStepIDSUnpair:(_Bool)arg1 withPairingDeviceID:(NSUUID *)arg2 block:(void (^)(void))arg3;
- (void)xpcAddRemoveRecoveryStepUnpairBluetooth:(_Bool)arg1 withPairingDeviceID:(NSUUID *)arg2 block:(void (^)(void))arg3;
- (void)xpcAddRemoveRecoveryStepDeletePairingStore:(_Bool)arg1 withPairingDeviceID:(NSUUID *)arg2 block:(void (^)(void))arg3;
- (void)xpcAddRemoveRecoveryStepRemoteUnpair:(_Bool)arg1 withAdvertisedName:(NSString *)arg2 andPairedDeviceID:(NSUUID *)arg3 block:(void (^)(void))arg4;
- (void)xpcAddRemoveRecoveryStepIDSUnpairStart:(_Bool)arg1 block:(void (^)(void))arg2;
- (void)xpcAddRemoveRecoveryStepDeleteAccounts:(_Bool)arg1 block:(void (^)(void))arg2;
- (void)xpcAddRemoveRecoveryStepBackup:(_Bool)arg1 withPairingDeviceID:(NSUUID *)arg2 block:(void (^)(void))arg3;
- (void)xpcAddRemoveRecoveryStepDisableDaemons:(_Bool)arg1 block:(void (^)(void))arg2;
- (void)xpcSetObliterationEnabled:(_Bool)arg1 block:(void (^)(void))arg2;
- (void)xpcTriggerRecovery:(void (^)(void))arg1;
- (void)xpcRecoveryDescription:(void (^)(NSString *))arg1;
- (void)xpcResumePairingClientCrashMonitoring:(void (^)(void))arg1;
- (void)xpcSuspendPairingClientCrashMonitoring:(void (^)(void))arg1;
- (void)xpcPairingShouldContinue;
- (void)xpcUnpairWithDeviceID:(NSUUID *)arg1 shouldObliterate:(_Bool)arg2 operationHasBegun:(void (^)(NSError *, unsigned long long))arg3;
- (void)xpcNotifyPasscode:(NSNumber *)arg1 withDeviceID:(NSUUID *)arg2;
- (void)xpcNotifyActivationCompleted:(NSUUID *)arg1 withSuccess:(_Bool)arg2;
- (void)xpcEnterCompatibilityState:(unsigned short)arg1 withDeviceID:(NSUUID *)arg2;
- (void)xpcAbortPairingReason:(NSString *)arg1 withBlock:(void (^)(unsigned long long))arg2;
- (void)xpcGizmoPasscodeAdvertiseAndPairWithName:(NSString *)arg1 operationHasBegun:(void (^)(NSError *, unsigned long long))arg2;
- (void)xpcGizmoOOBAdvertiseAndPairWithName:(NSString *)arg1 operationHasBegun:(void (^)(NSError *, unsigned long long))arg2;
- (void)xpcCompanionPasscodePairWithDeviceID:(NSUUID *)arg1 operationHasBegun:(void (^)(NSError *, unsigned long long))arg2;
- (void)xpcCompanionOOBDiscoverAndPairWithName:(NSString *)arg1 withOutOfBandPairingKey:(NSData *)arg2 operationHasBegun:(void (^)(NSError *, unsigned long long))arg3;
- (void)xpcQueryStatus:(NSUUID *)arg1 statusData:(void (^)(unsigned long long, NSDictionary *, NSUUID *, NRDevice *, _Bool, unsigned short, long long, unsigned long long))arg2;
@end

@protocol NRPairedDeviceRegistryXPCFrameworkDelegate <NRPropertyXPCFrameworkDelegate>
- (void)xpcLastUnpairReasonDidChange:(unsigned long long)arg1;
- (void)xpcDidReceiveBTPairingRequest:(NRDevice *)arg1 deviceID:(NSUUID *)arg2;
- (void)xpcCompatibilityStateDidChange:(unsigned short)arg1 withDevice:(NRDevice *)arg2 andDeviceID:(NSUUID *)arg3;
- (void)xpcRemoteUnpairingDidBegin;
- (void)xpcHasNewOOBKey:(NSData *)arg1;
- (void)xpcDeviceNeedsActivation:(NRDevice *)arg1 deviceID:(NSUUID *)arg2;
- (void)xpcDevice:(NRDevice *)arg1 deviceID:(NSUUID *)arg2 needsPasscode:(NSNumber *)arg3;
- (void)xpcStatusDidChange:(unsigned long long)arg1;
- (void)xpcDidBeginPairing:(NRDevice *)arg1 deviceID:(NSUUID *)arg2;
- (void)xpcCreateDevice:(NRDevice *)arg1 deviceID:(NSUUID *)arg2;
- (void)xpcDeviceDidUnpair:(NRDevice *)arg1 deviceID:(NSUUID *)arg2;
- (void)xpcDeviceIDDidFailToPair:(NSUUID *)arg1 error:(NSError *)arg2;
- (void)xpcDeviceDidPair:(NRDevice *)arg1 deviceID:(NSUUID *)arg2;
@end

@protocol NRPropertyXPCDaemonDelegate <NSObject>
- (void)xpcSetValue:(id)arg1 forProperty:(NSString *)arg2 deviceID:(NSUUID *)arg3;
@end

@protocol NRPropertyXPCFrameworkDelegate <NSObject>
- (void)xpcAssertInClient:(NSString *)arg1;
- (void)xpcSetValue:(id)arg1 forProperty:(NSString *)arg2 deviceID:(NSUUID *)arg3;
@end

@protocol NSCoding
- (id)initWithCoder:(NSCoder *)arg1;
- (void)encodeWithCoder:(NSCoder *)arg1;
@end

@protocol NSCopying
- (id)copyWithZone:(struct _NSZone *)arg1;
@end

@protocol NSObject
@property(readonly, copy) NSString *description;
@property(readonly) Class superclass;
@property(readonly) unsigned long long hash;
- (struct _NSZone *)zone;
- (unsigned long long)retainCount;
- (id)autorelease;
- (oneway void)release;
- (id)retain;
- (_Bool)respondsToSelector:(SEL)arg1;
- (_Bool)conformsToProtocol:(Protocol *)arg1;
- (_Bool)isMemberOfClass:(Class)arg1;
- (_Bool)isKindOfClass:(Class)arg1;
- (_Bool)isProxy;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2 withObject:(id)arg3;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2;
- (id)performSelector:(SEL)arg1;
- (id)self;
- (Class)class;
- (_Bool)isEqual:(id)arg1;

@optional
@property(readonly, copy) NSString *debugDescription;
@end

@protocol NSSecureCoding <NSCoding>
+ (_Bool)supportsSecureCoding;
@end

@protocol NSXPCConnectionDelegate <NSObject>

@optional
- (void)connection:(NSXPCConnection *)arg1 handleInvocation:(NSInvocation *)arg2 isReply:(_Bool)arg3;
- (id <NSSecureCoding>)replacementObjectForXPCConnection:(NSXPCConnection *)arg1 encoder:(NSXPCCoder *)arg2 object:(id)arg3;
@end

@interface NRPBPairingModeRequest : PBRequest <NSCopying>
{
    int _pairingMode;
}

@property(nonatomic) int pairingMode; // @synthesize pairingMode=_pairingMode;
- (void)mergeFrom:(id)arg1;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)copyTo:(id)arg1;
- (void)writeTo:(id)arg1;
- (_Bool)readFrom:(id)arg1;
- (id)dictionaryRepresentation;
- (id)description;

@end

@interface NRKeyedArchiver : NSKeyedArchiver
{
    _Bool _archiveSecureItems;
}

@property(nonatomic) _Bool archiveSecureItems; // @synthesize archiveSecureItems=_archiveSecureItems;

@end

@interface NRKeyedUnarchiver : NSKeyedUnarchiver
{
}

@end

@interface NRDevice : NSObject <NSSecureCoding>
{
    NSObject<OS_dispatch_queue> *_nrQueue;
    NSMutableDictionary *_properties;
    NSMutableDictionary *_observers;
    NSPointerArray *_promiscuousObservers;
}

+ (_Bool)supportsSecureCoding;
@property(retain, nonatomic) NSPointerArray *promiscuousObservers; // @synthesize promiscuousObservers=_promiscuousObservers;
@property(retain, nonatomic) NSMutableDictionary *observers; // @synthesize observers=_observers;
@property(retain, nonatomic) NSMutableDictionary *properties; // @synthesize properties=_properties;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *nrQueue; // @synthesize nrQueue=_nrQueue;
- (void).cxx_destruct;
- (void)encodeWithCoder:(id)arg1;
- (void)queueMergeWithDevice:(id)arg1;
- (void)mergeWithDevice:(id)arg1;
- (id)initWithDevice:(id)arg1 queue:(id)arg2 withSecureProperties:(_Bool)arg3;
- (id)initWithCoder:(id)arg1;
- (void)_queueFirePropertyObserversForProperty:(id)arg1 fromValue:(id)arg2;
- (void)_firePropertyObserversForProperty:(id)arg1 fromValue:(id)arg2;
- (_Bool)_queueSetValue:(id)arg1 forProperty:(id)arg2;
- (_Bool)_setValue:(id)arg1 forProperty:(id)arg2;
- (_Bool)setValue:(id)arg1 forProperty:(id)arg2;
- (id)queueValueForProperty:(id)arg1;
- (id)valueForProperty:(id)arg1;
- (void)queueRemovePropertyObserver:(id)arg1 forPropertyChanges:(id)arg2;
- (void)removePropertyObserver:(id)arg1 forPropertyChanges:(id)arg2;
- (void)queueAddPropertyObserver:(id)arg1 forPropertyChanges:(id)arg2;
- (void)addPropertyObserver:(id)arg1 forPropertyChanges:(id)arg2;
- (id)description;
- (id)queueDescription;
- (id)initWithQueue:(id)arg1;
- (id)init;

@end

@interface NRFrameworkDevice : NRDevice
{
    NSUUID *_deviceID;
}

@property(retain, nonatomic) NSUUID *deviceID; // @synthesize deviceID=_deviceID;
- (void).cxx_destruct;
- (_Bool)_setValue:(id)arg1 forProperty:(id)arg2;
- (id)initWithDevice:(id)arg1 deviceID:(id)arg2 queue:(id)arg3;

@end

@interface NRPairedDeviceRegistry : NSObject <NRPairedDeviceRegistryXPCFrameworkDelegate, NSXPCConnectionDelegate>
{
    _Bool _xpcConnectionInterrupted;
    _Bool _xpcConnectionInvalidated;
    _Bool _hasSomeEntitlements;
    unsigned short _compatibilityState;
    unsigned long long _status;
    NSMutableArray *_devicesBlocks;
    NSMutableDictionary *_mutableDeviceDictionary;
    NSUUID *_pairingDeviceID;
    NRFrameworkDevice *_pairingDevice;
    NRFrameworkDevice *_pairedDevice;
    double _reconnectDelay;
    NSObject<OS_dispatch_queue> *_pdrQueue;
    NSObject<OS_dispatch_queue> *_deviceQueue;
    NSObject<OS_dispatch_queue> *_connectQueue;
    NSObject<OS_dispatch_queue> *_reconnectQueue;
    NSMutableArray *_finishedPairingSemaphores;
    NSXPCConnection *_xpcConnection;
    NSUUID *_clientUUID;
    long long _pairingCompatibilityVersion;
    unsigned long long _lastUnpairReason;
}

+ (id)sharedInstance;
@property(nonatomic) unsigned long long lastUnpairReason; // @synthesize lastUnpairReason=_lastUnpairReason;
@property(nonatomic) long long pairingCompatibilityVersion; // @synthesize pairingCompatibilityVersion=_pairingCompatibilityVersion;
@property(nonatomic) unsigned short compatibilityState; // @synthesize compatibilityState=_compatibilityState;
@property(retain, nonatomic) NSUUID *clientUUID; // @synthesize clientUUID=_clientUUID;
@property(nonatomic) _Bool hasSomeEntitlements; // @synthesize hasSomeEntitlements=_hasSomeEntitlements;
@property(retain, nonatomic) NSXPCConnection *xpcConnection; // @synthesize xpcConnection=_xpcConnection;
@property(retain, nonatomic) NSMutableArray *finishedPairingSemaphores; // @synthesize finishedPairingSemaphores=_finishedPairingSemaphores;
@property(nonatomic) _Bool xpcConnectionInvalidated; // @synthesize xpcConnectionInvalidated=_xpcConnectionInvalidated;
@property(nonatomic) _Bool xpcConnectionInterrupted; // @synthesize xpcConnectionInterrupted=_xpcConnectionInterrupted;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *reconnectQueue; // @synthesize reconnectQueue=_reconnectQueue;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *connectQueue; // @synthesize connectQueue=_connectQueue;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *deviceQueue; // @synthesize deviceQueue=_deviceQueue;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *pdrQueue; // @synthesize pdrQueue=_pdrQueue;
@property(nonatomic) double reconnectDelay; // @synthesize reconnectDelay=_reconnectDelay;
@property(retain, nonatomic) NRFrameworkDevice *pairedDevice; // @synthesize pairedDevice=_pairedDevice;
@property(retain, nonatomic) NRFrameworkDevice *pairingDevice; // @synthesize pairingDevice=_pairingDevice;
@property(retain, nonatomic) NSUUID *pairingDeviceID; // @synthesize pairingDeviceID=_pairingDeviceID;
@property(retain, nonatomic) NSMutableDictionary *mutableDeviceDictionary; // @synthesize mutableDeviceDictionary=_mutableDeviceDictionary;
@property(retain, nonatomic) NSMutableArray *devicesBlocks; // @synthesize devicesBlocks=_devicesBlocks;
- (void).cxx_destruct;
- (void)sendDevicesUpdatedNotification;
- (void)xpcCompatibilityStateDidChange:(unsigned short)arg1 withDevice:(id)arg2 andDeviceID:(id)arg3;
@property(readonly, nonatomic) unsigned long long status; // @synthesize status=_status;
- (void)notifyStatus;
- (void)xpcStatusDidChange:(unsigned long long)arg1;
- (void)xpcLastUnpairReasonDidChange:(unsigned long long)arg1;
- (void)xpcCreateDevice:(id)arg1 deviceID:(id)arg2;
- (void)xpcDeviceDidUnpair:(id)arg1 deviceID:(id)arg2;
- (void)xpcDeviceIDDidFailToPair:(id)arg1 error:(id)arg2;
- (void)xpcDeviceDidPair:(id)arg1 deviceID:(id)arg2;
- (void)xpcHasNewOOBKey:(id)arg1;
- (void)xpcDeviceNeedsActivation:(id)arg1 deviceID:(id)arg2;
- (void)xpcDidReceiveBTPairingRequest:(id)arg1 deviceID:(id)arg2;
- (void)xpcDevice:(id)arg1 deviceID:(id)arg2 needsPasscode:(id)arg3;
- (void)xpcRemoteUnpairingDidBegin;
- (void)xpcDidBeginPairing:(id)arg1 deviceID:(id)arg2;
- (void)xpcSetValue:(id)arg1 forProperty:(id)arg2 deviceID:(id)arg3;
- (void)_xpcInvalidationHandler;
- (void)_xpcInterruptionHandler;
- (void)_xpcFrameworkInitializationSuccessWithStatus:(unsigned long long)arg1 andDevices:(id)arg2 andPairingDeviceID:(id)arg3 andPairingDevice:(id)arg4 hasEntitlements:(_Bool)arg5 andCompatibilityState:(unsigned short)arg6 andCompatibilityVersion:(long long)arg7 andLastUnpairReason:(unsigned long long)arg8;
- (_Bool)_xpcEnsureFrameworkInitialized;
- (void)_xpcInitializeConnection;
- (void)_addRemoveRecoveryStepIDSFinalize:(_Bool)arg1;
- (void)_addRemoveRecoveryStepObliterate:(_Bool)arg1 withStatePath:(id)arg2;
- (void)_addRemoveRecoveryStepResetNVRAM:(_Bool)arg1;
- (void)_addRemoveRecoveryStepICloudDeletePaymentCards:(_Bool)arg1;
- (void)_addRemoveRecoveryStepStockholmReset:(_Bool)arg1;
- (void)_addRemoveRecoveryStepIDSUnpair:(_Bool)arg1 withPairingDeviceID:(id)arg2;
- (void)_addRemoveRecoveryStepUnpairBluetooth:(_Bool)arg1 withPairingDeviceID:(id)arg2;
- (void)_addRemoveRecoveryStepDeletePairingStore:(_Bool)arg1 withPairingDeviceID:(id)arg2;
- (void)_addRemoveRecoveryStepRemoteUnpair:(_Bool)arg1 withAdvertisedName:(id)arg2 andPairedDeviceID:(id)arg3;
- (void)_addRemoveRecoveryStepIDSUnpairStart:(_Bool)arg1;
- (void)_addRemoveRecoveryStepDeleteAccounts:(_Bool)arg1;
- (void)_addRemoveRecoveryStepBackup:(_Bool)arg1 withPairingDeviceID:(id)arg2;
- (void)_addRemoveRecoveryStepDisableDaemons:(_Bool)arg1;
- (void)_setObliterationEnabled:(_Bool)arg1;
- (void)_triggerRecovery;
- (id)_recoveryDescription;
- (void)retriggerUnpairInfoDialog;
- (unsigned int)minorVersion;
- (unsigned int)majorVersion;
- (_Bool)isPaired;
- (id)pairingID;
- (id)pairingStorePath;
- (void)resumePairingClientCrashMonitoring;
- (void)suspendPairingClientCrashMonitoring;
- (void)abortPairingWithReason:(id)arg1;
- (void)abortPairing;
- (void)waitForPairingStorePathPairingID:(CDUnknownBlockType)arg1;
- (void)pairingStorePathPairingID:(CDUnknownBlockType)arg1;
- (void)_pairingStorePathPairingID:(CDUnknownBlockType)arg1;
- (void)enterCompatibilityState:(unsigned short)arg1 forDevice:(id)arg2;
- (void)unpairWithDevice:(id)arg1 shouldObliterate:(_Bool)arg2 operationHasBegun:(CDUnknownBlockType)arg3;
- (void)notifyPairingShouldContinue;
- (void)notifyPasscode:(id)arg1 forDevice:(id)arg2;
- (void)notifyActivationCompleted:(id)arg1 withSuccess:(_Bool)arg2;
- (void)gizmoPasscodeAdvertiseAndPairWithName:(id)arg1 operationHasBegun:(CDUnknownBlockType)arg2;
- (void)gizmoOOBAdvertiseAndPairWithName:(id)arg1 operationHasBegun:(CDUnknownBlockType)arg2;
- (void)companionPasscodePairWithDevice:(id)arg1 operationHasBegun:(CDUnknownBlockType)arg2;
- (void)companionOOBDiscoverAndPairWithName:(id)arg1 withOutOfBandPairingKey:(id)arg2 operationHasBegun:(CDUnknownBlockType)arg3;
- (id)getAllDevices;
- (id)getActivePairedDevice;
- (id)getDevices;
- (void)getDevicesWithBlock:(CDUnknownBlockType)arg1;
- (void)dealloc;
- (id)init;
- (void)xpcAssertInClient:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface NRDeviceDiscoveryController : NSObject <NRDeviceDiscoveryControllerXPCFrameworkDelegate, NSXPCConnectionDelegate>
{
    NSArray *_devices;
    NSMutableArray *_mutableDevices;
    unsigned long long _counter;
    NSXPCConnection *_xpcConnection;
}

+ (id)sharedInstance;
@property(retain, nonatomic) NSXPCConnection *xpcConnection; // @synthesize xpcConnection=_xpcConnection;
@property(nonatomic) unsigned long long counter; // @synthesize counter=_counter;
@property(retain, nonatomic) NSMutableArray *mutableDevices; // @synthesize mutableDevices=_mutableDevices;
@property(readonly, nonatomic) NSArray *devices; // @synthesize devices=_devices;
- (void).cxx_destruct;
- (void)xpcSetValue:(id)arg1 forProperty:(id)arg2 deviceID:(id)arg3;
- (void)xpcDidRestartDiscovery;
- (void)xpcDidDiscoverDevice:(id)arg1 deviceID:(id)arg2 advertisedName:(id)arg3;
- (_Bool)_xpcConnectToService;
- (void)end;
- (void)begin;
- (void)dealloc;
- (id)init;
- (void)xpcAssertInClient:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface NRPBPairingModeResponse : PBCodable <NSCopying>
{
    _Bool _success;
}

@property(nonatomic) _Bool success; // @synthesize success=_success;
- (void)mergeFrom:(id)arg1;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)copyTo:(id)arg1;
- (void)writeTo:(id)arg1;
- (_Bool)readFrom:(id)arg1;
- (id)dictionaryRepresentation;
- (id)description;

@end

