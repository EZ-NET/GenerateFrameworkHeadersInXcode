//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#pragma mark Blocks

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

struct CGPoint {
    double x;
    double y;
};

struct CGRect {
    struct CGPoint origin;
    struct CGSize size;
};

struct CGSize {
    double width;
    double height;
};

struct UIEdgeInsets {
    double top;
    double left;
    double bottom;
    double right;
};

struct _NSRange {
    unsigned long long location;
    unsigned long long length;
};

struct map<long long, MPMediaEntity<MPCacheableConcreteMediaEntity>*__weak, std::__1::less<long long>, std::__1::allocator<std::__1::pair<const long long, MPMediaEntity<MPCacheableConcreteMediaEntity>*__weak>>> {
    struct __tree<std::__1::__value_type<long long, MPMediaEntity<MPCacheableConcreteMediaEntity>*__weak>, std::__1::__map_value_compare<long long, std::__1::__value_type<long long, MPMediaEntity<MPCacheableConcreteMediaEntity>*__weak>, std::__1::less<long long>, true>, std::__1::allocator<std::__1::__value_type<long long, MPMediaEntity<MPCacheableConcreteMediaEntity>*__weak>>> {
        struct __tree_node<std::__1::__value_type<long long, MPMediaEntity<MPCacheableConcreteMediaEntity>*__weak>, void *> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<long long, MPMediaEntity<MPCacheableConcreteMediaEntity>*__weak>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> {
                struct __tree_node_base<void *> *_field1;
            } _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<long long, std::__1::__value_type<long long, MPMediaEntity<MPCacheableConcreteMediaEntity>*__weak>, std::__1::less<long long>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

#pragma mark Typedef'd Structures

typedef struct {
    unsigned int _field1[8];
} CDStruct_6ad76789;

typedef struct {
    long long value;
    int timescale;
    unsigned int flags;
    long long epoch;
} CDStruct_1b6d18a9;

typedef struct {
    long long numberOfAvailableSkips;
    long long skipFrequency;
    double skipInterval;
} CDStruct_dcf4dde6;

// Template types
typedef struct map<long long, MPMediaEntity<MPCacheableConcreteMediaEntity>*__weak, std::__1::less<long long>, std::__1::allocator<std::__1::pair<const long long, MPMediaEntity<MPCacheableConcreteMediaEntity>*__weak>>> {
    struct __tree<std::__1::__value_type<long long, MPMediaEntity<MPCacheableConcreteMediaEntity>*__weak>, std::__1::__map_value_compare<long long, std::__1::__value_type<long long, MPMediaEntity<MPCacheableConcreteMediaEntity>*__weak>, std::__1::less<long long>, true>, std::__1::allocator<std::__1::__value_type<long long, MPMediaEntity<MPCacheableConcreteMediaEntity>*__weak>>> {
        struct __tree_node<std::__1::__value_type<long long, MPMediaEntity<MPCacheableConcreteMediaEntity>*__weak>, void *> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<long long, MPMediaEntity<MPCacheableConcreteMediaEntity>*__weak>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> {
                struct __tree_node_base<void *> *_field1;
            } _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<long long, std::__1::__value_type<long long, MPMediaEntity<MPCacheableConcreteMediaEntity>*__weak>, std::__1::less<long long>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
} map_8037feab;

#pragma mark -

//
// File: /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/System/Library/Frameworks/MediaPlayer.framework/MediaPlayer
// UUID: 50D7D65B-96E2-3162-8BFB-EE6443619EBA
//
//                           Arch: x86_64
//                Current version: 1.0.0
//          Compatibility version: 1.0.0
//                 Source version: 2770.31.25.0.0
//            Minimum iOS version: 8.2.0
//                    SDK version: 8.2.0
//
// Objective-C Garbage Collection: Unsupported
//

@protocol AVAudioSessionDelegate <NSObject>

@optional
- (void)inputIsAvailableChanged:(_Bool)arg1;
- (void)endInterruption;
- (void)endInterruptionWithFlags:(unsigned long long)arg1;
- (void)beginInterruption;
@end

@protocol AVAudioSessionDelegateMediaPlayerOnly <AVAudioSessionDelegate>

@optional
- (void)endInterruptionFromInterruptor:(NSString *)arg1 category:(NSString *)arg2 flags:(unsigned long long)arg3;
@end

@protocol AVPlayerItemLegibleOutputPushDelegate <AVPlayerItemOutputPushDelegate>

@optional
- (void)legibleOutput:(AVPlayerItemLegibleOutput *)arg1 didOutputAttributedStrings:(NSArray *)arg2 nativeSampleBuffers:(NSArray *)arg3 forItemTime:(CDStruct_1b6d18a9)arg4;
@end

@protocol AVPlayerItemOutputPushDelegate <NSObject>

@optional
- (void)outputSequenceWasFlushed:(AVPlayerItemOutput *)arg1;
@end

@protocol MCProfileConnectionObserver <NSObject>

@optional
- (void)profileConnectionDidReceiveAppWhitelistChangedNotification:(MCProfileConnection *)arg1 userInfo:(NSDictionary *)arg2;
- (void)profileConnectionDidReceiveDefaultsChangedNotification:(MCProfileConnection *)arg1 userInfo:(NSDictionary *)arg2;
- (void)profileConnectionDidReceiveEffectiveSettingsChangedNotification:(MCProfileConnection *)arg1 userInfo:(NSDictionary *)arg2;
- (void)profileConnectionDidReceiveProfileListChangedNotification:(MCProfileConnection *)arg1 userInfo:(NSDictionary *)arg2;
- (void)profileConnectionDidReceivePasscodePolicyChangedNotification:(MCProfileConnection *)arg1 userInfo:(NSDictionary *)arg2;
- (void)profileConnectionDidReceivePasscodeChangedNotification:(MCProfileConnection *)arg1 userInfo:(NSDictionary *)arg2;
- (void)profileConnectionDidReceiveRestrictionChangedNotification:(MCProfileConnection *)arg1 userInfo:(NSDictionary *)arg2;
@end

@protocol MPAVControllerNode <NSObject>
@property(retain, nonatomic) MPAVController *player;
- (void)unlockPlayer;
- (void)lockPlayer;
@end

@protocol MPAVControllerProtocol <NSObject>
@property(readonly, nonatomic) unsigned long long state;
@property(nonatomic) unsigned long long displayOverridePlaybackState;
@property(readonly, nonatomic) MPMediaQuery *currentMediaQuery;
@property(readonly, nonatomic) MPMediaItem *currentMediaItem;
- (_Bool)shouldDisplayAsPlaying;
@end

@protocol MPAVErrorResolverDelegate <NSObject>

@optional
- (void)errorResolver:(MPAVErrorResolver *)arg1 didResolveError:(NSError *)arg2 withResolution:(long long)arg3;
@end

@protocol MPAVPlaylistFeeder <NSObject>
@property(readonly, nonatomic) unsigned long long itemCount;
- (_Bool)shouldReloadForChangeFromNetworkType:(long long)arg1 toNetworkType:(long long)arg2;
- (MPAVItem *)itemForIndex:(unsigned long long)arg1;
- (_Bool)hasItemForIndex:(unsigned long long)arg1;
- (unsigned long long)initialPlaybackQueueDepthForStartingIndex:(unsigned long long)arg1;
- (void)assumeOwnershipOfItems:(NSArray *)arg1;
@end

@protocol MPAVQueuePlayerFeederSource <NSObject>
- (void)queuePlayerFeederFailedToQueueAnyItems:(MPAVQueuePlayerFeeder *)arg1;
- (void)queuePlayerFeederDidUpdateQueue:(MPAVQueuePlayerFeeder *)arg1 queuedItems:(NSArray *)arg2 dequeuedItems:(NSArray *)arg3;
- (_Bool)queuePlayerFeeder:(MPAVQueuePlayerFeeder *)arg1 willInsertItem:(MPAVItem *)arg2;
- (void)queuePlayerFeeder:(MPAVQueuePlayerFeeder *)arg1 willRemoveItem:(MPAVItem *)arg2;
- (MPAVItem *)queuePlayerFeeder:(MPAVQueuePlayerFeeder *)arg1 itemToFollowItem:(MPAVItem *)arg2;
@end

@protocol MPAVRoutingControllerDelegate <NSObject>

@optional
- (void)routingController:(MPAVRoutingController *)arg1 didFailToPickRouteWithError:(NSError *)arg2;
- (void)routingControllerExternalScreenTypeDidChange:(MPAVRoutingController *)arg1;
- (void)routingControllerAvailableRoutesDidChange:(MPAVRoutingController *)arg1;
@end

@protocol MPAVRoutingTableViewCellDelegate <NSObject>

@optional
- (void)routingCell:(MPAVRoutingTableViewCell *)arg1 mirroringSwitchValueDidChange:(_Bool)arg2;
@end

@protocol MPAVRoutingViewControllerDelegate <NSObject>

@optional
- (void)routingViewControllerDidShowAirPlayDebugScreen:(MPAVRoutingViewController *)arg1;
- (void)routingViewControllerDidUpdateContents:(MPAVRoutingViewController *)arg1;
- (void)routingViewController:(MPAVRoutingViewController *)arg1 didPickRoute:(MPAVRoute *)arg2;
@end

@protocol MPArtworkDataSource <NSObject>
- (_Bool)areRepresentationsForCatalog:(MPArtworkCatalog *)arg1 visuallyIdenticalToRepresentationsForCatalog:(MPArtworkCatalog *)arg2;
- (void)cancelLoadingRepresentationForArtworkCatalog:(MPArtworkCatalog *)arg1;
- (void)loadRepresentationForArtworkCatalog:(MPArtworkCatalog *)arg1 completionHandler:(void (^)(MPArtworkRepresentation *, NSError *))arg2;
- (MPArtworkRepresentation *)existingRepresentationForArtworkCatalog:(MPArtworkCatalog *)arg1;
- (_Bool)isRepresentation:(MPArtworkRepresentation *)arg1 bestRepresentationForArtworkCatalog:(MPArtworkCatalog *)arg2;
- (_Bool)areRepresentationsAvailableForCatalog:(MPArtworkCatalog *)arg1;
@end

@protocol MPAudioAndSubtitlesControllerDelegate <NSObject>
- (void)audioAndSubtitleControllerRequestsDismissal:(MPAudioAndSubtitlesController *)arg1;
@end

@protocol MPCacheableConcreteMediaEntity
@property(readonly, retain, nonatomic) MPConcreteMediaEntityPropertiesCache *cachedPropertyValues;
@end

@protocol MPClientMediaPickerController <NSObject>
- (void)remoteMediaPickerDidCancel;
- (void)remoteMediaPickerDidPickMediaItems:(MPMediaItemCollection *)arg1;
@end

@protocol MPControllerProtocol <NSObject>
@property(readonly, retain, nonatomic) UIView *view;
@property(retain, nonatomic) MPAVController *player;
@property(nonatomic) long long orientation;
@property(retain, nonatomic) MPAVItem *item;
@property(nonatomic) __weak id delegate;
- (void)setOrientation:(long long)arg1 animate:(_Bool)arg2;
- (void)noteIgnoredChangeTypes:(unsigned long long)arg1;
- (void)clearWeakReferencesToObject:(id)arg1;
@end

@protocol MPDetailScrubControllerDelegate <NSObject>

@optional
- (void)detailScrubController:(MPDetailScrubController *)arg1 didChangeScrubSpeed:(long long)arg2;
- (void)detailScrubController:(MPDetailScrubController *)arg1 didChangeValue:(float)arg2;
- (void)detailScrubControllerDidEndScrubbing:(MPDetailScrubController *)arg1;
- (void)detailScrubControllerDidBeginScrubbing:(MPDetailScrubController *)arg1;
@end

@protocol MPDetailSliderDelegate <NSObject>

@optional
- (void)detailSlider:(MPDetailSlider *)arg1 didChangeScrubSpeed:(long long)arg2;
- (void)detailSlider:(MPDetailSlider *)arg1 didChangeValue:(float)arg2;
- (void)detailSliderTrackingDidCancel:(MPDetailSlider *)arg1;
- (void)detailSliderTrackingDidEnd:(MPDetailSlider *)arg1;
- (void)detailSliderTrackingDidBegin:(MPDetailSlider *)arg1;
@end

@protocol MPDetailedScrubbing <NSObject>
- (struct CGRect)thumbHitRect;
- (float)maximumValue;
- (float)minimumValue;
- (float)value;
@end

@protocol MPMediaItemArrayPIDEncodableItem <NSObject>
- (Class)itemArrayCoderPIDDataCodingClass;
- (MPMediaLibrary *)mediaLibrary;
- (id)initWithPersistentID:(long long)arg1 library:(MPMediaLibrary *)arg2;
@end

@protocol MPMediaLibraryDataProvider <NSObject>
@property(readonly, nonatomic) id <MPArtworkDataSource> artworkDataSource;
@property(readonly, nonatomic) MPMediaEntityCache *entityCache;
@property(readonly, nonatomic) NSString *uniqueIdentifier;
@property(readonly, nonatomic) NSString *name;
- (void)loadQueryCriteria:(MPMediaQueryCriteria *)arg1 countOfCollectionsWithCompletionBlock:(void (^)(unsigned long long))arg2;
- (void)loadQueryCriteria:(MPMediaQueryCriteria *)arg1 countOfItemsWithCompletionBlock:(void (^)(unsigned long long))arg2;
- (void)loadQueryCriteria:(MPMediaQueryCriteria *)arg1 hasCollectionsWithCompletionBlock:(void (^)(_Bool))arg2;
- (void)loadQueryCriteria:(MPMediaQueryCriteria *)arg1 hasItemsWithCompletionBlock:(void (^)(_Bool))arg2;
- (id <MPMediaLibraryResultSet>)collectionResultSetForQueryCriteria:(MPMediaQueryCriteria *)arg1;
- (id <MPMediaLibraryResultSet>)itemResultSetForQueryCriteria:(MPMediaQueryCriteria *)arg1;
- (void)loadProperties:(NSSet *)arg1 ofCollectionWithIdentifier:(long long)arg2 groupingType:(long long)arg3 completionBlock:(void (^)(NSDictionary *))arg4;
- (void)loadProperties:(NSSet *)arg1 ofItemWithIdentifier:(long long)arg2 completionBlock:(void (^)(NSDictionary *))arg3;
- (void)loadValueForAggregateFunction:(NSString *)arg1 onCollectionsForProperty:(NSString *)arg2 queryCriteria:(MPMediaQueryCriteria *)arg3 completionBlock:(void (^)(id))arg4;
- (void)loadValueForAggregateFunction:(NSString *)arg1 onItemsForProperty:(NSString *)arg2 queryCriteria:(MPMediaQueryCriteria *)arg3 completionBlock:(void (^)(id))arg4;

@optional
@property(readonly, nonatomic) NSString *syncValidity;
@property(readonly, nonatomic) NSSet *propertiesToCache;
@property(readonly, nonatomic) _Bool requiresAuthentication;
- (void)setLibraryContainerFilterPredicatesWithCloudFilteringType:(long long)arg1 additionalFilterPredicates:(NSArray *)arg2;
- (void)setLibraryEntityFilterPredicatesWithCloudFilteringType:(long long)arg1 additionalFilterPredicates:(NSArray *)arg2;
- (void)enumerateEntityChangesAfterSyncAnchor:(NSString *)arg1 maximumRevisionType:(int)arg2 itemBlock:(void (^)(long long, NSString *, int, _Bool *))arg3 collectionBlock:(void (^)(long long, long long, NSString *, int, _Bool *))arg4;
- (void)disconnect;
- (void)connectWithAuthenticationData:(NSData *)arg1 completionBlock:(void (^)(_Bool, NSError *))arg2 progressHandler:(void (^)(float))arg3;
- (void)enumerateCollectionIdentifiersForQueryCriteria:(MPMediaQueryCriteria *)arg1 ordered:(_Bool)arg2 cancelBlock:(_Bool (^)(void))arg3 usingBlock:(void (^)(long long, NSDictionary *, _Bool *))arg4;
- (void)enumerateItemIdentifiersForQueryCriteria:(MPMediaQueryCriteria *)arg1 ordered:(_Bool)arg2 cancelBlock:(_Bool (^)(void))arg3 usingBlock:(void (^)(long long, _Bool *))arg4;
@end

@protocol MPMediaLibraryDataProviderPrivate <MPMediaLibraryDataProvider>

@optional
@property(readonly, nonatomic) _Bool companionDeviceActiveStoreAccountIsDynamiteEligible;
@property(readonly, nonatomic) NSArray *localizedSectionIndexTitles;
@property(readonly, nonatomic) id <MPArtworkDataSource> completeMyCollectionArtworkDataSource;
@property(readonly, nonatomic) NSArray *preferredSubtitleLanguages;
@property(readonly, nonatomic) NSArray *preferredAudioLanguages;
@property(readonly, nonatomic) _Bool isGeniusEnabled;
@property(readonly, nonatomic) NSString *databasePath;
- (MIPMultiverseIdentifier *)multiverseIdentifierForCollectionWithPersistentID:(long long)arg1 groupingType:(long long)arg2;
- (MIPMultiverseIdentifier *)multiverseIdentifierForTrackWithPersistentID:(long long)arg1;
- (_Bool)setValue:(id)arg1 forDatabaseProperty:(NSString *)arg2;
- (id)valueForDatabaseProperty:(NSString *)arg1;
- (NSString *)localizedSectionHeaderForSectionIndex:(unsigned long long)arg1;
- (void)updateEntitesToCurrentRevision;
- (_Bool)supportsEntityChangeTrackingForMediaEntityType:(unsigned long long)arg1 collectionGroupingType:(long long)arg2 dataProviderClass:(out Class *)arg3;
- (void)populateLocationPropertiesOfItemWithIdentifier:(long long)arg1 withPath:(NSString *)arg2;
- (void)releaseGeniusClusterPlaylist:(void *)arg1;
- (long long *)generateItemIdentifiersForGeniusClusterPlaylist:(void *)arg1 count:(unsigned long long *)arg2 error:(id *)arg3;
- (void *)createGeniusClusterPlaylistWithSeedItemIdentifiers:(long long *)arg1 count:(unsigned long long)arg2 error:(id *)arg3;
- (void)seedPlaylistWithIdentifier:(long long)arg1 withItemWithIdentifier:(long long)arg2 completionBlock:(void (^)(_Bool, NSError *))arg3;
- (void)moveItemFromIndex:(unsigned long long)arg1 toIndex:(unsigned long long)arg2 inPlaylistWithIdentifier:(long long)arg3 completionBlock:(void (^)(_Bool))arg4;
- (void)removeAllItemsInPlaylistWithIdentifier:(long long)arg1;
- (void)removeItemsWithIdentifiers:(long long *)arg1 atFilteredIndexes:(NSIndexSet *)arg2 inPlaylistWithIdentifier:(long long)arg3 completionBlock:(void (^)(_Bool))arg4;
- (void)addItemsWithIdentifiers:(long long *)arg1 count:(unsigned long long)arg2 toPlaylistWithIdentifier:(long long)arg3 completionBlock:(void (^)(_Bool))arg4;
- (void)addItemWithIdentifier:(long long)arg1 toPlaylistWithIdentifier:(long long)arg2 completionBlock:(void (^)(_Bool))arg3;
- (_Bool)removePlaylistWithIdentifier:(long long)arg1;
- (_Bool)removeItemsWithIdentifiers:(long long *)arg1 count:(unsigned long long)arg2 hideFromPurchaseHistory:(_Bool)arg3;
- (long long)addPlaylistWithValuesForProperties:(NSDictionary *)arg1;
- (void)setValue:(id)arg1 forProperty:(NSString *)arg2 ofCollectionWithIdentifier:(long long)arg3 groupingType:(long long)arg4 completionBlock:(void (^)(_Bool, NSError *))arg5;
- (void)setValue:(id)arg1 forProperty:(NSString *)arg2 ofPlaylistWithIdentifier:(long long)arg3 completionBlock:(void (^)(_Bool, NSError *))arg4;
- (void)setValue:(id)arg1 forProperty:(NSString *)arg2 ofItemWithIdentifier:(long long)arg3 completionBlock:(void (^)(_Bool, NSError *))arg4;
- (_Bool)isCurrentThreadInTransaction;
- (void)performReadTransactionWithBlock:(void (^)(void))arg1;
- (_Bool)performTransactionWithBlock:(_Bool (^)(void))arg1;
- (long long)itemPersistentIDForStoreID:(long long)arg1;
- (_Bool)collectionExistsWithStoreID:(long long)arg1 groupingType:(long long)arg2 existentPID:(unsigned long long *)arg3;
- (_Bool)collectionExistsWithName:(NSString *)arg1 groupingType:(long long)arg2 existentPID:(unsigned long long *)arg3;
- (_Bool)collectionExistsContainedWithinPersistentIDs:(const unsigned long long *)arg1 count:(unsigned long long)arg2 groupingType:(long long)arg3 existentPID:(unsigned long long *)arg4;
- (_Bool)collectionExistsWithPersistentID:(unsigned long long)arg1 groupingType:(long long)arg2;
- (_Bool)playlistExistsWithPersistentID:(unsigned long long)arg1;
- (_Bool)itemExistsWithPersistentID:(unsigned long long)arg1;
- (_Bool)hasUbiquitousBookmarkableItems;
- (_Bool)hasGeniusMixes;
- (_Bool)hasMediaOfType:(unsigned long long)arg1;
- (NSDate *)lastModifiedDate;
@end

@protocol MPMediaPlayback
@property(nonatomic) float currentPlaybackRate;
@property(nonatomic) double currentPlaybackTime;
@property(readonly, nonatomic) _Bool isPreparedToPlay;
- (void)endSeeking;
- (void)beginSeekingBackward;
- (void)beginSeekingForward;
- (void)stop;
- (void)pause;
- (void)play;
- (void)prepareToPlay;
@end

@protocol MPMovieViewDelegate <NSObject>

@optional
- (void)movieView:(MPMovieView *)arg1 willMoveToSuperview:(UIView *)arg2;
- (void)movieViewDidMoveToWindow:(MPMovieView *)arg1;
- (void)movieView:(MPMovieView *)arg1 willMoveToWindow:(UIWindow *)arg2;
@end

@protocol MPMusicPlayerController

@optional
- (void)pauseWithFadeoutDuration:(NSNumber *)arg1;
- (void)setCurrentPlaybackRate:(NSNumber *)arg1;
- (NSNumber *)currentPlaybackRate;
- (void)setCurrentPlaybackTime:(NSNumber *)arg1;
- (NSNumber *)currentPlaybackTime;
- (void)endSeeking;
- (void)beginSeekingBackward;
- (void)beginSeekingForward;
- (void)setCurrentChapterIndex:(NSNumber *)arg1;
- (NSNumber *)currentChapterIndex;
- (void)skipToPreviousChapter;
- (void)skipToNextChapter;
- (NSData *)skipInDirection:(NSNumber *)arg1;
- (void)skipToBeginningOrPreviousItem;
- (void)skipToPreviousItem;
- (void)skipToBeginning;
- (void)skipToNextItem;
- (void)stop;
- (void)pause;
- (void)shuffle;
- (void)play;
- (void)prepareToPlay;
- (NSNumber *)isNowPlayingItemFromGeniusMix;
- (NSNumber *)unshuffledIndexOfNowPlayingItem;
- (NSNumber *)indexOfNowPlayingItem;
- (MPMediaItem *)nowPlayingItem;
- (void)setNowPlayingItem:(MPMediaItem *)arg1;
- (NSNumber *)playbackSpeed;
- (void)setPlaybackSpeed:(NSNumber *)arg1;
- (void)setShuffleMode:(NSNumber *)arg1;
- (NSNumber *)shuffleMode;
- (void)setRepeatMode:(NSNumber *)arg1;
- (NSNumber *)repeatMode;
- (NSNumber *)numberOfItems;
- (NSNumber *)playbackState;
- (NSNumber *)allowsBackgroundVideo;
- (void)setAllowsBackgroundVideo:(NSNumber *)arg1;
- (void)setUseApplicationSpecificQueue:(NSNumber *)arg1;
- (void)prepareQueueForPlayback;
- (MPMediaItem *)nowPlayingItemAtIndex:(NSNumber *)arg1;
- (MPRadioStation *)queueAsRadioStation;
- (MPMediaQuery *)queueAsQuery;
- (void)playItem:(MPMediaItem *)arg1;
- (void)setQueueWithRadioStation:(MPRadioStation *)arg1;
- (void)setQueueWithGeniusMixPlaylist:(MPMediaPlaylist *)arg1;
- (NSNumber *)setQueueWithSeedItems:(NSArray *)arg1;
- (void)setQueueWithItemCollection:(MPMediaItemCollection *)arg1;
- (void)setQueueWithQuery:(MPMediaQuery *)arg1 firstItem:(MPMediaItem *)arg2;
- (void)setQueueWithQuery:(MPMediaQuery *)arg1;
- (NSNumber *)isGeniusAvailableForSeedItems:(NSArray *)arg1;
- (NSNumber *)isGeniusAvailable;
- (void)registerForServerDiedNotifications;
- (NSNumber *)serverIsAlive;
@end

@protocol MPPProtobufferCoding <NSObject>
- (PBCodable *)protobufferEncodableObject;
- (id <MPPProtobufferCoding>)initWithProtobufferDecodableObject:(PBCodable *)arg1;
@end

@protocol MPRemoteCommandDelegate <NSObject>

@optional
- (void)remoteCommandDidMutatePropagatableProperty:(MPRemoteCommand *)arg1;
@end

@protocol MPServiceMediaPickerController <NSObject>
- (void)serviceMediaPickerSetMediaTypes:(unsigned long long)arg1;
- (void)serviceMediaPickerSetShowsCloudItems:(_Bool)arg1;
- (void)serviceMediaPickerSetPrompt:(NSString *)arg1;
- (void)serviceMediaPickerSetAllowsPickingMultipleItems:(_Bool)arg1;
@end

@protocol MPStoreDownloadManagerObserver <NSObject>

@optional
- (void)downloadManager:(MPStoreDownloadManager *)arg1 downloadPurchaseDidFinish:(MPStoreDownload *)arg2;
- (void)downloadManager:(MPStoreDownloadManager *)arg1 downloadDidProgress:(MPStoreDownload *)arg2;
- (void)downloadManager:(MPStoreDownloadManager *)arg1 downloadDidFinish:(MPStoreDownload *)arg2;
- (void)downloadManager:(MPStoreDownloadManager *)arg1 didAddDownloads:(NSArray *)arg2 removeDownloads:(NSArray *)arg3;
@end

@protocol MPSwipableViewDelegate <NSObject>

@optional
- (void)swipableViewHadActivity:(MPSwipableView *)arg1;
- (void)swipableView:(MPSwipableView *)arg1 pinchedToScale:(double)arg2 withVelocity:(double)arg3;
- (void)swipableView:(MPSwipableView *)arg1 tappedWithCount:(unsigned long long)arg2;
- (void)swipableView:(MPSwipableView *)arg1 tappedWithCount:(unsigned long long)arg2 atLocation:(struct CGPoint)arg3;
- (void)swipableView:(MPSwipableView *)arg1 swipedInDirection:(long long)arg2;
- (UIView *)swipableView:(MPSwipableView *)arg1 overrideHitTest:(struct CGPoint)arg2 withEvent:(UIEvent *)arg3;
- (void)swipableView:(MPSwipableView *)arg1 willMoveToWindow:(UIWindow *)arg2;
- (void)swipableView:(MPSwipableView *)arg1 didMoveToSuperview:(UIView *)arg2;
- (void)swipableView:(MPSwipableView *)arg1 willMoveToSuperview:(UIView *)arg2;
@end

@protocol MPTransportControlsTarget <NSObject>

@optional
- (void)transportControlsDidResize:(MPTransportControls *)arg1;
- (_Bool)transportControls:(MPTransportControls *)arg1 tappedButtonPart:(unsigned long long)arg2;
- (_Bool)transportControls:(MPTransportControls *)arg1 releasedHeldButtonPart:(unsigned long long)arg2;
- (_Bool)transportControls:(MPTransportControls *)arg1 heldButtonPart:(unsigned long long)arg2;
@end

@protocol MPVideoControllerProtocol <MPControllerProtocol>
@property(nonatomic) _Bool autoPlayWhenLikelyToKeepUp;
@property(nonatomic) unsigned long long visibleParts;
@property(readonly, retain, nonatomic) MPVideoView *videoView;
@property(readonly, retain, nonatomic) UIView<MPVideoOverlay> *videoOverlayView;
@property(readonly, nonatomic) _Bool viewControllerWillRequestExit;
@property(nonatomic) _Bool TVOutEnabled;
@property(nonatomic) unsigned long long scaleMode;
@property(retain, nonatomic) UIImage *posterImage;
@property(nonatomic, getter=isFullscreen) _Bool fullscreen;
@property(nonatomic) unsigned long long itemTypeOverride;
@property(nonatomic) _Bool inlinePlaybackUsesTVOut;
@property(readonly, nonatomic) unsigned int hostedWindowContextID;
@property(readonly, nonatomic) _UIHostedWindow *hostedWindow;
@property(nonatomic) _Bool displayPlaybackErrorAlerts;
@property(nonatomic) unsigned long long disabledParts;
@property(nonatomic) _Bool disableControlsAutohide;
@property(nonatomic) _Bool disableAutoRotation;
@property(nonatomic) unsigned long long desiredParts;
@property(nonatomic) _Bool controlsOverlayVisible;
@property(nonatomic) _Bool canShowControlsOverlay;
@property(readonly, nonatomic) _Bool canChangeScaleMode;
@property(nonatomic) _Bool canAnimateControlsOverlay;
@property(retain, nonatomic) UIColor *backstopColor;
@property(readonly, nonatomic) UIView *backgroundView;
@property(nonatomic) _Bool attemptAutoPlayWhenControlsHidden;
@property(nonatomic) int artworkImageStyle;
@property(nonatomic) _Bool alwaysAllowHidingControlsOverlay;
@property(nonatomic) _Bool allowsWirelessPlayback;
@property(nonatomic) _Bool allowsDetailScrubbing;
- (void)setOwnsStatusBar:(_Bool)arg1;
- (void)showAlternateTracksController:(NSSet *)arg1;
- (void)setVisibleParts:(unsigned long long)arg1 animate:(_Bool)arg2;
- (void)setUseHostedWindowWhenFullscreen:(_Bool)arg1;
- (void)setScaleModeOverride:(unsigned long long)arg1 animated:(_Bool)arg2;
- (void)setFullscreen:(_Bool)arg1 animated:(_Bool)arg2;
- (void)setDesiredParts:(unsigned long long)arg1 animate:(_Bool)arg2;
- (void)setControlsOverlayVisible:(_Bool)arg1 animate:(_Bool)arg2 force:(_Bool)arg3;
- (void)setControlsOverlayVisible:(_Bool)arg1 animate:(_Bool)arg2;
- (void)setControlsNeedLayout;
- (void)setClosedCaptions:(NSArray *)arg1;
- (void)prepareToDisplayVideo;
- (void)exitFullscreen;
- (void)displayVideoView;
- (_Bool)canHideOverlay:(_Bool)arg1;
@end

@protocol MPVideoOverlay
@property(nonatomic) unsigned long long disabledParts;
@property(nonatomic) unsigned long long visibleParts;
@property(nonatomic) unsigned long long desiredParts;
@property(retain, nonatomic) MPAVItem *item;
@property(nonatomic) __weak id <MPVideoOverlayDelegate> delegate;
@property(readonly, retain, nonatomic) UINavigationBar *navigationBar;
@property(retain, nonatomic) MPAVController *player;
@property(nonatomic) _Bool navigationBarHidden;
@property(nonatomic) _Bool allowsWirelessPlayback;
@property(nonatomic) __weak id <MPVideoControllerProtocol> videoViewController;
- (void)hideAlternateTracks;
- (void)showAlternateTracks;
- (void)setVisibleParts:(unsigned long long)arg1 animate:(_Bool)arg2;
- (void)setDesiredParts:(unsigned long long)arg1 animate:(_Bool)arg2;
- (void)stopTicking;
- (void)startTicking;
- (_Bool)updateTimeBasedValues;
@end

@protocol MPVideoOverlayDelegate <NSObject>

@optional
- (_Bool)overlayShouldAcceptSkipBackwardEvent:(UIView<MPVideoOverlay> *)arg1;
- (_Bool)overlayShouldAcceptSkipForwardEvent:(UIView<MPVideoOverlay> *)arg1;
- (double)overlay:(UIView<MPVideoOverlay> *)arg1 interpretDuration:(double)arg2;
- (double)overlay:(UIView<MPVideoOverlay> *)arg1 interpretCurrentTime:(double)arg2;
- (void)overlay:(UIView<MPVideoOverlay> *)arg1 didEndUserEvent:(long long)arg2;
- (void)overlay:(UIView<MPVideoOverlay> *)arg1 didCancelUserEvent:(long long)arg2;
- (void)overlay:(UIView<MPVideoOverlay> *)arg1 didBeginUserEvent:(long long)arg2;
- (void)overlayTappedFullscreenButton:(UIView<MPVideoOverlay> *)arg1;
- (void)overlayDidDismissAlternateTracksPopover:(UIView<MPVideoOverlay> *)arg1;
- (void)overlayTappedScaleModeButton:(UIView<MPVideoOverlay> *)arg1;
- (void)overlayDidEndScrubbing:(UIView<MPVideoOverlay> *)arg1;
- (void)overlayDidBeginScrubbing:(UIView<MPVideoOverlay> *)arg1;
- (void)overlayTappedBackButton:(UIView<MPVideoOverlay> *)arg1;
@end

@protocol MPVolumeControllerDelegate <NSObject>

@optional
- (void)volumeController:(MPVolumeController *)arg1 EUVolumeLimitEnforcedDidChange:(_Bool)arg2;
- (void)volumeController:(MPVolumeController *)arg1 EUVolumeLimitDidChange:(float)arg2;
- (void)volumeController:(MPVolumeController *)arg1 mutedStateDidChange:(_Bool)arg2;
- (void)volumeController:(MPVolumeController *)arg1 volumeWarningStateDidChange:(long long)arg2;
- (void)volumeController:(MPVolumeController *)arg1 volumeValueDidChange:(float)arg2;
@end

@protocol NSCoding
- (id)initWithCoder:(NSCoder *)arg1;
- (void)encodeWithCoder:(NSCoder *)arg1;
@end

@protocol NSCopying
- (id)copyWithZone:(struct _NSZone *)arg1;
@end

@protocol NSMutableCopying
- (id)mutableCopyWithZone:(struct _NSZone *)arg1;
@end

@protocol NSObject
@property(readonly, copy) NSString *description;
@property(readonly) Class superclass;
@property(readonly) unsigned long long hash;
- (struct _NSZone *)zone;
- (unsigned long long)retainCount;
- (id)autorelease;
- (oneway void)release;
- (id)retain;
- (_Bool)respondsToSelector:(SEL)arg1;
- (_Bool)conformsToProtocol:(Protocol *)arg1;
- (_Bool)isMemberOfClass:(Class)arg1;
- (_Bool)isKindOfClass:(Class)arg1;
- (_Bool)isProxy;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2 withObject:(id)arg3;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2;
- (id)performSelector:(SEL)arg1;
- (id)self;
- (Class)class;
- (_Bool)isEqual:(id)arg1;

@optional
@property(readonly, copy) NSString *debugDescription;
@end

@protocol NSSecureCoding <NSCoding>
+ (_Bool)supportsSecureCoding;
@end

@protocol NSURLSessionDataDelegate <NSURLSessionTaskDelegate>

@optional
- (void)URLSession:(NSURLSession *)arg1 dataTask:(NSURLSessionDataTask *)arg2 willCacheResponse:(NSCachedURLResponse *)arg3 completionHandler:(void (^)(NSCachedURLResponse *))arg4;
- (void)URLSession:(NSURLSession *)arg1 dataTask:(NSURLSessionDataTask *)arg2 didReceiveData:(NSData *)arg3;
- (void)URLSession:(NSURLSession *)arg1 dataTask:(NSURLSessionDataTask *)arg2 didBecomeDownloadTask:(NSURLSessionDownloadTask *)arg3;
- (void)URLSession:(NSURLSession *)arg1 dataTask:(NSURLSessionDataTask *)arg2 didReceiveResponse:(NSURLResponse *)arg3 completionHandler:(void (^)(long long))arg4;
@end

@protocol NSURLSessionDelegate <NSObject>

@optional
- (void)URLSessionDidFinishEventsForBackgroundURLSession:(NSURLSession *)arg1;
- (void)URLSession:(NSURLSession *)arg1 didReceiveChallenge:(NSURLAuthenticationChallenge *)arg2 completionHandler:(void (^)(long long, NSURLCredential *))arg3;
- (void)URLSession:(NSURLSession *)arg1 didBecomeInvalidWithError:(NSError *)arg2;
@end

@protocol NSURLSessionTaskDelegate <NSURLSessionDelegate>

@optional
- (void)URLSession:(NSURLSession *)arg1 task:(NSURLSessionTask *)arg2 didCompleteWithError:(NSError *)arg3;
- (void)URLSession:(NSURLSession *)arg1 task:(NSURLSessionTask *)arg2 didSendBodyData:(long long)arg3 totalBytesSent:(long long)arg4 totalBytesExpectedToSend:(long long)arg5;
- (void)URLSession:(NSURLSession *)arg1 task:(NSURLSessionTask *)arg2 needNewBodyStream:(void (^)(NSInputStream *))arg3;
- (void)URLSession:(NSURLSession *)arg1 task:(NSURLSessionTask *)arg2 didReceiveChallenge:(NSURLAuthenticationChallenge *)arg3 completionHandler:(void (^)(long long, NSURLCredential *))arg4;
- (void)URLSession:(NSURLSession *)arg1 task:(NSURLSessionTask *)arg2 willPerformHTTPRedirection:(NSHTTPURLResponse *)arg3 newRequest:(NSURLRequest *)arg4 completionHandler:(void (^)(NSURLRequest *))arg5;
@end

@protocol SSAuthorizationRequestDelegate <SSRequestDelegate>

@optional
- (void)authorizationRequest:(SSAuthorizationRequest *)arg1 didReceiveResponse:(SSURLConnectionResponse *)arg2;
@end

@protocol SSDownloadHandlerDelegate <NSObject>

@optional
- (void)downloadHandler:(SSDownloadHandler *)arg1 handleAuthenticationSession:(SSDownloadAuthenticationSession *)arg2;
- (_Bool)downloadHandler:(SSDownloadHandler *)arg1 pauseSession:(SSDownloadSession *)arg2;
- (void)downloadHandler:(SSDownloadHandler *)arg1 cancelSession:(SSDownloadSession *)arg2;
- (void)downloadHandler:(SSDownloadHandler *)arg1 handleSession:(SSDownloadHandlerSession *)arg2;
- (void)downloadHandlerDidDisconnect:(SSDownloadHandler *)arg1;
@end

@protocol SSDownloadManagerObserver <NSObject>

@optional
- (void)downloadManagerNetworkUsageDidChange:(SSDownloadManager *)arg1;
- (void)downloadManagerDownloadsDidChange:(SSDownloadManager *)arg1;
- (void)downloadManagerActiveDownloadsDidChange:(SSDownloadManager *)arg1;
- (void)downloadManager:(SSDownloadManager *)arg1 downloadStatesDidChange:(NSArray *)arg2;
@end

@protocol SSDownloadManagerObserverPrivate <SSDownloadManagerObserver>

@optional
- (void)downloadManager:(SSDownloadManager *)arg1 downloadsDidChange:(NSSet *)arg2;
@end

@protocol SSPurchaseManagerDelegate <NSObject>

@optional
- (void)purchaseManager:(SSPurchaseManager *)arg1 didFinishPurchasesWithResponses:(NSArray *)arg2;
@end

@protocol SSRequestDelegate <NSObject>

@optional
- (void)requestDidFinish:(SSRequest *)arg1;
- (void)request:(SSRequest *)arg1 didFailWithError:(NSError *)arg2;
@end

@protocol UIActionSheetDelegate <NSObject>

@optional
- (void)actionSheet:(UIActionSheet *)arg1 didDismissWithButtonIndex:(long long)arg2;
- (void)actionSheet:(UIActionSheet *)arg1 willDismissWithButtonIndex:(long long)arg2;
- (void)didPresentActionSheet:(UIActionSheet *)arg1;
- (void)willPresentActionSheet:(UIActionSheet *)arg1;
- (void)actionSheetCancel:(UIActionSheet *)arg1;
- (void)actionSheet:(UIActionSheet *)arg1 clickedButtonAtIndex:(long long)arg2;
@end

@protocol UIAlertViewDelegate <NSObject>

@optional
- (_Bool)alertViewShouldEnableFirstOtherButton:(UIAlertView *)arg1;
- (void)alertView:(UIAlertView *)arg1 didDismissWithButtonIndex:(long long)arg2;
- (void)alertView:(UIAlertView *)arg1 willDismissWithButtonIndex:(long long)arg2;
- (void)didPresentAlertView:(UIAlertView *)arg1;
- (void)willPresentAlertView:(UIAlertView *)arg1;
- (void)alertViewCancel:(UIAlertView *)arg1;
- (void)alertView:(UIAlertView *)arg1 clickedButtonAtIndex:(long long)arg2;
@end

@protocol UIGestureRecognizerDelegate <NSObject>

@optional
- (_Bool)gestureRecognizer:(UIGestureRecognizer *)arg1 shouldReceiveTouch:(UITouch *)arg2;
- (_Bool)gestureRecognizer:(UIGestureRecognizer *)arg1 shouldBeRequiredToFailByGestureRecognizer:(UIGestureRecognizer *)arg2;
- (_Bool)gestureRecognizer:(UIGestureRecognizer *)arg1 shouldRequireFailureOfGestureRecognizer:(UIGestureRecognizer *)arg2;
- (_Bool)gestureRecognizer:(UIGestureRecognizer *)arg1 shouldRecognizeSimultaneouslyWithGestureRecognizer:(UIGestureRecognizer *)arg2;
- (_Bool)gestureRecognizerShouldBegin:(UIGestureRecognizer *)arg1;
@end

@protocol UIModalViewDelegate <NSObject>

@optional
- (void)modalView:(UIModalView *)arg1 didDismissWithButtonIndex:(long long)arg2;
- (void)modalView:(UIModalView *)arg1 willDismissWithButtonIndex:(long long)arg2;
- (void)didPresentModalView:(UIModalView *)arg1;
- (void)willPresentModalView:(UIModalView *)arg1;
- (void)modalViewCancel:(UIModalView *)arg1;
- (void)modalView:(UIModalView *)arg1 clickedButtonAtIndex:(long long)arg2;
@end

@protocol UIPopoverControllerDelegate <NSObject>

@optional
- (void)popoverController:(UIPopoverController *)arg1 willRepositionPopoverToRect:(inout struct CGRect *)arg2 inView:(inout id *)arg3;
- (void)popoverControllerDidDismissPopover:(UIPopoverController *)arg1;
- (_Bool)popoverControllerShouldDismissPopover:(UIPopoverController *)arg1;
@end

@protocol UIScrollViewDelegate <NSObject>

@optional
- (void)scrollViewDidScrollToTop:(UIScrollView *)arg1;
- (_Bool)scrollViewShouldScrollToTop:(UIScrollView *)arg1;
- (void)scrollViewDidEndZooming:(UIScrollView *)arg1 withView:(UIView *)arg2 atScale:(double)arg3;
- (void)scrollViewWillBeginZooming:(UIScrollView *)arg1 withView:(UIView *)arg2;
- (UIView *)viewForZoomingInScrollView:(UIScrollView *)arg1;
- (void)scrollViewDidEndScrollingAnimation:(UIScrollView *)arg1;
- (void)scrollViewDidEndDecelerating:(UIScrollView *)arg1;
- (void)scrollViewWillBeginDecelerating:(UIScrollView *)arg1;
- (void)scrollViewDidEndDragging:(UIScrollView *)arg1 willDecelerate:(_Bool)arg2;
- (void)scrollViewWillEndDragging:(UIScrollView *)arg1 withVelocity:(struct CGPoint)arg2 targetContentOffset:(inout struct CGPoint *)arg3;
- (void)scrollViewWillBeginDragging:(UIScrollView *)arg1;
- (void)scrollViewDidZoom:(UIScrollView *)arg1;
- (void)scrollViewDidScroll:(UIScrollView *)arg1;
@end

@protocol UITableViewDataSource <NSObject>
- (UITableViewCell *)tableView:(UITableView *)arg1 cellForRowAtIndexPath:(NSIndexPath *)arg2;
- (long long)tableView:(UITableView *)arg1 numberOfRowsInSection:(long long)arg2;

@optional
- (void)tableView:(UITableView *)arg1 moveRowAtIndexPath:(NSIndexPath *)arg2 toIndexPath:(NSIndexPath *)arg3;
- (void)tableView:(UITableView *)arg1 commitEditingStyle:(long long)arg2 forRowAtIndexPath:(NSIndexPath *)arg3;
- (long long)tableView:(UITableView *)arg1 sectionForSectionIndexTitle:(NSString *)arg2 atIndex:(long long)arg3;
- (NSArray *)sectionIndexTitlesForTableView:(UITableView *)arg1;
- (_Bool)tableView:(UITableView *)arg1 canMoveRowAtIndexPath:(NSIndexPath *)arg2;
- (_Bool)tableView:(UITableView *)arg1 canEditRowAtIndexPath:(NSIndexPath *)arg2;
- (NSString *)tableView:(UITableView *)arg1 titleForFooterInSection:(long long)arg2;
- (NSString *)tableView:(UITableView *)arg1 titleForHeaderInSection:(long long)arg2;
- (long long)numberOfSectionsInTableView:(UITableView *)arg1;
@end

@protocol UITableViewDelegate <NSObject, UIScrollViewDelegate>

@optional
- (void)tableView:(UITableView *)arg1 performAction:(SEL)arg2 forRowAtIndexPath:(NSIndexPath *)arg3 withSender:(id)arg4;
- (_Bool)tableView:(UITableView *)arg1 canPerformAction:(SEL)arg2 forRowAtIndexPath:(NSIndexPath *)arg3 withSender:(id)arg4;
- (_Bool)tableView:(UITableView *)arg1 shouldShowMenuForRowAtIndexPath:(NSIndexPath *)arg2;
- (long long)tableView:(UITableView *)arg1 indentationLevelForRowAtIndexPath:(NSIndexPath *)arg2;
- (NSIndexPath *)tableView:(UITableView *)arg1 targetIndexPathForMoveFromRowAtIndexPath:(NSIndexPath *)arg2 toProposedIndexPath:(NSIndexPath *)arg3;
- (void)tableView:(UITableView *)arg1 didEndEditingRowAtIndexPath:(NSIndexPath *)arg2;
- (void)tableView:(UITableView *)arg1 willBeginEditingRowAtIndexPath:(NSIndexPath *)arg2;
- (_Bool)tableView:(UITableView *)arg1 shouldIndentWhileEditingRowAtIndexPath:(NSIndexPath *)arg2;
- (NSArray *)tableView:(UITableView *)arg1 editActionsForRowAtIndexPath:(NSIndexPath *)arg2;
- (NSString *)tableView:(UITableView *)arg1 titleForDeleteConfirmationButtonForRowAtIndexPath:(NSIndexPath *)arg2;
- (long long)tableView:(UITableView *)arg1 editingStyleForRowAtIndexPath:(NSIndexPath *)arg2;
- (void)tableView:(UITableView *)arg1 didDeselectRowAtIndexPath:(NSIndexPath *)arg2;
- (void)tableView:(UITableView *)arg1 didSelectRowAtIndexPath:(NSIndexPath *)arg2;
- (NSIndexPath *)tableView:(UITableView *)arg1 willDeselectRowAtIndexPath:(NSIndexPath *)arg2;
- (NSIndexPath *)tableView:(UITableView *)arg1 willSelectRowAtIndexPath:(NSIndexPath *)arg2;
- (void)tableView:(UITableView *)arg1 didUnhighlightRowAtIndexPath:(NSIndexPath *)arg2;
- (void)tableView:(UITableView *)arg1 didHighlightRowAtIndexPath:(NSIndexPath *)arg2;
- (_Bool)tableView:(UITableView *)arg1 shouldHighlightRowAtIndexPath:(NSIndexPath *)arg2;
- (void)tableView:(UITableView *)arg1 accessoryButtonTappedForRowWithIndexPath:(NSIndexPath *)arg2;
- (long long)tableView:(UITableView *)arg1 accessoryTypeForRowWithIndexPath:(NSIndexPath *)arg2;
- (UIView *)tableView:(UITableView *)arg1 viewForFooterInSection:(long long)arg2;
- (UIView *)tableView:(UITableView *)arg1 viewForHeaderInSection:(long long)arg2;
- (double)tableView:(UITableView *)arg1 estimatedHeightForFooterInSection:(long long)arg2;
- (double)tableView:(UITableView *)arg1 estimatedHeightForHeaderInSection:(long long)arg2;
- (double)tableView:(UITableView *)arg1 estimatedHeightForRowAtIndexPath:(NSIndexPath *)arg2;
- (double)tableView:(UITableView *)arg1 heightForFooterInSection:(long long)arg2;
- (double)tableView:(UITableView *)arg1 heightForHeaderInSection:(long long)arg2;
- (double)tableView:(UITableView *)arg1 heightForRowAtIndexPath:(NSIndexPath *)arg2;
- (void)tableView:(UITableView *)arg1 didEndDisplayingFooterView:(UIView *)arg2 forSection:(long long)arg3;
- (void)tableView:(UITableView *)arg1 didEndDisplayingHeaderView:(UIView *)arg2 forSection:(long long)arg3;
- (void)tableView:(UITableView *)arg1 didEndDisplayingCell:(UITableViewCell *)arg2 forRowAtIndexPath:(NSIndexPath *)arg3;
- (void)tableView:(UITableView *)arg1 willDisplayFooterView:(UIView *)arg2 forSection:(long long)arg3;
- (void)tableView:(UITableView *)arg1 willDisplayHeaderView:(UIView *)arg2 forSection:(long long)arg3;
- (void)tableView:(UITableView *)arg1 willDisplayCell:(UITableViewCell *)arg2 forRowAtIndexPath:(NSIndexPath *)arg3;
@end

@interface _MPNonRetainingDelayedPerformContext : NSObject
{
    id target;
    SEL selector;
    id argument;
    NSRunLoop *rl;
    NSArray *modes;
    struct __CFRunLoopTimer *dperf;
    struct __CFArray *dperfs;
}

@end

@interface MPMovieTVHUDView : UIView
{
    unsigned long long _currentState;
    UIImageView *_playbackMode;
    MPAVController *_player;
}

@property(retain, nonatomic) MPAVController *player; // @synthesize player=_player;
- (void).cxx_destruct;
- (void)_playbackStateDidChangeNotification:(id)arg1;
- (void)animationDidStop:(id)arg1;
- (void)_fadeOut;
- (void)_changeState;
- (void)dealloc;
- (id)initWithFrame:(struct CGRect)arg1;

@end

@interface MPUITransitionViewRunner : NSObject
{
}

+ (void)performTransition:(int)arg1 withTransitionView:(id)arg2 fromViewController:(id)arg3 toViewController:(id)arg4 completion:(CDUnknownBlockType)arg5;
+ (id)sharedInstance;
- (void)transitionViewDidComplete:(id)arg1 fromView:(id)arg2 toView:(id)arg3;

@end

@interface MPMoviePlayerController : NSObject <MPMediaPlayback>
{
    id _implementation;
}

+ (void)allInstancesResignActive;
- (void).cxx_destruct;
- (_Bool)_isReadyForDisplay;
@property(readonly, nonatomic) _Bool readyForDisplay;
- (void)_resignActive;
@property(nonatomic) float currentPlaybackRate;
@property(nonatomic) double currentPlaybackTime;
- (double)endPlaybackTime;
- (void)setEndPlaybackTime:(double)arg1;
- (double)initialPlaybackTime;
- (void)setInitialPlaybackTime:(double)arg1;
- (struct CGSize)naturalSize;
- (double)playableDuration;
- (double)duration;
- (long long)movieSourceType;
- (void)setMovieSourceType:(long long)arg1;
- (unsigned long long)movieMediaTypes;
- (void)skipToPreviousItem;
- (void)skipToBeginning;
- (void)skipToNextItem;
- (void)endSeeking;
- (void)beginSeekingBackward;
- (void)beginSeekingForward;
- (void)stop;
- (void)pause;
- (void)play;
@property(readonly, nonatomic) _Bool isPreparedToPlay;
- (void)prepareToPlay;
- (_Bool)isAirPlayVideoActive;
- (void)setAllowsAirPlay:(_Bool)arg1;
- (_Bool)allowsAirPlay;
@property(nonatomic) long long scalingMode;
- (void)setFullscreen:(_Bool)arg1 animated:(_Bool)arg2;
@property(nonatomic, getter=isFullscreen) _Bool fullscreen;
@property(nonatomic) _Bool shouldAutoplay;
@property(nonatomic) long long repeatMode;
@property(nonatomic) long long controlStyle;
@property(readonly, nonatomic) unsigned long long loadState;
@property(readonly, nonatomic) long long playbackState;
@property(readonly, nonatomic) UIView *backgroundView;
@property(readonly, nonatomic) UIView *view;
@property(copy, nonatomic) NSURL *contentURL;
- (void)forwardInvocation:(id)arg1;
- (id)methodSignatureForSelector:(SEL)arg1;
- (void)dealloc;
- (id)init;
- (id)initWithPlayerItem:(id)arg1;
- (id)initWithAsset:(id)arg1;
- (id)initWithContentURL:(id)arg1;

@end

@interface MPMovieThumbnailRequest : NSObject
{
    NSArray *_times;
    long long _timeOption;
}

@property(nonatomic) long long timeOption; // @synthesize timeOption=_timeOption;
@property(retain, nonatomic) NSArray *times; // @synthesize times=_times;
- (void).cxx_destruct;

@end

@interface MPMovieView : UIView
{
    id <MPMovieViewDelegate> _delegate;
}

@property(nonatomic) __weak id <MPMovieViewDelegate> delegate; // @synthesize delegate=_delegate;
- (void).cxx_destruct;
- (void)willMoveToSuperview:(id)arg1;
- (void)didMoveToWindow;
- (void)willMoveToWindow:(id)arg1;

@end

@interface MPMoviePlayerControllerNew : NSObject <MPMovieViewDelegate, MPMediaPlayback>
{
    long long _additionalButtons;
    NSMutableSet *_asyncImageGenerators;
    long long _controlStyle;
    float _currentPlaybackRate;
    id <MPMoviePlayerControllerDelegate> _delegate;
    NSDictionary *_HTTPHeaderFields;
    MPMoviePlayerController *_moviePlayer;
    NSArray *_movies;
    _Bool _moviesNeedReload;
    long long _movieSourceType;
    MPMovieView *_movieView;
    MPNowPlayingObserver *_nowPlayingObserver;
    NSError *_playbackError;
    MPAVController *_player;
    NSMutableArray *_queuedThumbnailRequests;
    long long _repeatMode;
    unsigned long long _stateBeforeSettingPlaybackTime;
    MPInlineVideoController *_videoViewController;
    unsigned long long _finishNotificationsPosted;
    _Bool _shouldAutoplay;
    _Bool _useApplicationAudioSession;
    _Bool _setUseApplicationAudioSessionWhenPlaybackEnds;
    _Bool _preparedQueue;
    _Bool _didAppear;
    _Bool _ignorePlaybackStateChanges;
    _Bool _playWhenSourceTypeIsDetermined;
    _Bool _prepareWhenSourceTypeIsDetermined;
    _Bool _isChangingMoviePath;
    _Bool _wasPlayingBeforeSuspended;
    _Bool _canPostDidFinishNotificationOnItemChange;
    _Bool _readyForDisplay;
    _Bool _shouldRestartPlaybackFromBeginning;
    _Bool _useHostedWindowWhenFullscreen;
    _Bool _willSoonEndUsingVideoLayer;
    UIWindow *_preApexSupportWindow;
    double _initialPlaybackTime;
    double _endPlaybackTime;
    NSMutableDictionary *_timedMetadataForUniqueKey;
    _Bool _isActive;
    _Bool _isResigningActive;
    _Bool _didResignActive;
    _Bool _canShowControlsOverlayBeforeResignedActive;
    double _timeWhenResignedActive;
    unsigned long long _movieIndexWhenResignedActive;
    MPMovieAccessLog *_cachedAccessLog;
    MPMovieErrorLog *_cachedErrorLog;
}

- (void).cxx_destruct;
- (id)errorLog;
- (id)accessLog;
- (id)timedMetadataForKey:(id)arg1;
- (id)timedMetadata;
- (void)cancelAllThumbnailImageRequests;
- (void)requestThumbnailImagesAtTimes:(id)arg1 timeOption:(long long)arg2;
- (id)thumbnailImageAtTime:(double)arg1 timeOption:(long long)arg2;
- (void)_updateDisabledPartsFromDelegate;
- (void)_endUsingVideoLayer;
- (_Bool)_canContinuePlayingWhenLocked;
- (void)_restartPlaybackFromBeginning;
- (void)_postDidFinishNotificationWithReason:(long long)arg1;
- (void)_postNotificationName:(id)arg1 object:(id)arg2 userInfo:(id)arg3;
- (void)_postNotificationName:(id)arg1 object:(id)arg2;
- (void)_clearPlaybackStateAfterTimeJumpIfNecessary;
- (void)_pausePlaybackForSuspension;
- (void)_setUseApplicationAudioSession:(_Bool)arg1;
- (void)_prepareToPlayWithStartIndex:(unsigned long long)arg1;
- (void)_resignActive;
- (void)_ensureActive;
- (void)_setMoviePlayer:(id)arg1;
- (id)_nowPlayingMovie;
- (void)_setNowPlayingMovie:(id)arg1;
- (id)_movieOptions;
- (id)_movies;
- (void)_setMovies:(id)arg1;
- (_Bool)_didPostFinishNotificationForReason:(long long)arg1;
- (void)_cacheAccessAndErrorLogs;
- (_Bool)useApplicationAudioSession;
- (void)setUseApplicationAudioSession:(_Bool)arg1;
- (void)setMovieControlMode:(int)arg1;
- (void)setBackgroundColor:(id)arg1;
- (unsigned int)_hostedWindowContextID;
- (id)_hostedWindow;
- (_Bool)_useHostedWindowWhenFullscreen;
- (void)_setUseHostedWindowWhenFullscreen:(_Bool)arg1;
- (_Bool)inlinePlaybackUsesTVOut;
- (void)setInlinePlaybackUsesTVOut:(_Bool)arg1;
- (id)_videoViewController;
- (id)_videoView;
- (_Bool)_shouldEnforceHDCP;
- (_Bool)_shouldContinuePlaybackInBackground;
- (void)_setVideoViewControllerOverlayStyle;
- (void)_setShouldEnforceHDCP:(_Bool)arg1;
- (void)_setNavigationBarHidden:(_Bool)arg1;
- (void)_setMovieTitle:(id)arg1;
- (void)_setMovieSubtitle:(id)arg1;
- (void)_setMovieMediaTypesOverride:(unsigned long long)arg1;
- (void)_setHTTPHeaderFields:(id)arg1;
- (void)_setDisallowsAMRAudio:(_Bool)arg1;
- (void)_setDelegate:(id)arg1;
- (void)_setCurrentPlaybackTime:(double)arg1 timeOption:(long long)arg2;
- (void)_setControlsHidden:(_Bool)arg1;
- (void)_setControlsHidden:(_Bool)arg1 animated:(_Bool)arg2;
- (void)_setAudioSessionModeOverride:(id)arg1;
- (void)_setAdditionalButtons:(long long)arg1;
- (double)_seekableStartTime;
- (double)_seekableEndTime;
- (id)_resolvedContentURL;
- (double)_playableStartTime;
- (double)_playableEndTime;
- (id)_navigationBar;
- (id)_movieTitle;
- (id)_movieSubtitle;
- (_Bool)_isTVOutEnabled;
- (_Bool)_isNavigationBarHidden;
- (_Bool)_isReadyForDisplay;
- (id)_HTTPHeaderFields;
- (_Bool)disallowsAMRAudio;
- (id)_delegate;
- (id)_currentItem;
- (id)_audioSessionModeOverride;
- (_Bool)_areControlsHidden;
- (id)_advertisementView;
- (long long)_additionalButtons;
- (void)_simpleRemoteNotification:(id)arg1;
- (void)_willTerminateNotification:(id)arg1;
- (void)_didBecomeActiveNotification:(id)arg1;
- (void)_willResignActiveNotification:(id)arg1;
- (void)_movieNaturalSizeAvailableNotification:(id)arg1;
- (void)_movieDurationAvailableNotification:(id)arg1;
- (void)_movieSourceTypeAvailableNotification:(id)arg1;
- (void)_movieTypeAvailableNotification:(id)arg1;
- (void)_moviePlayerDidBecomeActiveNotification:(id)arg1;
- (void)_moviePlayerWillBecomeActiveNotification:(id)arg1;
- (void)_videoViewPathWillChangeNotification:(id)arg1;
- (void)_videoViewScaleModeDidChangeNotification:(id)arg1;
- (void)_serverDiedNotification:(id)arg1;
- (void)_timeDidJumpNotification:(id)arg1;
- (void)_timedMetadataImageAvailableNotification:(id)arg1;
- (void)_timedMetadataAvailableNotification:(id)arg1;
- (void)_rateDidChangeNotification:(id)arg1;
- (void)_playbackStateDidChangeNotification:(id)arg1;
- (void)_bufferingStateDidChangeNotification:(id)arg1;
- (void)_itemPlaybackErrorNotification:(id)arg1;
- (void)_itemPlaybackDidEndNotification:(id)arg1;
- (void)_itemReadyToPlayNotification:(id)arg1;
- (void)_itemDidChangeNotification:(id)arg1;
- (void)_isExternalPlaybackActiveDidChangeNotification:(id)arg1;
- (void)_firstVideoFrameDisplayedNotification:(id)arg1;
- (void)videoControllerDidHideOverlay:(id)arg1;
- (void)videoController:(id)arg1 willHideOverlayWithDuration:(double)arg2;
- (void)videoControllerDidShowOverlay:(id)arg1;
- (void)videoController:(id)arg1 willShowOverlayWithDuration:(double)arg2;
- (_Bool)videoController:(id)arg1 tappedButtonPart:(unsigned long long)arg2;
- (void)viewControllerRequestsExit:(id)arg1 reason:(long long)arg2;
- (void)videoControllerDidExitFullscreen:(id)arg1;
- (void)videoControllerWillExitFullscreen:(id)arg1;
- (void)videoControllerDidEnterFullscreen:(id)arg1;
- (void)videoControllerWillEnterFullscreen:(id)arg1;
- (_Bool)videoControllerShouldAutohide:(id)arg1;
- (void)movieViewDidMoveToWindow:(id)arg1;
- (void)movieView:(id)arg1 willMoveToWindow:(id)arg2;
- (void)movieView:(id)arg1 willMoveToSuperview:(id)arg2;
- (double)endPlaybackTime;
- (void)setEndPlaybackTime:(double)arg1;
- (double)initialPlaybackTime;
- (void)setInitialPlaybackTime:(double)arg1;
- (struct CGSize)naturalSize;
- (double)playableDuration;
- (double)duration;
- (long long)movieSourceType;
- (void)setMovieSourceType:(long long)arg1;
- (unsigned long long)movieMediaTypes;
- (void)skipToPreviousItem;
- (void)skipToBeginning;
- (void)skipToNextItem;
- (void)endSeeking;
- (void)beginSeekingBackward;
- (void)beginSeekingForward;
@property(nonatomic) float currentPlaybackRate;
@property(nonatomic) double currentPlaybackTime;
- (void)stop;
- (void)pause;
- (void)play;
- (void)prepareToPlay;
@property(readonly, nonatomic) _Bool isPreparedToPlay;
- (_Bool)isFullscreen;
- (_Bool)isAirPlayVideoActive;
- (_Bool)allowsAirPlay;
- (void)setAllowsAirPlay:(_Bool)arg1;
- (void)setFullscreen:(_Bool)arg1 animated:(_Bool)arg2;
- (void)setFullscreen:(_Bool)arg1;
- (_Bool)shouldAutoplay;
- (void)setShouldAutoplay:(_Bool)arg1;
- (long long)repeatMode;
- (void)setRepeatMode:(long long)arg1;
- (long long)controlStyle;
- (void)setControlStyle:(long long)arg1;
- (long long)scalingMode;
- (void)setScalingMode:(long long)arg1;
- (unsigned long long)loadState;
- (long long)playbackState;
- (id)backgroundView;
- (id)view;
- (void)setPlayerItem:(id)arg1;
- (id)playerItem;
- (void)setAsset:(id)arg1;
- (id)asset;
- (void)setContentURL:(id)arg1;
- (id)contentURL;
- (void)dealloc;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface MPTimedMetadata : NSObject
{
    AVMetadataItem *_metadataItem;
}

- (void).cxx_destruct;
@property(readonly, nonatomic) NSDictionary *allMetadata;
@property(readonly, nonatomic) double timestamp;
@property(readonly, nonatomic) id value;
@property(readonly, nonatomic) NSString *keyspace;
@property(readonly, nonatomic) NSString *key;
- (id)_initWithMetadataItem:(id)arg1;
- (id)init;

@end

@interface MPMovieAccessLog : NSObject <NSCopying>
{
    AVPlayerItemAccessLog *_accessLog;
}

- (void).cxx_destruct;
@property(readonly, nonatomic) NSArray *events;
@property(readonly, nonatomic) unsigned long long extendedLogDataStringEncoding;
@property(readonly, nonatomic) NSData *extendedLogData;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)_initWithAVItemAccessLog:(id)arg1;

@end

@interface MPMovieErrorLog : NSObject <NSCopying>
{
    AVPlayerItemErrorLog *_errorLog;
}

- (void).cxx_destruct;
@property(readonly, nonatomic) NSArray *events;
@property(readonly, nonatomic) unsigned long long extendedLogDataStringEncoding;
@property(readonly, nonatomic) NSData *extendedLogData;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)_initWithAVItemErrorLog:(id)arg1;

@end

@interface MPMovieAccessLogEvent : NSObject <NSCopying>
{
    AVPlayerItemAccessLogEvent *_event;
}

- (void).cxx_destruct;
@property(readonly, nonatomic) long long numberOfDroppedVideoFrames;
@property(readonly, nonatomic) double indicatedBitrate;
@property(readonly, nonatomic) double observedBitrate;
@property(readonly, nonatomic) long long numberOfBytesTransferred;
@property(readonly, nonatomic) long long numberOfStalls;
@property(readonly, nonatomic) double durationWatched;
@property(readonly, nonatomic) double segmentsDownloadedDuration;
@property(readonly, nonatomic) double playbackStartOffset;
@property(readonly, nonatomic) NSString *playbackSessionID;
@property(readonly, nonatomic) unsigned long long numberOfServerAddressChanges;
@property(readonly, nonatomic) NSString *serverAddress;
@property(readonly, nonatomic) NSString *URI;
@property(readonly, nonatomic) NSDate *playbackStartDate;
@property(readonly, nonatomic) unsigned long long numberOfSegmentsDownloaded;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)_initWithAVItemAccessLogEvent:(id)arg1;

@end

@interface MPMovieErrorLogEvent : NSObject <NSCopying>
{
    AVPlayerItemErrorLogEvent *_event;
}

- (void).cxx_destruct;
@property(readonly, nonatomic) NSString *errorComment;
@property(readonly, nonatomic) NSString *errorDomain;
@property(readonly, nonatomic) long long errorStatusCode;
@property(readonly, nonatomic) NSString *playbackSessionID;
@property(readonly, nonatomic) NSString *serverAddress;
@property(readonly, nonatomic) NSString *URI;
@property(readonly, nonatomic) NSDate *date;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)_initWithAVItemErrorLogEvent:(id)arg1;

@end

@interface UIMoviePlayerController : NSObject
{
    id _delegate;
    MPAVItem *_item;
    NSString *_moviePath;
    MPAVController *_player;
    UIImage *_posterImage;
    NSString *_youTubeVideoID;
    UIViewController *_topViewController;
    id <MPVideoControllerProtocol> _activeVideoController;
    MPVideoView *_videoView;
    MPTransitionController *_transitionController;
    long long _transitionCount;
    UINavigationController *_portraitNavigationController;
    struct __CFBag *_ignoredChangeTypes;
    long long _pendingInterfaceOrientation;
    MPAVItem *_pendingItem;
    MPAVItem *_pendingItemWithDifferentType;
    struct CGRect _layoutRect;
    long long _lastSetUIInterfaceOrientation;
    long long _interfaceOrientation;
    long long _interfaceOrientationFromDevice;
    NSString *_playbackErrorDescription;
    unsigned long long _autoRotationMask;
    unsigned int _displayableParts;
    unsigned int _unmodifiedDisplayableParts;
    unsigned int _desiredParts;
    unsigned long long _audioControlsStyle;
    unsigned long long _playableContentTypeOverride;
    double _timeWhenResignedActive;
    double _timeToSnapshot;
    NSArray *_closedCaptionData;
    struct {
        unsigned int canShowControlsOverlay:1;
        unsigned int wantsControlsOverlayVis:1;
        unsigned int wantsControlsOverlayAnim:1;
        unsigned int wantsControlsOverlayDisableAutohide:1;
        unsigned int wantsFullscreen:1;
        unsigned int alwaysFullscreen:1;
        unsigned int canAnimateControlsOverlay:1;
        unsigned int autoplayWhenLikelyToKeepUp:1;
        unsigned int disallowsVideoOut:1;
        unsigned int exited:1;
        unsigned int generatingOrientationNotifications:1;
        unsigned int forStreaming:1;
        unsigned int isExternalTransformationActive:1;
        unsigned int controlsVisibleBeforeExternalTransformation:1;
        unsigned int isActive:1;
        unsigned int resigningActive:1;
        unsigned int didResignActive:1;
        unsigned int uiPrepared:1;
        unsigned int isChangingMoviePath:1;
        unsigned int alwaysAllowHidingControlsOverlay:1;
        unsigned int schedulePortraitLoadingIndicator:1;
        unsigned int clientClearedMoviePath:1;
        unsigned int canCommitOverlayChanges:1;
        unsigned int usingDebugTestPath:1;
        unsigned int allowsWirelessPlayback:1;
        unsigned int useHostedWindowWhenFullscreen:1;
    } _mpcBitfield;
    MPNowPlayingObserver *_nowPlayingController;
}

+ (void)allInstancesResignActive;
+ (void)allInstancesResignActiveForced:(_Bool)arg1;
+ (struct CGSize)fillSizeForMovieBounds:(struct CGRect)arg1 movieNaturalSize:(struct CGSize)arg2 interfaceOrientation:(long long)arg3 destinationTVOut:(_Bool)arg4;
+ (Class)preferredWindowClass;
@property(copy, nonatomic) NSString *youTubeVideoID; // @synthesize youTubeVideoID=_youTubeVideoID;
@property(copy, nonatomic) NSString *playbackErrorDescription; // @synthesize playbackErrorDescription=_playbackErrorDescription;
@property(nonatomic) __weak id delegate; // @synthesize delegate=_delegate;
@property(nonatomic) unsigned long long audioControlsStyle; // @synthesize audioControlsStyle=_audioControlsStyle;
- (void).cxx_destruct;
- (void)_setTVOutEnabled:(_Bool)arg1;
- (void)_updateForStreamingOptions;
- (id)_backgroundPlaceholderView;
- (void)_updatePlayableContentTypeOverride;
- (void)_autoRotateToInterfaceOrientation:(long long)arg1 animated:(_Bool)arg2;
- (void)_autoRotateToCurrentOrientationAnimated:(_Bool)arg1;
- (_Bool)_canAutoRotateToInterfaceOrientation:(long long)arg1;
- (void)_endDeviceOrientationNotifications;
- (void)_beginDeviceOrientationNotifications;
- (void)_updateEnabledParts;
- (int)_exitReasonForMPViewControllerExitReason:(long long)arg1;
- (void)_exitPlayer:(int)arg1;
- (unsigned long long)_convertedVisiblePartsMask:(unsigned int)arg1;
- (unsigned long long)_convertedPartsMask:(unsigned int)arg1;
- (void)_unregisterForNotifications;
- (void)_registerForNotifications;
- (void)_willEnterForegroundNotification:(id)arg1;
- (void)_didEnterBackgroundNotification:(id)arg1;
- (void)_moviePlayerDidBecomeActiveNotification:(id)arg1;
- (void)_moviePlayerWillBecomeActiveNotification:(id)arg1;
- (void)_ensureActive;
- (void)_videoViewPathWillChangeNotification:(id)arg1;
- (void)_mutedDidChangeNotification:(id)arg1;
- (void)_volumeDidChangeNotification:(id)arg1;
- (void)_tickNotification:(id)arg1;
- (void)_timedMetadataAvailableNotification:(id)arg1;
- (void)_itemPlaybackDidEndNotification:(id)arg1;
- (void)_timeDidJumpNotification:(id)arg1;
- (void)_alternateTracksAvailableNotification:(id)arg1;
- (void)_itemDurationAvailableNotification:(id)arg1;
- (void)_itemReadyToPlayNotification:(id)arg1;
- (void)_isExternalPlaybackActiveDidChangeNotification:(id)arg1;
- (void)_rateDidChangeNotification:(id)arg1;
- (void)_deviceOrientationChanged:(id)arg1;
- (void)_tvOutCapabilityChanged:(id)arg1;
- (void)_playbackStateChanged:(id)arg1;
- (void)_validityChangedNotification:(id)arg1;
- (void)_serverDeathNotification:(id)arg1;
- (void)_itemChangedNotification:(id)arg1;
- (void)_movieTypeAvailableNotification:(id)arg1;
- (void)_bufferingStateChangedNotification:(id)arg1;
- (void)_simpleRemoteNotification:(id)arg1;
- (void)_willResignNotification:(id)arg1;
- (void)_willBeginSuspendAnimationNotification:(id)arg1;
- (void)_willSuspendNotification:(id)arg1;
- (void)_pausePlaybackForNotification:(id)arg1;
- (void)_alternateTextTrackDidOutputNotification:(id)arg1;
- (void)_alternateTextTrackWillChangeNotification:(id)arg1;
- (void)videoControllerDidEndScrubbing:(id)arg1;
- (void)videoControllerDidBeginScrubbing:(id)arg1;
- (struct CGRect)videoControllerFrameAfterFullscreenExit:(id)arg1;
- (void)videoControllerDidCreateFullscreenView:(id)arg1;
- (void)videoControllerDidHideOverlay:(id)arg1;
- (void)videoController:(id)arg1 willHideOverlayWithDuration:(double)arg2;
- (void)videoControllerDidShowOverlay:(id)arg1;
- (void)videoController:(id)arg1 willShowOverlayWithDuration:(double)arg2;
- (void)videoControllerDidExitFullscreen:(id)arg1;
- (void)videoControllerWillExitFullscreen:(id)arg1 reason:(long long)arg2;
- (void)videoControllerDidEnterFullscreen:(id)arg1;
- (void)videoControllerWillEnterFullscreen:(id)arg1;
- (_Bool)videoControllerShouldAutohide:(id)arg1;
- (void)viewControllerFailedToPlay:(id)arg1 withError:(id)arg2;
- (_Bool)videoController:(id)arg1 tappedButtonPart:(unsigned long long)arg2;
- (void)viewControllerRequestsExit:(id)arg1 reason:(long long)arg2;
- (void)resignActiveAndEndAirPlay;
- (void)resignActive;
@property(nonatomic) _Bool alwaysAllowHidingControlsOverlay;
@property(nonatomic) _Bool useLegacyControls;
@property(readonly, nonatomic) MPMovieErrorLog *errorLog;
@property(readonly, nonatomic) MPMovieAccessLog *accessLog;
- (void)setInlinePlaybackUsesTVOut:(_Bool)arg1;
@property(readonly, nonatomic) UIView *fullscreenView;
- (void)setFullscreen:(_Bool)arg1 animated:(_Bool)arg2;
@property(nonatomic, getter=isFullscreen) _Bool fullscreen;
- (void)endExternalTransformation;
- (void)beginExternalTransformation;
@property(retain, nonatomic) UIImage *posterImage;
@property(retain, nonatomic) UIImage *backgroundPlaceholderImage;
- (id)backgroundView;
- (void)tearDownUI;
- (void)prepareAndSetupUI;
- (void)_prepareAndSetupUIForClient;
- (void)_prepareAndSetupUI;
- (struct CGRect)moviePlaceholderImageRectForMovieWithAspectRatio:(float)arg1;
@property(readonly, nonatomic) struct CGSize naturalSize;
- (void)layoutUIInRect:(struct CGRect)arg1;
- (void)setAllowsWirelessPlayback:(_Bool)arg1;
- (void)setAllowsDetailScrubbing:(_Bool)arg1;
- (void)setControlsOverlayVisible:(_Bool)arg1 disableAutohide:(_Bool)arg2 animate:(_Bool)arg3;
- (void)setCanShowControlsOverlay:(_Bool)arg1;
- (void)setCanAnimateControlsOverlay:(_Bool)arg1;
- (void)setDisplayable:(_Bool)arg1 movieParts:(unsigned int)arg2 animated:(_Bool)arg3;
- (void)setDisplayableMovieParts:(unsigned int)arg1 animated:(_Bool)arg2;
- (void)setDesiredMovieParts:(unsigned int)arg1 animated:(_Bool)arg2;
- (void)setAutoRotationMask:(unsigned long long)arg1;
- (unsigned long long)autoRotationMask;
- (_Bool)setInterfaceOrientation:(long long)arg1 animated:(_Bool)arg2 forced:(_Bool)arg3;
- (_Bool)setOrientation:(long long)arg1 animated:(_Bool)arg2 forced:(_Bool)arg3;
- (long long)interfaceOrientation;
- (void)_reloadForTransitionFromInterfaceOrientation:(long long)arg1 toInterfaceOrientation:(long long)arg2 animated:(_Bool)arg3;
- (void)performTransition:(id)arg1;
- (void)viewController:(id)arg1 endIgnoringChangeType:(unsigned long long)arg2;
- (void)viewController:(id)arg1 beginIgnoringChangeTypes:(unsigned long long)arg2;
- (void)_transitionFinished:(id)arg1;
- (void)endTransition;
- (void)beginTransition;
- (void)endIgnoringChangeTypes:(unsigned long long)arg1;
- (_Bool)_shouldIgnoreChangeType:(unsigned long long)arg1;
- (_Bool)_noteStoppedIgnoringChangeType:(unsigned long long)arg1;
- (void)beginIgnoringChangeTypes:(unsigned long long)arg1;
- (void)_reconfigurePortraitNavigationItem:(id)arg1 time:(double)arg2 animate:(_Bool)arg3;
- (id)_portraitNavigationController:(_Bool)arg1;
- (void)portraitScaleButtonAction:(id)arg1;
- (void)portraitDoneButtonAction:(id)arg1;
- (void)_finishInitializeActiveViewController:(id)arg1 forTransition:(_Bool)arg2;
- (void)_commitFinishInitializeActiveViewController:(id)arg1 animate:(_Bool)arg2;
- (void)_initializeVideoViewController:(id)arg1 orientation:(long long)arg2;
- (id)newViewControllerForItem:(id)arg1 interfaceOrientation:(long long)arg2 reusingController:(id)arg3;
- (id)_activeVideoController;
- (void)_setActiveViewController:(id)arg1 forTransition:(_Bool)arg2;
- (id)_topViewController;
@property(nonatomic) _Bool limitReadAhead;
@property(readonly, nonatomic) unsigned long long bufferingState;
@property(readonly, nonatomic) _Bool areClosedCaptionsAvailable;
@property(readonly, nonatomic) float volume;
@property(readonly, nonatomic) _Bool muted;
@property(nonatomic) _Bool stopAtEnd;
- (_Bool)seekToDate:(id)arg1;
@property(readonly, nonatomic) NSDate *currentDate;
- (void)setCurrentTime:(double)arg1 timeSnapOption:(unsigned long long)arg2;
@property(nonatomic) double currentTime;
@property(readonly, nonatomic) double seekableEndTime;
@property(readonly, nonatomic) double seekableStartTime;
@property(readonly, nonatomic) double playableEndTime;
@property(readonly, nonatomic) double playableStartTime;
@property(readonly, nonatomic) double playableDuration;
@property(readonly, nonatomic) double duration;
@property(readonly, nonatomic) unsigned long long playbackState;
@property(nonatomic) float playbackRate;
- (void)stop;
- (void)pause;
- (void)play;
- (void)prepareForPlayback;
@property(readonly, nonatomic) _Bool isPreparedForPlayback;
@property(nonatomic) unsigned long long playableContentType;
@property(nonatomic) _Bool disableAlternateTextTrackRendering;
@property(nonatomic) _Bool useApplicationAudioSession;
@property(retain, nonatomic) NSString *audioSessionModeOverride;
@property(readonly, nonatomic) unsigned int hostedWindowContextID;
@property(readonly, nonatomic) _UIHostedWindow *hostedWindow;
@property(nonatomic) _Bool useHostedWindowWhenFullscreen;
@property(nonatomic) _Bool closedCaptioningEnabled;
- (void)setClosedCaptions:(id)arg1;
- (void)setAttemptAutoPlayWhenControlsHidden:(_Bool)arg1;
@property(readonly, nonatomic) _Bool videoOutActive;
- (void)setManagesStatusBar:(_Bool)arg1;
@property(nonatomic) _Bool disallowsVideoOut;
@property(readonly, nonatomic) long long fileSize;
- (void)setAutoPlayWhenLikelyToKeepUp:(_Bool)arg1;
@property(readonly, nonatomic) UIView *view;
@property(readonly, nonatomic) UIMovieView *movieView;
@property(copy, nonatomic) NSString *movieTitle;
@property(copy, nonatomic) NSString *movieSubtitle;
@property(copy, nonatomic) NSString *moviePath;
- (void)setItem:(id)arg1 animated:(_Bool)arg2;
@property(retain, nonatomic) MPAVItem *item; // @synthesize item=_item;
@property(readonly, nonatomic) _Bool canContinuePlayingWhenLocked;
@property(readonly, nonatomic) _Bool canContinuePlayingInBackground;
@property(readonly, nonatomic) UIView *alternateTextTrackView;
- (void)unlockMoviePlaybackResources;
@property(nonatomic) unsigned long long options;
- (void)dealloc;
- (id)initWithPlayerSize:(struct CGSize)arg1;
- (id)initWithPlayerSize:(struct CGSize)arg1 options:(unsigned long long)arg2;
- (void)debugSetup;
- (void)delayedDebugSetup;
- (id)playerView;
- (_Bool)isFullScreen;
- (void)layoutUIInRect:(struct CGRect)arg1 fullScreen:(_Bool)arg2;
- (id)initWithPlayerSize:(struct CGSize)arg1 isFullScreen:(_Bool)arg2 options:(unsigned long long)arg3;
- (id)initWithPlayerSize:(struct CGSize)arg1 isFullScreen:(_Bool)arg2;

@end

@interface MPAlternateTrack : NSObject
{
    NSString *_displayName;
    NSString *_canonicalLanguageIdentifier;
    AVMediaSelectionOption *_option;
    _Bool _isMainProgram;
    _Bool _isDVS;
}

+ (id)threeCharCodesForEncodedISO639_2_T:(id)arg1;
@property(readonly, nonatomic) _Bool isDVS; // @synthesize isDVS=_isDVS;
@property(readonly, nonatomic) _Bool isMainProgram; // @synthesize isMainProgram=_isMainProgram;
@property(readonly, nonatomic) AVMediaSelectionOption *option; // @synthesize option=_option;
@property(readonly, nonatomic) NSString *canonicalLanguageIdentifier; // @synthesize canonicalLanguageIdentifier=_canonicalLanguageIdentifier;
@property(retain, nonatomic) NSString *displayName; // @synthesize displayName=_displayName;
- (void).cxx_destruct;
- (void)_setDisplayNameFromOption:(id)arg1;
- (id)description;
- (long long)compare:(id)arg1;
- (id)initWithOption:(id)arg1;

@end

@interface MPStoreAsset : NSObject
{
    unsigned long long _storeAssetType;
    AVAsset *_asset;
}

+ (id)assetForContext:(id)arg1 allowCloudDialogue:(_Bool)arg2;
+ (void)setShouldAlwaysAirPlayFromCloud:(_Bool)arg1;
@property(retain, nonatomic) AVAsset *asset; // @synthesize asset=_asset;
@property(nonatomic) unsigned long long storeAssetType; // @synthesize storeAssetType=_storeAssetType;
- (void).cxx_destruct;

@end

@interface MPAVControllerToAggregateDCommunicator : NSObject
{
    MPAVItem *_item;
    unsigned long long _lastMediaType;
    double _playbackStartTime;
    _Bool _playbackStartTimeIsValid;
}

- (void).cxx_destruct;
- (void)_handleItemTypeAvailableNotification:(id)arg1;
- (void)_handleItemChangedNotification:(id)arg1;
- (void)_handlePlaybackStateChangedNotification:(id)arg1;
- (void)_updateLastMediaTypeForItem;
- (void)_stopPlaybackTimer;
- (void)_startPlaybackTimer;
- (void)dealloc;
- (id)init;

@end

@interface MPAlternateTracks : NSObject <AVPlayerItemLegibleOutputPushDelegate>
{
    MPAVItem *_item;
    NSDictionary *_alternateTracks;
    NSMutableDictionary *_trackChangeDictionary;
    _Bool _disableAlternateTextTrackRendering;
    AVPlayerItemLegibleOutput *_legibleOutput;
    MPAlternateTextTrack *_currentTextTrack;
    NSArray *_outOfBandTextTracks;
}

+ (id)subtitleLanguages;
@property(nonatomic) _Bool disableAlternateTextTrackRendering; // @synthesize disableAlternateTextTrackRendering=_disableAlternateTextTrackRendering;
@property(retain, nonatomic) NSArray *outOfBandTextTracks; // @synthesize outOfBandTextTracks=_outOfBandTextTracks;
- (void).cxx_destruct;
- (void)_suppressAVFSubtitleRendering;
- (id)_currentTextTrackAccordingToAVF;
- (id)_keyForTrackType:(unsigned long long)arg1;
- (void)enableLegibleOutputIfNecessary;
- (void)reloadDataWithChangedCaptionDisplayType:(_Bool)arg1;
- (void)reloadData;
- (unsigned long long)trackCountForTypes:(unsigned long long)arg1;
- (_Bool)hasTracksForTypes:(unsigned long long)arg1;
- (void)legibleOutput:(id)arg1 didOutputAttributedStrings:(id)arg2 nativeSampleBuffers:(id)arg3 forItemTime:(CDStruct_1b6d18a9)arg4;
- (id)tracksForType:(unsigned long long)arg1;
- (void)setTrack:(id)arg1 forType:(unsigned long long)arg2;
@property(retain, nonatomic) MPAlternateTextTrack *selectedAlternateTextTrack;
@property(readonly, nonatomic, getter=isLoaded) _Bool loaded;
- (unsigned long long)indexOfCurrentTrackForType:(unsigned long long)arg1;
- (id)currentTrackForType:(unsigned long long)arg1;
- (void)commitTrackChanges;
- (void)beginTrackChanges;
- (id)initWithItem:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface MPArrayQueueFeeder : MPQueueFeeder
{
    NSArray *_queueItems;
}

- (void).cxx_destruct;
@property(readonly, nonatomic) NSArray *items;
- (id)playbackInfoAtIndex:(unsigned long long)arg1;
- (id)pathAtIndex:(unsigned long long)arg1;
- (unsigned long long)itemCount;
- (id)copyRawItemAtIndex:(unsigned long long)arg1;
- (void)dealloc;
- (id)initWithItems:(id)arg1;

@end

@interface MPArrayQueueItem : NSObject
{
    MPAVItem *_item;
    NSString *_path;
    double _startTime;
    double _stopTime;
    NSString *_videoID;
}

@property(copy, nonatomic) NSString *videoID; // @synthesize videoID=_videoID;
@property(nonatomic) double stopTime; // @synthesize stopTime=_stopTime;
@property(nonatomic) double startTime; // @synthesize startTime=_startTime;
@property(copy, nonatomic) NSString *path; // @synthesize path=_path;
@property(readonly, nonatomic) MPAVItem *item; // @synthesize item=_item;
- (void).cxx_destruct;
- (id)initWithMPAVItem:(id)arg1;
- (id)init;

@end

@interface MPAVItem : NSObject
{
    AVAsset *_asset;
    NSObject<OS_dispatch_queue> *_assetQueue;
    AVPlayerItem *_avPlayerItem;
    _Bool _isAssetLoaded;
    MPQueueFeeder *_feeder;
    MPAVController *_player;
    float _soundCheckVolumeNormalization;
    NSArray *_chapterTimeMarkers;
    NSArray *_artworkTimeMarkers;
    NSArray *_urlTimeMarkers;
    NSArray *_closedCaptionTimeMarkers;
    MPAlternateTracks *_alternateTracks;
    double _cachedDuration;
    double _cachedPlayableDuration;
    NSArray *_cachedSeekableTimeRanges;
    double _seekableTimeRangesCacheTime;
    unsigned long long _type;
    float _defaultPlaybackRate;
    unsigned long long _indexInQueueFeeder;
    unsigned int _advancedDuringPlayback:1;
    unsigned int _handledFinishTime:1;
    unsigned int _hasPlayedThisSession:1;
    unsigned int _wasCountedAsSkipped:1;
    unsigned int _isStreamable:2;
    unsigned int _watchingAttributes:1;
    unsigned int _userChangedItemsDuringPlayback:1;
    unsigned int _lyricsAvailable:1;
    unsigned int _timeMarkersNeedLoading:1;
    _Bool _hasPostedNaturalSizeChange;
    _Bool _hasValidPlayerItemDuration;
    _Bool _limitReadAhead;
    CDStruct_1b6d18a9 _playerItemDuration;
    _Bool _didAttemptToLoadAsset;
    float _loudnessInfoVolumeNormalization;
    long long _albumStoreID;
    NSArray *_buyOffers;
    NSString *_copyrightText;
    long long _storeID;
    MPMediaItem *_mediaItem;
}

+ (void)applyVolumeNormalizationForQueuedItems:(id)arg1;
+ (id)URLFromPath:(id)arg1;
+ (void)setDefaultScaleMode:(unsigned long long)arg1;
+ (unsigned long long)defaultScaleMode;
@property(nonatomic) float loudnessInfoVolumeNormalization; // @synthesize loudnessInfoVolumeNormalization=_loudnessInfoVolumeNormalization;
@property(readonly, retain, nonatomic) MPMediaItem *mediaItem; // @synthesize mediaItem=_mediaItem;
@property(readonly, nonatomic) long long storeID; // @synthesize storeID=_storeID;
@property(readonly, copy, nonatomic) NSString *copyrightText; // @synthesize copyrightText=_copyrightText;
@property(readonly, copy, nonatomic) NSArray *buyOffers; // @synthesize buyOffers=_buyOffers;
@property(readonly, nonatomic) long long albumStoreID; // @synthesize albumStoreID=_albumStoreID;
@property(readonly, nonatomic) _Bool didAttemptToLoadAsset; // @synthesize didAttemptToLoadAsset=_didAttemptToLoadAsset;
@property(retain, nonatomic) NSArray *urlTimeMarkers; // @synthesize urlTimeMarkers=_urlTimeMarkers;
@property(nonatomic) float soundCheckVolumeNormalization; // @synthesize soundCheckVolumeNormalization=_soundCheckVolumeNormalization;
@property(nonatomic) __weak MPAVController *player; // @synthesize player=_player;
@property _Bool isAssetLoaded; // @synthesize isAssetLoaded=_isAssetLoaded;
@property(nonatomic) unsigned long long indexInQueueFeeder; // @synthesize indexInQueueFeeder=_indexInQueueFeeder;
@property(nonatomic) float defaultPlaybackRate; // @synthesize defaultPlaybackRate=_defaultPlaybackRate;
@property(nonatomic) __weak MPQueueFeeder *feeder; // @synthesize feeder=_feeder;
@property(retain, nonatomic) NSArray *chapterTimeMarkers; // @synthesize chapterTimeMarkers=_chapterTimeMarkers;
@property(retain, nonatomic) NSArray *artworkTimeMarkers; // @synthesize artworkTimeMarkers=_artworkTimeMarkers;
@property(readonly, nonatomic) MPAlternateTracks *alternateTracks; // @synthesize alternateTracks=_alternateTracks;
- (void).cxx_destruct;
- (void)replacePlayerItemWithPlayerItem:(id)arg1;
- (void)reevaluateType;
- (id)localeForAssetTrack:(id)arg1;
- (void)_checkAllowsBlockingDurationCall;
- (void)setupPlaybackInfo;
- (void)setupEQPresetWithDefaultPreset:(long long)arg1;
- (id)aggregateDictionaryItemIdentifier;
- (void)_clearAsset;
- (CDUnknownBlockType)blockForDirectAVControllerNotificationReferencingItem:(id)arg1;
- (void)_updateSoundCheckVolumeNormalizationForPlayerItem;
- (void)_loadAssetProperties;
- (double)_playableDurationForLoadedTimeRanges:(id)arg1;
- (id)_seekableTimeRanges;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (void)_playerItemNewAccessLogEntryNotification:(id)arg1;
- (void)_applicationDidBecomeActive:(id)arg1;
- (void)_captionAppearanceSettingsChanged;
- (void)_itemAttributeAvailableKey:(id)arg1;
@property(readonly, nonatomic) double timeOfSeekableEnd;
@property(readonly, nonatomic) double timeOfSeekableStart;
- (CDStruct_1b6d18a9)_playerItemDurationIfAvailable;
@property(readonly, nonatomic) double playableDurationIfAvailable;
@property(readonly, nonatomic) double playableDuration;
@property(readonly, nonatomic) double durationIfAvailable;
- (double)_durationFromExternalMetadataIfAvailable;
@property(readonly, nonatomic) _Bool durationIsValid;
@property(readonly, nonatomic) double durationFromExternalMetadata;
@property(readonly, nonatomic) CDStruct_1b6d18a9 duration;
@property(copy, nonatomic) NSString *videoID;
@property(readonly, nonatomic) NSString *localizedPositionInPlaylistString;
- (id)localizedAttributedPositionInPlaylistStringWithRegularTextAttributes:(id)arg1 emphasizedTextAttributes:(id)arg2;
@property(readonly, nonatomic) unsigned long long persistentID;
@property(readonly, nonatomic) float userRating;
@property(readonly, nonatomic) unsigned long long type;
- (id)_imageChapterTrackIDsForAsset:(id)arg1;
- (id)closedCaptionTimeMarkerForTime:(double)arg1;
- (id)urlTimeMarkerForTime:(double)arg1;
- (id)artworkTimeMarkerForTime:(double)arg1;
- (id)chapterTimeMarkerForTime:(double)arg1;
- (id)_timeMarkerFromMarkers:(id)arg1 forTime:(double)arg2;
@property(retain, nonatomic) NSArray *closedCaptionTimeMarkers;
- (void)_loadTimeMarkersAsync;
- (void)_loadTimeMarkersBlocking;
@property(readonly, nonatomic) _Bool useEmbeddedChapterData;
- (id)titlesForTime:(double)arg1;
@property(readonly, nonatomic) NSArray *timedMetadataIfAvailable;
- (void)_realoadEmbeddedTimeMarkers;
@property(readonly, nonatomic) _Bool supportsSettingCurrentTime;
@property(readonly, nonatomic) _Bool supportsSkip;
@property(readonly, nonatomic) _Bool supportsRewindAndFastForward15Seconds;
@property(retain, nonatomic) MPAlternateTextTrack *selectedAlternateTextTrack;
- (void)setLimitReadAhead:(_Bool)arg1;
- (void)setOverrideDuration:(double)arg1;
@property(nonatomic) _Bool hasPlayedThisSession;
- (float)scanIntervalForLevel:(unsigned long long)arg1 paused:(_Bool)arg2;
@property(nonatomic) CDStruct_1b6d18a9 forwardPlaybackEndTime;
- (void)replaceOutOfBandAlternateTextTracksWithArray:(id)arg1;
@property(readonly, nonatomic) struct CGSize presentationSize;
- (float)playbackRateForLevel:(unsigned long long)arg1 direction:(long long)arg2 paused:(_Bool)arg3;
@property(readonly, nonatomic) NSURL *podcastURL;
@property(readonly, nonatomic) struct CGSize naturalSize;
@property(readonly, nonatomic) NSString *mainTitle;
@property(readonly, nonatomic) _Bool allowsEQ;
@property(readonly, nonatomic) long long customAVEQPreset;
- (_Bool)limitReadAhead;
@property(readonly, nonatomic, getter=isStreamable) _Bool streamable;
@property(readonly, nonatomic) _Bool isAlwaysLive;
@property(readonly, nonatomic) _Bool isAd;
- (id)inBandAlternateTextTracks;
@property(readonly, nonatomic) _Bool hasDisplayableText;
- (_Bool)hasDataForItemArtwork;
- (unsigned long long)alternatesCountForTypes:(unsigned long long)arg1;
- (_Bool)hasAlternatesForTypes:(unsigned long long)arg1;
@property(readonly, nonatomic) NSString *lyrics;
@property(readonly, nonatomic) NSString *displayableText;
@property(readonly, nonatomic) _Bool displayableTextLoaded;
@property(readonly, nonatomic) double currentTimeDisplayOverride;
@property(readonly, nonatomic) unsigned long long countForQueueFeeder;
@property(readonly, nonatomic) NSString *genre;
@property(readonly, nonatomic, getter=isExplicitTrack) _Bool explicitTrack;
- (_Bool)isAssetURLValid;
- (_Bool)isValidPlayerSubstituteForItem:(id)arg1;
@property(readonly, nonatomic) _Bool isCloudItem;
@property(readonly, nonatomic) unsigned long long discCount;
@property(readonly, nonatomic) unsigned long long discNumber;
@property(readonly, nonatomic) NSString *composer;
@property(readonly, nonatomic) _Bool canSeedGenius;
@property(readonly, nonatomic) unsigned long long albumTrackCount;
@property(readonly, nonatomic) unsigned long long albumTrackNumber;
@property(readonly, nonatomic) NSString *albumArtist;
@property(readonly, nonatomic) NSString *artist;
@property(readonly, nonatomic) NSString *album;
@property(readonly, nonatomic) AVPlayerItemAccessLog *accessLog;
- (id)url;
- (id)path;
- (double)durationInSeconds;
- (double)_durationInSeconds;
@property(nonatomic) _Bool userChangedItemsDuringPlayback;
- (_Bool)userSkippedPlayback;
@property(nonatomic) _Bool userAdvancedDuringPlayback;
- (void)setUserSkippedPlayback:(_Bool)arg1;
- (void)setSubtitleTrackID:(int)arg1;
- (int)subtitleTrackID;
- (void)setRating:(float)arg1;
- (void)setPlaybackFinishedTime:(double)arg1;
@property(nonatomic) double playbackCheckpointCurrentTime;
- (void)notePlaybackFinishedByHittingEnd;
- (void)setPlaybackStoppedTime:(double)arg1;
- (void)setAlternateAudioTrackID:(int)arg1;
- (void)resetBookkeeping;
@property(readonly, nonatomic) long long status;
- (void)setPlayerItem:(id)arg1;
@property(readonly, nonatomic) AVPlayerItem *playerItem;
@property(readonly, nonatomic) AVAsset *asset;
- (void)_loadAssetAndPlayerItem;
- (void)loadAssetAndPlayerItem;
- (void)flushNowPlayingCaches;
- (void)dealloc;
- (void)_releaseAllTimeMarkers;
- (id)initWithPlayerItem:(id)arg1;
- (id)initWithAsset:(id)arg1;
- (id)initWithURL:(id)arg1 options:(id)arg2;
- (id)initWithURL:(id)arg1;
- (id)init;
- (_Bool)isSupportedDefaultPlaybackSpeed:(unsigned long long)arg1;
- (id)artworkCatalogForPlaybackTime:(double)arg1;
@property(readonly, nonatomic) _Bool isStreamingQuality;
- (void)MPSPWD_prioritizeDownloadSession;

@end

@interface MPAVAdItem : MPAVItem
{
}

- (_Bool)supportsSettingCurrentTime;
- (_Bool)isCloudItem;
- (_Bool)isAd;

@end

@interface MPQueueFeeder : NSObject <MPAVPlaylistFeeder>
{
    MPAVController *_avController;
    struct __CFSet *_itemsWithReferencesToClear;
    unsigned long long _repeatType;
    unsigned long long _shuffleType;
    struct __CFDictionary *_nextStartTimes;
    id _representedObject;
    _Bool _fullScreenPlaybackQueue;
    _Bool _isSourceChangeInProgress;
    _Bool _deallocating;
    _Bool _wantsAirPlayVideo;
    unsigned long long _activeShuffleType;
}

+ (void)restoreAVControllerPlaybackQueue:(id)arg1 fromUnarchiver:(id)arg2 feederClass:(Class)arg3;
@property(readonly, nonatomic) _Bool wantsAirPlayVideo; // @synthesize wantsAirPlayVideo=_wantsAirPlayVideo;
@property(nonatomic) _Bool isSourceChangeInProgress; // @synthesize isSourceChangeInProgress=_isSourceChangeInProgress;
@property(nonatomic) _Bool fullScreenPlaybackQueue; // @synthesize fullScreenPlaybackQueue=_fullScreenPlaybackQueue;
@property(retain, nonatomic) id <NSObject> representedObject; // @synthesize representedObject=_representedObject;
@property(nonatomic) unsigned long long activeShuffleType; // @synthesize activeShuffleType=_activeShuffleType;
@property(nonatomic) unsigned long long shuffleType; // @synthesize shuffleType=_shuffleType;
@property(nonatomic) unsigned long long repeatType; // @synthesize repeatType=_repeatType;
@property(nonatomic) __weak MPAVController *AVController; // @synthesize AVController=_avController;
- (void).cxx_destruct;
- (void)getContainerType:(unsigned long long *)arg1 mediaLibraryContainerPersistentID:(long long *)arg2 storeContainerID:(id *)arg3 storePersonalizedContainerID:(id *)arg4;
- (id)pathAtIndex:(unsigned long long)arg1;
- (id)localizedPositionInPlaylistString:(id)arg1;
- (id)localizedAttributedPositionInPlaylistStringForItem:(id)arg1 withRegularTextAttributes:(id)arg2 emphasizedTextAttributes:(id)arg3;
- (void)archiveAVControllerPlaybackQueue:(id)arg1 toArchiver:(id)arg2;
- (void)restoreAVControllerPlaybackQueue:(id)arg1 fromUnarchiver:(id)arg2;
- (id)playbackInfoAtIndex:(unsigned long long)arg1;
- (_Bool)_canPurgeNextStartTimes;
- (void)contentInvalidated;
- (void)contentInvalidatedWithCurrentItemMovedToIndex:(unsigned long long)arg1;
- (void)contentsDidChangeByRemovingRange:(struct _NSRange)arg1;
- (_Bool)shouldReloadForChangeFromNetworkType:(long long)arg1 toNetworkType:(long long)arg2;
- (id)itemForIndex:(unsigned long long)arg1;
@property(readonly, nonatomic) unsigned long long itemCount;
- (unsigned long long)initialPlaybackQueueDepthForStartingIndex:(unsigned long long)arg1;
- (_Bool)hasItemForIndex:(unsigned long long)arg1;
- (void)assumeOwnershipOfItems:(id)arg1;
- (void)controller:(id)arg1 willChangePlaybackIndexBy:(long long)arg2 deltaType:(int)arg3 ignoreElapsedTime:(_Bool)arg4 allowSkippingUnskippableContent:(_Bool)arg5;
@property(readonly, nonatomic) unsigned long long realShuffleType;
@property(readonly, nonatomic) unsigned long long realRepeatType;
- (_Bool)hasValidItemAtIndex:(unsigned long long)arg1;
- (id)copyRawItemAtIndex:(unsigned long long)arg1;
- (void)clearReferencesToItem:(id)arg1;
- (void)addReferenceToItem:(id)arg1;
@property(readonly, nonatomic) _Bool userCanChangeShuffleAndRepeatType;
@property(readonly, nonatomic) _Bool trackChangesCanEndPlayback;
- (CDStruct_dcf4dde6)skipLimit;
@property(readonly, nonatomic) NSDictionary *preferredLanguages;
@property(readonly, nonatomic) _Bool playerPreparesItemsForPlaybackAsynchronously;
@property(readonly, nonatomic) int playbackMode;
- (unsigned long long)itemTypeForIndex:(unsigned long long)arg1;
@property(readonly, nonatomic) Class itemClass;
- (_Bool)canSkipToPreviousItem;
- (_Bool)canSkipItem:(id)arg1;
- (_Bool)canSeek;
@property(readonly, nonatomic) _Bool allowsUserVisibleUpcomingItems;
- (_Bool)shouldBeginPlaybackOfItem:(id)arg1 error:(id *)arg2;
- (id)errorResolverForItem:(id)arg1;
- (void)commitSourceChangeWithStartQueueIndex:(unsigned long long)arg1;
- (void)beginSourceChange;
- (_Bool)reloadWithDataSource:(id)arg1 keepPlayingCurrentItemIfPossible:(_Bool)arg2;
- (_Bool)reloadWithDataSource:(id)arg1;
- (void)shuffleItemsWithAnchor:(unsigned long long *)arg1;
- (void)invalidateQueueCaches;
- (void)setNextStartTime:(double)arg1 forIndex:(unsigned long long)arg2;
- (void)_fixNextStartTimesByRemovingRange:(struct _NSRange)arg1;
- (void)_fixNextStartTimesByInsertingRange:(struct _NSRange)arg1;
- (void)dealloc;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface MPTimeMarker : NSObject
{
    double _duration;
    unsigned long long _index;
    double _time;
    NSString *_title;
    NSURL *_url;
    int _markerType;
    NSDictionary *_metadata;
}

@property(retain, nonatomic) NSDictionary *metadata; // @synthesize metadata=_metadata;
@property(readonly, nonatomic) int markerType; // @synthesize markerType=_markerType;
@property(retain, nonatomic) NSURL *url; // @synthesize url=_url;
@property(retain, nonatomic) NSString *title; // @synthesize title=_title;
@property(nonatomic) double time; // @synthesize time=_time;
@property(nonatomic) unsigned long long index; // @synthesize index=_index;
@property(nonatomic) double duration; // @synthesize duration=_duration;
- (void).cxx_destruct;
- (id)urlTitleTrimmingCharacterSet;
@property(readonly, nonatomic) _Bool hasArtworkAtPlaybackTime;
@property(readonly, nonatomic) double maxTime;
@property(readonly, nonatomic) double comparableTime;
- (id)description;
- (id)initWithMarkerType:(int)arg1;

@end

@interface MPAVItemTimeMarkerEvent : NSObject
{
    MPAVItem *_AVItem;
    MPTimeMarker *_chapterMarker;
    MPTimeMarker *_artworkMarker;
    MPTimeMarker *_URLMarker;
    MPTimeMarker *_closedCaptionMarker;
}

@property(retain, nonatomic) MPTimeMarker *closedCaptionMarker; // @synthesize closedCaptionMarker=_closedCaptionMarker;
@property(retain, nonatomic) MPTimeMarker *URLMarker; // @synthesize URLMarker=_URLMarker;
@property(retain, nonatomic) MPTimeMarker *artworkMarker; // @synthesize artworkMarker=_artworkMarker;
@property(retain, nonatomic) MPTimeMarker *chapterMarker; // @synthesize chapterMarker=_chapterMarker;
@property(retain, nonatomic) MPAVItem *AVItem; // @synthesize AVItem=_AVItem;
- (void).cxx_destruct;
- (id)crossedMarkerOfType:(int)arg1;
- (id)initWithTimeMarkerNotificationUserInfo:(id)arg1;

@end

@interface MPAVRoutingTableViewCell : UITableViewCell
{
    UIColor *_contentTintColor;
    UILabel *_mirroringLabel;
    UISwitch *_mirroringSwitch;
    UIView *_mirroringSeparatorView;
    _Bool _mirroringSwitchVisible;
    _Bool _debugCell;
    id <MPAVRoutingTableViewCellDelegate> _delegate;
    MPAVRoute *_route;
}

@property(nonatomic, getter=isDebugCell) _Bool debugCell; // @synthesize debugCell=_debugCell;
@property(nonatomic) _Bool mirroringSwitchVisible; // @synthesize mirroringSwitchVisible=_mirroringSwitchVisible;
@property(retain, nonatomic) MPAVRoute *route; // @synthesize route=_route;
@property(nonatomic) __weak id <MPAVRoutingTableViewCellDelegate> delegate; // @synthesize delegate=_delegate;
- (void).cxx_destruct;
- (_Bool)_shouldShowMirroringAsEnabledForRoute:(id)arg1;
- (void)_mirroringSwitchValueDidChange:(id)arg1;
- (void)_configureLabel:(id)arg1;
- (void)setMirroringSwitchVisible:(_Bool)arg1 animated:(_Bool)arg2;
- (void)setTintColor:(id)arg1;
- (void)layoutSubviews;

@end

@interface MPAVSystemRoutingController : NSObject
{
    NSPointerArray *_clientRoutingControllers;
    long long _clientDiscoveryMode;
    NSObject<OS_dispatch_queue> *_serialQueue;
    int _debugNotifyToken;
}

+ (id)sharedRoutingController;
- (void).cxx_destruct;
- (void)_debugLogSystemControllerState;
- (void)_onQueueUpdateClientRouteDiscoveryMode;
- (void)_updateClientRouteDiscoveryMode;
- (void)_clientRoutingControllerDidUpdateDiscoveryModeNotification:(id)arg1;
- (void)unregisterClientRoutingController:(id)arg1;
- (void)registerClientRoutingController:(id)arg1;
- (void)dealloc;
- (id)_init;
- (id)init;

@end

@interface MPAVController : NSObject <AVAudioSessionDelegateMediaPlayerOnly, MPAVRoutingControllerDelegate, MPAVErrorResolverDelegate, MPAVControllerProtocol>
{
    MPAVPlaylistManager *_avPlaylistManager;
    _Bool _forceSynchronousQueueFilling;
    _Bool _managesSystemDownloads;
    int _playbackMode;
    _Bool _valid;
    MPAVRoutingController *_routingController;
    MPAVRoute *_pickedRoute;
    MPQueueFeeder *_feeder;
    MPAVErrorResolver *_itemErrorResolver;
    AVPlayerLayer *_videoLayer;
    unsigned long long _videoLayerUsageCount;
    MPVideoView *_videoView;
    unsigned long long _tickTimerEnabled;
    struct __CFRunLoopTimer *_tickTimer;
    double _tickInterval;
    struct __CFRunLoopTimer *_currentItemBookkeepingTimer;
    long long _indexChangeDirection;
    unsigned long long _itemIndexAtDeath;
    long long _lastDisconnectReason;
    double _lastKnownTimeBeforeDeath;
    double _lastPlaybackIndexChangeTime;
    double _lastSetTime;
    double _lastSetTimeChangeTime;
    unsigned int _hasDelayedCurrentTimeToSet:1;
    unsigned int _forceDelayedCurrentTimeToSet:1;
    double _delayedCurrentTimeToSet;
    long long _delayedCurrentTimeOptions;
    unsigned long long _lastSetTimeMarker;
    double _temporaryChapterTime;
    unsigned int _autoPlayWhenLikelyToKeepUp:1;
    unsigned int _autoplayDisabledForCurrentItem:1;
    long long _eqPreset;
    double _nextFadeOutDuration;
    id _boundaryTimeObserver;
    NSArray *_boundaryTimes;
    unsigned long long _boundaryTimeIndexLastPosted;
    NSMutableArray *_observerInfos;
    NSMapTable *_observerInfoToCoreMediaObserver;
    float _rateBeforeSeek;
    float _inflightSeekRate;
    unsigned long long _scanLevel;
    long long _scanDirection;
    long long _resetRateAfterSeekingUpdateDisabled;
    unsigned long long _seeklessState;
    unsigned int _isSeekingOrScrubbing:1;
    unsigned int _resetRateAfterSeeking:1;
    unsigned int _activeRewindHoldingAtStart:1;
    double _lastSeekableEnd;
    double _whenSawSeekableEnd;
    double _maxSeekableFwd;
    double _seekFwdSlop;
    double _lastSeekableStart;
    double _whenSawSeekableStart;
    double _maxSeekableRev;
    double _seekRevSlop;
    unsigned int _canSeekRev:1;
    unsigned int _canSeekFwd:1;
    unsigned int _alwaysPlayWheneverPossible:1;
    unsigned int _stopAtEnd:1;
    unsigned int _didReachEnd:1;
    unsigned int _pausedDuringInterruption:1;
    unsigned int _resumePlaybackWhenActive:1;
    unsigned int _useApplicationAudioSession:1;
    unsigned int _playInBackgroundUserDefaultEnabled:1;
    unsigned int _canPlayFastForward:1;
    unsigned int _canPlayFastReverse:1;
    unsigned int _shouldAutoclearDisplayOverride:1;
    unsigned long long _state;
    unsigned long long _displayOverridePlaybackState;
    unsigned long long _bufferingState;
    NSNotification *_delayedPlaybackStateNotification;
    NSObject<OS_dispatch_source> *_stallTimerSource;
    NSMutableArray *_queueFeederStateStack;
    int _feederMode;
    MPAVControllerToAggregateDCommunicator *_aggregateDCommunicator;
    double _itemInitialBookmarkTime;
    float _rateBeforeResignActive;
    long long _ubiquitousBookkeepingDisabledCount;
    double _secondsSinceUbiquitousCheckpoint;
    Class _videoViewClass;
    NSString *_audioSessionModeOverride;
    double _lastInterruptionEnd;
    _Bool _shouldEnforceHDCP;
    NSMutableSet *_clientsWantingAirPlayVideo;
    _Bool _currentItemDidLoad;
    _Bool _currentItemStartedAsCloudItem;
    _Bool _didResolveError;
    _Bool _disallowsAMRAudio;
    _Bool _disableAirPlayMirroringDuringPlayback;
    NSDate *_itemDidChangeDate;
    _Bool _shouldPreventStateChangesForRateChange;
    unsigned long long _stallBackgroundTaskIdentifier;
    _Bool _usesAudioOnlyModeForExternalPlayback;
    _Bool _shouldSkipToNextTrackOnResumeFromInterruption;
    _Bool _useAirPlayMusicMode;
    _Bool _managesAirPlayBehaviors;
}

+ (id)_playerKeysToObserve;
+ (id)_itemKeysToObserve;
+ (id)_controllerKeysToObserve;
+ (_Bool)outputSupportsAC3;
+ (_Bool)isNetworkSupportedPath:(id)arg1;
+ (id)sharedInstance;
+ (void)initialize;
@property(nonatomic) _Bool managesAirPlayBehaviors; // @synthesize managesAirPlayBehaviors=_managesAirPlayBehaviors;
@property(nonatomic) _Bool useAirPlayMusicMode; // @synthesize useAirPlayMusicMode=_useAirPlayMusicMode;
@property(nonatomic) _Bool shouldSkipToNextTrackOnResumeFromInterruption; // @synthesize shouldSkipToNextTrackOnResumeFromInterruption=_shouldSkipToNextTrackOnResumeFromInterruption;
@property(nonatomic) unsigned long long state; // @synthesize state=_state;
@property(nonatomic) _Bool shouldEnforceHDCP; // @synthesize shouldEnforceHDCP=_shouldEnforceHDCP;
@property(nonatomic) double nextFadeOutDuration; // @synthesize nextFadeOutDuration=_nextFadeOutDuration;
@property(nonatomic) _Bool managesSystemDownloads; // @synthesize managesSystemDownloads=_managesSystemDownloads;
@property(nonatomic) _Bool forceSynchronousQueueFilling; // @synthesize forceSynchronousQueueFilling=_forceSynchronousQueueFilling;
@property(nonatomic) int feederMode; // @synthesize feederMode=_feederMode;
@property(readonly, nonatomic) MPQueueFeeder *feeder; // @synthesize feeder=_feeder;
@property(nonatomic) long long EQPreset; // @synthesize EQPreset=_eqPreset;
@property(nonatomic) unsigned long long displayOverridePlaybackState; // @synthesize displayOverridePlaybackState=_displayOverridePlaybackState;
@property(retain, nonatomic) NSString *audioSessionModeOverride; // @synthesize audioSessionModeOverride=_audioSessionModeOverride;
- (void).cxx_destruct;
- (void)_pausePlaybackIfNecessaryIgnoringVideoLayerAttachment:(_Bool)arg1;
- (void)_pausePlaybackIfNecessary;
- (_Bool)_canPlayItem:(id)arg1;
- (_Bool)_itemIsRestricted:(id)arg1;
- (void)_playbackFailedWithError:(id)arg1 canResolve:(_Bool)arg2;
- (id)_pickedRoute;
- (void)_resumeTickTimer;
- (void)_pauseTickTimer;
- (id)_extractImageFromMetadata:(id)arg1;
- (void)_clearSeekingIntervalsForStreaming;
- (void)_updateSeekingIntervalsForStreaming;
- (void)_delayedSetCurrentTime;
- (void)_updateScanningRate;
- (void)setRateForScanning:(float)arg1;
- (void)_updateProgress:(struct __CFRunLoopTimer *)arg1;
- (void)_unregisterForAVPlaylistManagerObservation:(id)arg1;
- (void)_unregisterForAVItemNotifications:(id)arg1;
- (void)_setValid:(_Bool)arg1;
- (void)_setVideoLayerAttachedToPlayer:(_Bool)arg1 force:(_Bool)arg2 pauseIfNecessary:(_Bool)arg3;
- (_Bool)_isVideoLayerAttachedToPlayer;
- (void)_setState:(unsigned long long)arg1;
- (void)_setItemErrorResolver:(id)arg1;
- (void)_clearResetRateAfterSeeking;
- (void)_configureUpdateCurrentItemBookkeepingTimer;
- (void)_cancelUpdateCurrentItemBookkeepingTimer;
- (void)_resumeBookkeepingTimer;
- (void)_pauseBookkeepingTimer;
- (void)_scheduleUpdateCurrentItemBookkeepingTimer;
@property(readonly, nonatomic) unsigned long long _displayPlaybackState;
- (void)setAutoclearingDisplayOverridePlaybackState:(unsigned long long)arg1;
- (void)autoclearDisplayOverride;
- (void)_postPlaybackStateChangedNotificationWithOriginalState:(unsigned long long)arg1 newState:(unsigned long long)arg2 delayable:(_Bool)arg3;
- (void)_delayedPostPlaybackStateChangedNotification;
- (void)_setActionAtEndAttributeForState:(unsigned long long)arg1;
- (void)_setBufferingState:(unsigned long long)arg1;
- (_Bool)_hasEnoughDataToPlay;
- (void)_attemptAutoPlay;
- (void)_resetQueue:(_Bool)arg1 useVideoLayer:(_Bool)arg2;
- (void)_resetInternalState;
- (void)_registerForAVPlaylistManagerObservation:(id)arg1;
- (void)_registerForAVItemNotifications:(id)arg1;
- (void)_reloadTimeMarkerObservationsForItem:(id)arg1;
- (void)_checkForBoundaryTimeCrossing;
- (unsigned long long)_currentIndexInBoundaryCMTimes:(id)arg1;
- (id)embeddedDataTimesForItem:(id)arg1;
- (void)_prepareToPlayItem:(id)arg1;
- (unsigned long long)_playbackIndexForDelta:(long long)arg1 fromIndex:(unsigned long long)arg2 ignoreElapsedTime:(_Bool)arg3;
- (void)_endSeekAndChangeRate:(_Bool)arg1;
- (_Bool)_connectAVPlaylistManager;
- (void)_configureAVPlaylistManager:(id)arg1;
- (void)_clearVideoLayer;
- (_Bool)_changeChapterTimeMarkerIndexBy:(long long)arg1;
- (void)_cancelStallTimer;
- (id)_avPlaylistManager;
- (void)_applyAirPlayMusicMode;
- (void)_verifyDisplayProtection;
- (void)_delayedUpdateTimeMarker;
- (void)_delayedUpdateScanningRate;
- (void)_delayedPlaybackIndexChange;
- (void)notifyAVPlayerItemDidChange:(id)arg1;
- (void)notifyAVPlayerItemWillChange:(id)arg1;
- (void)_mediaLibraryDynamicPropertiesDidChangeNotification:(id)arg1;
- (void)_updateCurrentTimeToBookmarkTimeForDynamicPropertyChange;
- (void)_applicationWillEnterForegroundNotification:(id)arg1;
- (void)_applicationSuspended:(id)arg1;
- (void)_applicationSuspendedEventsOnly:(id)arg1;
- (void)_applicationDidEnterBackgroundNotification:(id)arg1;
- (void)_applicationDidBecomeActive:(id)arg1;
- (void)_applicationWillResignActive:(id)arg1;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (void)airPlayVideoEnded;
- (void)_volumeDidChangeNotification:(id)arg1;
- (void)_tracksDidChange:(id)arg1;
- (void)_timedMetadataAvailable:(id)arg1;
- (void)_timeHasJumpedNotification:(id)arg1;
- (void)_streamUnlikelyToKeepUp:(id)arg1;
- (void)_streamRanDry:(id)arg1;
- (void)_streamLikelyToKeepUp:(id)arg1;
- (void)_streamBufferFull:(id)arg1;
- (void)_sizeDidChange:(id)arg1;
- (void)_serverConnectionDidDie:(id)arg1;
- (void)_disconnectAVPlaylistManagerWithReason:(long long)arg1;
- (void)_rateDidChange:(id)arg1;
- (void)_updateCurrentItemBookkeepingForTimerCallback;
- (void)_updateCurrentItemBookkeepingMarkedAsCheckpoint:(_Bool)arg1;
@property(nonatomic) _Bool ubiquitousBookkeepingEnabled;
- (void)endInterruptionFromInterruptor:(id)arg1 category:(id)arg2 flags:(unsigned long long)arg3;
- (void)beginInterruption;
- (void)_itemWillChange:(id)arg1;
- (void)_itemReadyToPlay:(id)arg1;
- (void)_itemPlaybackDidEndNotification:(id)arg1;
- (void)_itemFailedToPlayToEnd:(id)arg1;
- (void)_itemFailedToPlayToEndNotification:(id)arg1;
- (void)_playerFailedToQueueNotification:(id)arg1;
- (void)_itemDidChange:(id)arg1;
- (_Bool)_isChangingQueueContents;
- (void)_itemTypeAvailableNotification:(id)arg1;
- (void)_itemTimeMarkersAvailableNotification:(id)arg1;
- (void)_itemAssetIsLoadedNotification:(id)arg1;
- (void)_isExternalPlaybackActiveDidChange:(id)arg1;
- (void)_firstVideoFrameDisplayed:(id)arg1;
- (void)_durationDidChange:(id)arg1;
- (void)_postMPAVControllerItemReadyToPlayNotificationWithItem:(id)arg1;
- (void)_postMPAVControllerSizeDidChangeNotificationWithItem:(id)arg1;
- (void)errorResolver:(id)arg1 didResolveError:(id)arg2 withResolution:(long long)arg3;
- (void)routingControllerExternalScreenTypeDidChange:(id)arg1;
- (void)routingControllerAvailableRoutesDidChange:(id)arg1;
- (void)skipToSeekableEnd;
- (void)skipToSeekableStart;
- (_Bool)canSkipToSeekableEnd;
- (_Bool)canPlayFastReverse;
- (_Bool)canSeekForwards;
- (_Bool)canSeekBackwards;
- (_Bool)isLiveStreaming;
- (double)timeOfSeekableEnd;
- (double)timeOfSeekableStart;
- (double)timeOfPlayableEnd;
- (double)timeOfPlayableStart;
@property(readonly, nonatomic) double playableDurationOfCurrentItemIfAvailable;
@property(readonly, nonatomic) double durationOfCurrentItemIfAvailable;
- (void)_setVideoViewClass:(Class)arg1;
@property(readonly, nonatomic) _Bool showPlaybackStateOverlaysOnTVOut;
- (_Bool)shouldHaveNoActionAtEndForState:(unsigned long long)arg1;
- (void)finalizeBookkeepingNow;
- (void)updateBookkeepingNow;
- (void)reloadWithPlaybackContext:(id)arg1;
- (void)ensureFeederIsSubclass:(Class)arg1;
- (void)ensureFeederIsClass:(Class)arg1;
- (void)restorePreviousFeederState;
- (void)saveCurrentFeederState;
@property(readonly, nonatomic) MPVideoView *videoView;
@property(readonly, nonatomic) CALayer *videoLayer;
@property(nonatomic, getter=destinationIsTVOut, setter=setDestinationIsTVOut:) _Bool destinationIsTVOut;
@property(nonatomic) _Bool usesAudioOnlyModeForExternalPlayback;
- (void)switchToVideoPlayback:(_Bool)arg1 forItem:(id)arg2;
- (void)switchToAudioPlayback:(_Bool)arg1 forItem:(id)arg2;
- (void)_setLastSetTime:(double)arg1;
- (void)setCurrentTime:(double)arg1 options:(long long)arg2;
@property(copy, nonatomic) NSString *externalPlaybackVideoGravity;
- (void)setActive:(_Bool)arg1;
- (void)reloadFeederWithStartQueueIndex:(unsigned long long)arg1;
@property(readonly, nonatomic) AVAudioSessionMediaPlayerOnly *_playerAVAudioSession;
- (void)feederChangedContents:(id)arg1;
- (void)switchToFeeder:(id)arg1 mode:(int)arg2 index:(unsigned long long)arg3 play:(_Bool)arg4;
- (void)_switchToFeeder:(id)arg1 mode:(int)arg2 index:(unsigned long long)arg3 play:(_Bool)arg4 configureFeederBlock:(CDUnknownBlockType)arg5;
- (_Bool)_shouldSwitchToAudioPlaybackWhenTransitioningFromVideo;
@property(readonly, nonatomic) long long externalPlaybackType;
- (id)_expectedAssetTypesForPlaybackMode:(int)arg1;
- (void)ensureHasAVPlaylistManager;
- (void)endUsingVideoLayer;
@property(nonatomic) _Bool disallowsAMRAudio;
@property(readonly, nonatomic) _Bool currentItemIsRental;
- (void)beginUsingVideoLayer;
- (void)contentInvalidatedWithCurrentItemMovedToIndex:(unsigned long long)arg1;
- (void)contentInvalidated;
- (void)contentsDidChangeByRemovingRange:(struct _NSRange)arg1;
@property(readonly, nonatomic) MPQueuePlayer *avPlayer;
- (void)applyShuffleSettings;
- (void)applyRepeatSettings;
- (void)applicationWillTerminate;
- (void)applicationDidReceiveMemoryWarningAsUrgent:(_Bool)arg1;
- (void)enableAutoplayForCurrentItem;
- (void)disableAutoplayForCurrentItem;
@property(readonly, nonatomic) _Bool isCurrentItemReady;
@property(nonatomic) _Bool useApplicationAudioSession;
@property(readonly, nonatomic) MPAVRoutingController *routingController; // @synthesize routingController=_routingController;
@property(nonatomic) _Bool stopAtEnd;
@property(nonatomic) int playbackMode;
@property(readonly, nonatomic, getter=isFullScreenVideoMode) _Bool fullScreenVideoMode;
@property(readonly, nonatomic) NSString *routeNameForVolumeControl;
@property(readonly, nonatomic) _Bool muted;
@property(nonatomic) float volume;
@property(readonly, nonatomic) _Bool hasVolumeControl;
@property(nonatomic) unsigned long long shuffleType;
@property(nonatomic) unsigned long long repeatType;
- (_Bool)_setRate:(float)arg1 forScanning:(_Bool)arg2;
- (_Bool)setRate:(float)arg1;
@property(nonatomic) _Bool closedCaptioningEnabled;
@property(nonatomic) _Bool disableAirPlayMirroringDuringPlayback;
- (float)rate;
@property(readonly, nonatomic) unsigned long long numberOfItems;
@property(nonatomic) _Bool alwaysPlayWheneverPossible;
@property(readonly, nonatomic, getter=isValid) _Bool valid;
@property(readonly, nonatomic, getter=isShuffled) _Bool shuffled;
- (_Bool)shouldDisplayAsPlaying;
@property(readonly, nonatomic, getter=isPlaying) _Bool playing;
@property(readonly, nonatomic) _Bool isExternalPlaybackActive;
- (unsigned long long)_seeklessStateForState:(unsigned long long)arg1;
- (_Bool)_showsPlayingWhenInState:(unsigned long long)arg1;
@property(readonly, nonatomic) MPMediaQuery *currentMediaQuery;
@property(readonly, nonatomic) MPMediaItem *currentMediaItem;
@property(readonly, nonatomic) MPAVItem *currentItem;
@property(readonly, nonatomic) unsigned long long bufferingState; // @synthesize bufferingState=_bufferingState;
@property(nonatomic) _Bool autoPlayWhenLikelyToKeepUp;
- (void)setClient:(id)arg1 wantsToAllowAirPlayVideo:(_Bool)arg2;
- (_Bool)allowsExternalPlayback;
@property(readonly, nonatomic) unsigned long long activeShuffleType;
@property(readonly, nonatomic) unsigned long long activeRepeatType;
- (void)tickTimerFired;
- (_Bool)isTickTimerEnabled;
- (void)endTickTimer;
- (void)beginTickTimerWithInterval:(double)arg1;
- (void)_addObserverInfo:(id)arg1 forCoreMediaObserver:(id)arg2 forInitialCreation:(_Bool)arg3;
- (void)removeTimeObserver:(id)arg1;
- (id)addBoundaryTimeObserverForTimes:(id)arg1 usingBlock:(CDUnknownBlockType)arg2;
- (id)addPeriodicTimeObserverForInterval:(double)arg1 usingBlock:(CDUnknownBlockType)arg2;
- (_Bool)forceRestartPlaybackIfNecessary;
- (void)togglePlaybackWithOptions:(long long)arg1;
- (void)togglePlayback;
@property(nonatomic) double currentTime;
- (void)playChapterTimeMarkerAtIndex:(unsigned long long)arg1 withOptions:(long long)arg2;
- (void)playChapterTimeMarkerAtIndex:(unsigned long long)arg1;
- (void)playItemAtIndex:(unsigned long long)arg1 withOptions:(long long)arg2;
- (void)playItemAtIndex:(unsigned long long)arg1 forceRestart:(_Bool)arg2;
- (void)playItemAtIndex:(unsigned long long)arg1;
- (void)playWithOptions:(long long)arg1;
- (void)play;
- (void)pause;
- (void)pauseWithFadeout:(float)arg1;
- (void)disconnectPlaylistManagerForTeardown;
- (void)endPlayback;
@property(readonly, nonatomic) double currentMonotonousTime;
- (double)currentTimeForBookmarking;
@property(readonly, nonatomic, getter=isRewindHoldingAtStart) _Bool rewindHoldingAtStart;
- (_Bool)isSeekingOrScrubbing;
- (_Bool)fadeOutForQuit;
- (void)endSeek;
- (_Bool)changePlaybackIndexBy:(long long)arg1 deltaType:(int)arg2 ignoreElapsedTime:(_Bool)arg3 allowSkippingUnskippableContent:(_Bool)arg4 error:(id *)arg5;
- (void)changePlaybackIndexBy:(long long)arg1 deltaType:(int)arg2 ignoreElapsedTime:(_Bool)arg3 allowSkippingUnskippableContent:(_Bool)arg4;
- (void)changePlaybackIndexBy:(long long)arg1 deltaType:(int)arg2 ignoreElapsedTime:(_Bool)arg3;
- (void)changePlaybackIndexBy:(long long)arg1 deltaType:(int)arg2;
- (void)changePlaybackIndexBy:(long long)arg1;
- (void)setPlaybackIndex:(long long)arg1;
- (void)setPlaybackIndex:(long long)arg1 selectionDirection:(long long)arg2;
- (void)_setAVControllerQueueFeeder:(id)arg1 startQueueIndex:(unsigned long long)arg2;
- (void)_clearLastSetTimeIfPlayerTimeIsValid;
- (void)_updateCurrentTimeToNextStartTimeForQueueFeeder:(id)arg1 withItemIndex:(long long)arg2;
- (void)beginSeek:(int)arg1;
- (void)dealloc;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface MPAlternateTracksTransitionController : MPTransitionController
{
    MPVideoViewController *_videoController;
    UIImageView *_snapshotCoverImageView;
}

@property(nonatomic) __weak MPVideoViewController *videoController; // @synthesize videoController=_videoController;
- (void).cxx_destruct;
- (void)performTransition:(unsigned long long)arg1;

@end

@interface MPStoreItemOffer : NSObject <NSSecureCoding>
{
    NSDictionary *_typeToActionText;
    NSString *_buyParameters;
    NSString *_formattedPrice;
    NSString *_offerType;
    NSNumber *_price;
}

+ (_Bool)supportsSecureCoding;
@property(readonly, nonatomic) NSNumber *price; // @synthesize price=_price;
@property(readonly, nonatomic) NSString *offerType; // @synthesize offerType=_offerType;
@property(readonly, nonatomic) NSString *formattedPrice; // @synthesize formattedPrice=_formattedPrice;
@property(readonly, nonatomic) NSString *buyParameters; // @synthesize buyParameters=_buyParameters;
- (void).cxx_destruct;
- (id)actionTextForType:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (_Bool)isEqual:(id)arg1;
- (unsigned long long)hash;
- (id)initWithCoder:(id)arg1;
- (id)initWithLookupItemOffer:(id)arg1;

@end

@interface MPFlipTransitionController : MPTransitionController
{
    UIView *_fromView;
    struct CGRect _toFrame;
    double _topMargin;
}

@property(nonatomic) double topMargin; // @synthesize topMargin=_topMargin;
@property(nonatomic) struct CGRect toFrame; // @synthesize toFrame=_toFrame;
@property(retain, nonatomic) UIView *fromView; // @synthesize fromView=_fromView;
- (void).cxx_destruct;
- (id)_subtypeForTransitionType:(unsigned long long)arg1;
- (void)animationDidStop:(id)arg1 finished:(_Bool)arg2;
- (void)performTransition:(unsigned long long)arg1;
- (id)init;

@end

@interface MPTransitionController : NSObject
{
    struct __CFDictionary *_observers;
    float _duration;
    UIView *_rootView;
    NSMutableSet *_persistentViewsToFadeOut;
    NSMutableSet *_viewsToFadeOut;
    NSMutableSet *_persistentViewsToFadeIn;
    NSMutableSet *_viewsToFadeIn;
    MPViewController *_fromViewController;
    long long _fromInterfaceOrientation;
    MPViewController *_toViewController;
    long long _toInterfaceOrientation;
    UIViewController *_toContainerViewController;
}

@property(retain, nonatomic) UIViewController *toContainerViewController; // @synthesize toContainerViewController=_toContainerViewController;
@property(retain, nonatomic) MPViewController *toViewController; // @synthesize toViewController=_toViewController;
@property(nonatomic) long long toInterfaceOrientation; // @synthesize toInterfaceOrientation=_toInterfaceOrientation;
@property(retain, nonatomic) UIView *rootView; // @synthesize rootView=_rootView;
@property(retain, nonatomic) MPViewController *fromViewController; // @synthesize fromViewController=_fromViewController;
@property(nonatomic) long long fromInterfaceOrientation; // @synthesize fromInterfaceOrientation=_fromInterfaceOrientation;
@property(nonatomic) float duration; // @synthesize duration=_duration;
- (void).cxx_destruct;
- (void)messageObserversWithSuccess:(_Bool)arg1;
- (void)transition:(unsigned long long)arg1;
- (void)didFinishTransition:(_Bool)arg1;
- (void)performTransition:(unsigned long long)arg1;
- (void)willBeginTransition:(unsigned long long)arg1;
- (void)removeObserver:(id)arg1;
- (void)fadeViewsForRestore:(_Bool)arg1;
- (void)addViewToFadeOut:(id)arg1 restoreOnPop:(_Bool)arg2;
- (void)addViewToFadeIn:(id)arg1 restoreOnPop:(_Bool)arg2;
- (void)addObserver:(id)arg1 didEndSelector:(SEL)arg2;
- (void)dealloc;
- (id)init;

@end

@interface MPQueryPlaybackContext : MPPlaybackContext
{
    _Bool _shouldRestartPlaybackIfQueueChanges;
    NSArray *_prefixMediaItems;
    MPMediaQuery *_query;
    unsigned long long _startIndex;
}

@property(nonatomic) unsigned long long startIndex; // @synthesize startIndex=_startIndex;
@property(nonatomic) _Bool shouldRestartPlaybackIfQueueChanges; // @synthesize shouldRestartPlaybackIfQueueChanges=_shouldRestartPlaybackIfQueueChanges;
@property(readonly, nonatomic) MPMediaQuery *query; // @synthesize query=_query;
@property(copy, nonatomic) NSArray *prefixMediaItems; // @synthesize prefixMediaItems=_prefixMediaItems;
- (void).cxx_destruct;
- (id)initWithQuery:(id)arg1;

@end

@interface MPAlternateTracksViewController : MPAbstractAlternateTracksViewController <UITableViewDataSource, UITableViewDelegate>
{
    UIView *_backgroundView;
    UINavigationBar *_navigationBar;
    UITableView *_table;
    UIProgressIndicator *_progressIndicator;
    UITextLabel *_loadingLabel;
}

- (void).cxx_destruct;
- (void)_setCell:(id)arg1 isChecked:(_Bool)arg2;
- (void)_exitAnimated:(_Bool)arg1;
- (void)removeLoadingUI;
- (void)addLoadingUI;
- (void)reloadData;
- (void)tableView:(id)arg1 willDisplayCell:(id)arg2 forRowAtIndexPath:(id)arg3;
- (id)tableView:(id)arg1 viewForHeaderInSection:(long long)arg2;
- (long long)tableView:(id)arg1 numberOfRowsInSection:(long long)arg2;
- (double)tableView:(id)arg1 heightForHeaderInSection:(long long)arg2;
- (void)tableView:(id)arg1 didSelectRowAtIndexPath:(id)arg2;
- (id)tableView:(id)arg1 cellForRowAtIndexPath:(id)arg2;
- (long long)numberOfSectionsInTableView:(id)arg1;
- (void)_doneButtonAction:(id)arg1;
- (void)_cancelButtonAction:(id)arg1;
- (void)loadView;
- (void)viewWillAppear:(_Bool)arg1;
- (void)willChangeToInterfaceOrientation:(long long)arg1;
- (void)didChangeToInterfaceOrientation:(long long)arg1;
- (void)dealloc;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface MPWeakTimer : NSObject
{
    NSObject<OS_dispatch_source> *_timerSource;
}

+ (id)timerWithInterval:(double)arg1 repeats:(_Bool)arg2 queue:(id)arg3 block:(CDUnknownBlockType)arg4;
+ (id)timerWithInterval:(double)arg1 queue:(id)arg2 block:(CDUnknownBlockType)arg3;
+ (id)timerWithInterval:(double)arg1 repeats:(_Bool)arg2 block:(CDUnknownBlockType)arg3;
+ (id)timerWithInterval:(double)arg1 block:(CDUnknownBlockType)arg2;
- (void).cxx_destruct;
- (void)invalidate;
- (void)dealloc;
- (id)initWithInterval:(double)arg1 repeats:(_Bool)arg2 queue:(id)arg3 block:(CDUnknownBlockType)arg4;
- (id)initWithInterval:(double)arg1 queue:(id)arg2 block:(CDUnknownBlockType)arg3;

@end

@interface MPVideoViewController : MPViewController <MPVideoControllerProtocol, MPSwipableViewDelegate, UIModalViewDelegate>
{
    MPVideoBackgroundView *_backgroundView;
    MPSwipableView *_backstopView;
    _Bool _batteryMonitoringWasEnabled;
    MPClosedCaptionDisplay *_captionView;
    unsigned long long _desiredParts;
    unsigned long long _disabledParts;
    unsigned long long _visibleParts;
    unsigned int _tvOutEnabled:1;
    unsigned int _allowsTVOutInBackground:1;
    unsigned long long _itemTypeOverride;
    unsigned long long _scaleMode;
    unsigned long long _scaleModeOverride;
    UIAlertView *_alertSheet;
    UIColor *_backstopColor;
    UIActivityIndicatorView *_loadingIndicator;
    MPTVOutWindow *_tvOutWindow;
    unsigned long long _backgroundTaskId;
    int _artworkImageStyle;
    UIImage *_posterImage;
    unsigned int _canAnimateControlsOverlay:1;
    unsigned int _canShowControlsOverlay:1;
    unsigned int _disableControlsAutohide:1;
    unsigned int _playAfterPop:1;
    unsigned int _scheduledLoadingIndicator:1;
    unsigned int _displayPlaybackErrorAlerts:1;
    unsigned int _allowsDetailScrubbing:1;
    unsigned int _attemptAutoPlayWhenControlsHidden:1;
    unsigned int _alwaysAllowHidingControlsOverlay:1;
    unsigned int _hasShownFirstVideoFrame:1;
    unsigned int _allowsWirelessPlayback:1;
    unsigned int _disableAutoRotation:1;
    unsigned int _inlinePlaybackUsesTVOut:1;
}

+ (long long)_activityIndicatorViewStyle;
+ (struct CGRect)calculateArtworkImageViewFrameInRect:(struct CGRect)arg1;
+ (_Bool)supportsFullscreenDisplay;
@property(nonatomic) unsigned long long visibleParts; // @synthesize visibleParts=_visibleParts;
@property(retain, nonatomic) UIImage *posterImage; // @synthesize posterImage=_posterImage;
@property(nonatomic) unsigned long long itemTypeOverride; // @synthesize itemTypeOverride=_itemTypeOverride;
@property(nonatomic) unsigned long long disabledParts; // @synthesize disabledParts=_disabledParts;
@property(nonatomic) unsigned long long desiredParts; // @synthesize desiredParts=_desiredParts;
@property(retain, nonatomic) UIColor *backstopColor; // @synthesize backstopColor=_backstopColor;
@property(nonatomic) int artworkImageStyle; // @synthesize artworkImageStyle=_artworkImageStyle;
- (void).cxx_destruct;
- (void)_updateProgressControlForItem:(id)arg1;
- (void)_updateIdleTimerDisabledFromPlaybackState:(unsigned long long)arg1;
- (_Bool)_showDestinationPlaceholder;
- (void)_hideLoadingIndicator;
- (void)_delayedUpdateBackgroundView;
- (_Bool)_canEnableAirPlayVideoRoutes;
- (unsigned long long)disabledPartsForProposedParts:(unsigned long long)arg1;
- (void)backgroundViewDidUpdate;
- (id)newAlternateTracksTransition;
@property(nonatomic) _Bool alwaysAllowHidingControlsOverlay;
- (void)setControlsOverlayVisible:(_Bool)arg1 animate:(_Bool)arg2 force:(_Bool)arg3;
- (void)setControlsOverlayVisible:(_Bool)arg1 animate:(_Bool)arg2;
@property(nonatomic) _Bool controlsOverlayVisible;
@property(nonatomic) _Bool canShowControlsOverlay;
@property(nonatomic) _Bool canAnimateControlsOverlay;
- (void)_scheduleLoadingIndicatorIfNeeded;
- (void)_showStillFrameIfNotAlreadyPlaying;
- (void)handleScaleModeChange;
- (void)displayVideoViewOnTV;
- (void)displayVideoViewOnScreen;
- (void)displayVideoView;
- (void)tearDownTVOutWindow;
- (void)_delayedShowLoading;
- (void)_delayedPopForTimeJump;
- (void)_itemDurationDidChange:(id)arg1;
- (void)_screenDidDisconnect:(id)arg1;
- (void)_screenDidConnect:(id)arg1;
- (void)_popForTimeJump:(id)arg1;
- (void)videoView_bufferingStateChangedNotification:(id)arg1;
- (void)_updateBackgroundView:(_Bool)arg1;
- (void)videoView_firstVideoFrameDisplayedNotification:(id)arg1;
- (void)videoView_itemTypeAvailableNotification:(id)arg1;
- (void)_videoView_validityChangedNotification:(id)arg1;
- (void)videoView_tvOutCapabilityDidChangeNotification:(id)arg1;
- (void)_videoView_timedImageMetadataAvailableNotification:(id)arg1;
- (void)_videoView_sizeChangedNotification:(id)arg1;
- (void)_videoView_scaleModeChangedNotification:(id)arg1;
- (void)_videoView_resumeEventsOnlyNotification:(id)arg1;
- (void)videoView_playbackStateChangedNotification:(id)arg1;
- (void)_exitPlayerForPlaybackError;
- (void)_videoView_playbackErrorNotification:(id)arg1;
- (void)_videoView_isExternalPlaybackActiveDidChangeNotification:(id)arg1;
- (void)_videoView_effectiveScaleModeChangedNotification:(id)arg1;
- (void)_videoView_batteryStateDidChangeNotification:(id)arg1;
- (void)_videoView_availableRoutesDidChangeNotification:(id)arg1;
- (void)_videoView_applicationWillEnterForegroundNotification:(id)arg1;
- (void)_videoView_applicationSuspendedNotification:(id)arg1;
- (void)_endBackgroundTask;
- (void)alertView:(id)arg1 clickedButtonAtIndex:(long long)arg2;
@property(readonly, nonatomic) _Bool viewControllerWillRequestExit;
@property(readonly, nonatomic) _Bool canShowQTAudioOnlyUI;
- (void)setFullscreen:(_Bool)arg1 animated:(_Bool)arg2;
@property(nonatomic, getter=isFullscreen) _Bool fullscreen;
@property(readonly, nonatomic, getter=isTransitioningFromFullscreen) _Bool transitioningFromFullscreen;
@property(readonly, nonatomic, getter=isTransitioningToFullscreen) _Bool transitioningToFullscreen;
@property(nonatomic) _Bool displayPlaybackErrorAlerts;
@property(readonly, nonatomic) UIView<MPVideoOverlay> *videoOverlayViewIfLoaded;
@property(readonly, retain, nonatomic) UIView<MPVideoOverlay> *videoOverlayView;
@property(readonly, retain, nonatomic) MPVideoView *videoView;
@property(nonatomic) _Bool allowsTVOutInBackground;
@property(nonatomic) _Bool TVOutEnabled;
@property(retain, nonatomic) MPAVController *player;
- (void)viewWillDisappear:(_Bool)arg1;
- (void)viewDidAppear:(_Bool)arg1;
- (void)prepareToDisplayVideo;
- (void)removeChildViewController:(id)arg1;
- (void)noteIgnoredChangeTypes:(unsigned long long)arg1;
- (void)loadView;
- (void)exitFullscreen;
@property(readonly, nonatomic) unsigned int hostedWindowContextID;
@property(readonly, nonatomic) _UIHostedWindow *hostedWindow;
- (void)setUseHostedWindowWhenFullscreen:(_Bool)arg1;
@property(readonly, nonatomic) UIView *artworkImageView;
@property(readonly, nonatomic) _Bool showArtworkForTVOut;
- (void)setControlsNeedLayout;
@property(nonatomic) _Bool inlinePlaybackUsesTVOut;
@property(nonatomic) _Bool disableAutoRotation;
@property(nonatomic) _Bool attemptAutoPlayWhenControlsHidden;
@property(nonatomic) _Bool autoPlayWhenLikelyToKeepUp;
@property(nonatomic) _Bool allowsWirelessPlayback;
@property(nonatomic) _Bool allowsDetailScrubbing;
- (void)toggleScaleMode:(_Bool)arg1;
- (unsigned long long)visiblePartsForProposedParts:(unsigned long long)arg1;
- (void)setVisibleParts:(unsigned long long)arg1 animate:(_Bool)arg2;
- (void)setScaleModeOverride:(unsigned long long)arg1 animated:(_Bool)arg2;
@property(nonatomic) unsigned long long scaleMode; // @synthesize scaleMode=_scaleMode;
- (void)setScaleMode:(unsigned long long)arg1 animated:(_Bool)arg2;
@property(nonatomic) _Bool disableControlsAutohide;
- (void)setDesiredParts:(unsigned long long)arg1 animate:(_Bool)arg2;
@property(retain, nonatomic) MPAVItem *item;
- (void)_updateAlwaysPlayWheneverPossible;
@property(readonly, nonatomic) _Bool canChangeScaleMode;
@property(readonly, nonatomic) UIView *backgroundView;
- (void)_fixupViewHierarchyIfNecessary;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (void)enableAirPlayVideoRoutesIfNecessary;
- (void)reloadArtworkImageView;
- (id)newArtworkImageView;
- (void)setOrientation:(long long)arg1 animate:(_Bool)arg2;
@property(readonly, nonatomic) _Bool showArtworkInImageView;
- (unsigned long long)_itemTypeWithActualTypePreference;
- (struct CGRect)calculateArtworkImageViewFrame;
- (struct CGRect)calculateFullScreenArtworkImageViewFrame;
- (int)displayArtworkImageStyle;
- (_Bool)isFullscreenForLayoutPurposes;
- (void)crossedTimeMakerWithEvent:(id)arg1;
- (void)_updateClosedCaptionDisplay;
- (void)willChangeToInterfaceOrientation:(long long)arg1;
- (void)showAlternateTracksController:(id)arg1;
- (_Bool)canHideOverlay:(_Bool)arg1;
- (void)setClosedCaptions:(id)arg1;
- (void)unregisterForPlayerNotifications;
- (void)registerForPlayerNotifications;
- (void)setOwnsStatusBar:(_Bool)arg1;
- (void)dealloc;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(nonatomic) __weak id delegate;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(nonatomic) long long orientation;
@property(readonly) Class superclass;
@property(readonly, retain, nonatomic) UIView *view;

@end

@interface MPViewController : UIViewController <MPControllerProtocol, MPAVControllerNode>
{
    id _delegate;
    long long _interfaceOrientation;
    MPAVItem *_item;
    MPAVController *_player;
    MPViewController *_pushedViewController;
    MPTransitionController *_pushedTransitionController;
    CDUnknownBlockType _popViewControllerHandler;
    unsigned int _appearing:1;
    unsigned int _observesApplicationSuspendResumeEventsOnly:1;
    unsigned int _showOverlayWhileAppearingDisabled:1;
    _Bool _registeredForPlayerNotifications;
    long long _playerLockedCount;
    _Bool _idleTimerDisabled;
}

@property(nonatomic, getter=idleTimerDisabled, setter=setIdleTimerDisabled:) _Bool idleTimerDisabled; // @synthesize idleTimerDisabled=_idleTimerDisabled;
@property(nonatomic) _Bool registeredForPlayerNotifications; // @synthesize registeredForPlayerNotifications=_registeredForPlayerNotifications;
@property(copy, nonatomic) CDUnknownBlockType popViewControllerHandler; // @synthesize popViewControllerHandler=_popViewControllerHandler;
@property(nonatomic) long long orientation; // @synthesize orientation=_interfaceOrientation;
@property(retain, nonatomic) MPAVItem *item; // @synthesize item=_item;
@property(retain, nonatomic) MPAVController *player; // @synthesize player=_player;
@property(nonatomic) __weak id delegate; // @synthesize delegate=_delegate;
- (void).cxx_destruct;
- (void)_pushTransitionEnded:(id)arg1;
- (void)_popTransitionEnded:(id)arg1;
- (_Bool)_canReloadView;
- (void)removeChildViewController:(id)arg1;
- (void)addChildViewController:(id)arg1;
- (void)viewWillDisappear:(_Bool)arg1;
- (void)viewWillAppear:(_Bool)arg1;
- (void)viewDidAppear:(_Bool)arg1;
- (void)setView:(id)arg1;
- (void)clearWeakReferencesToObject:(id)arg1;
- (void)setOrientation:(long long)arg1 animate:(_Bool)arg2;
- (void)incrementAggregateStatisticsDisplayCount;
- (void)unregisterForPlayerNotifications;
- (void)registerForPlayerNotifications;
- (void)unlockPlayer;
- (void)lockPlayer;
- (void)setAppearing:(_Bool)arg1;
- (void)willChangeToInterfaceOrientation:(long long)arg1;
- (id)popViewControllerAnimated:(_Bool)arg1;
- (void)pushViewController:(id)arg1 withTransition:(id)arg2;
- (void)noteIgnoredChangeTypes:(unsigned long long)arg1;
@property(nonatomic) _Bool observesApplicationSuspendResumeEventsOnly;
- (void)applicationResumed;
- (void)applicationDidResumeEventsOnly;
- (void)applicationDidSuspendEventsOnly;
- (void)stopTicking;
- (void)startTicking;
- (_Bool)isAppearing;
- (void)endIgnoringChangeTypes:(unsigned long long)arg1;
- (long long)displayableInterfaceOrientationForInterfaceOrientation:(long long)arg1;
- (void)didChangeToInterfaceOrientation:(long long)arg1;
- (void)endTransitionOverlayHidingWithTransferedOverlayView:(id)arg1;
- (void)beginTransitionOverlayHidding;
- (id)copyOverlayViewForTransitionToItem:(id)arg1;
- (_Bool)canDisplayItem:(id)arg1 withInterfaceOrientation:(long long)arg2;
- (void)beginIgnoringChangeTypes:(unsigned long long)arg1;
- (void)dealloc;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;
@property(readonly, retain, nonatomic) UIView *view;

@end

@interface MPPCompoundPredicate : PBCodable <NSCopying>
{
    NSMutableArray *_predicates;
}

@property(retain, nonatomic) NSMutableArray *predicates; // @synthesize predicates=_predicates;
- (void).cxx_destruct;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)copyTo:(id)arg1;
- (void)writeTo:(id)arg1;
- (_Bool)readFrom:(id)arg1;
- (id)dictionaryRepresentation;
- (id)description;
- (id)predicatesAtIndex:(unsigned long long)arg1;
- (unsigned long long)predicatesCount;
- (void)addPredicates:(id)arg1;
- (void)clearPredicates;
- (void)dealloc;

@end

@interface MPReflectionImageView : _UIReflectingView
{
    UIImageView *_imageView;
    _Bool _squareImage;
}

+ (double)defaultReflectionHeight;
@property(nonatomic) _Bool squareImage; // @synthesize squareImage=_squareImage;
@property(readonly, nonatomic) UIImageView *imageView; // @synthesize imageView=_imageView;
- (void).cxx_destruct;
- (void)setReflectionVisible:(_Bool)arg1 withDuration:(float)arg2;
- (void)setFrame:(struct CGRect)arg1 withReflectionHeight:(double)arg2;
@property(retain, nonatomic) UIImage *image;
- (void)setAlbumVisible:(_Bool)arg1 reflectionVisible:(_Bool)arg2;
- (id)albumArtImage;
- (id)initWithFrame:(struct CGRect)arg1;

@end

@interface MPRemotePlaybackQueue : NSObject
{
    struct _MRSystemAppPlaybackQueue *_mediaRemotePlaybackQueue;
    NSDictionary *_userInfo;
}

+ (id)queueWithMediaRemotePlaybackQueue:(struct _MRSystemAppPlaybackQueue *)arg1;
@property(readonly, nonatomic) NSDictionary *userInfo; // @synthesize userInfo=_userInfo;
- (void).cxx_destruct;
- (void)dealloc;
@property(readonly, nonatomic, getter=isRequestingImmediatePlayback) _Bool requestingImmediatePlayback;
- (id)init;
- (id)initWithMediaRemotePlaybackQueue:(struct _MRSystemAppPlaybackQueue *)arg1;

@end

@interface MPLocalMediaQueryRemotePlaybackQueue : MPRemotePlaybackQueue
{
    MPMediaQuery *_mediaQuery;
    MPMediaItem *_firstItem;
    unsigned long long _shuffleType;
    unsigned long long _repeatType;
}

@property(readonly, nonatomic) unsigned long long repeatType; // @synthesize repeatType=_repeatType;
@property(readonly, nonatomic) unsigned long long shuffleType; // @synthesize shuffleType=_shuffleType;
@property(readonly, nonatomic) MPMediaItem *firstItem; // @synthesize firstItem=_firstItem;
@property(readonly, nonatomic) MPMediaQuery *mediaQuery; // @synthesize mediaQuery=_mediaQuery;
- (void).cxx_destruct;
- (id)description;
- (id)initWithMediaRemotePlaybackQueue:(struct _MRSystemAppPlaybackQueue *)arg1;

@end

@interface MPRadioStationRemotePlaybackQueue : MPRemotePlaybackQueue
{
    MPRadioStation *_radioStation;
}

@property(readonly, nonatomic) MPRadioStation *radioStation; // @synthesize radioStation=_radioStation;
- (void).cxx_destruct;
- (id)description;
- (id)initWithMediaRemotePlaybackQueue:(struct _MRSystemAppPlaybackQueue *)arg1;

@end

@interface MPiTunesStoreTracklistPlaybackQueue : MPRemotePlaybackQueue
{
    NSArray *_storeIDs;
    unsigned long long _shuffleType;
}

@property(readonly, nonatomic) unsigned long long shuffleType; // @synthesize shuffleType=_shuffleType;
@property(readonly, nonatomic) NSArray *storeIDs; // @synthesize storeIDs=_storeIDs;
- (void).cxx_destruct;
- (id)description;
- (id)initWithMediaRemotePlaybackQueue:(struct _MRSystemAppPlaybackQueue *)arg1;

@end

@interface MPTransportButton : MPButton
{
    MPAVController *player;
}

@property(retain, nonatomic) MPAVController *player; // @synthesize player;
- (void).cxx_destruct;
- (id)_automationID;

@end

@interface MPTransportControls : UIView
{
    id _target;
    MPAVItem *_item;
    MPAVController *_player;
    unsigned long long _desiredParts;
    unsigned long long _disabledParts;
    NSMutableIndexSet *_heldParts;
    unsigned long long _visibleParts;
    unsigned int _playing:1;
    _Bool _allowsWirelessPlayback;
    _Bool _registeredForPlayerNotifications;
    MPButton *_alternatesButton;
    MPButton *_bookmarkButton;
    MPButton *_chaptersButton;
    MPButton *_emailButton;
    MPButton *_fastForward15SecondsButton;
    MPButton *_likeOrBanButton;
    MPButton *_nextButton;
    MPButton *_playButton;
    MPButton *_previousButton;
    MPButton *_rewind15SecondsButton;
    MPButton *_rewind30SecondsButton;
    MPButton *_scaleButton;
    MPButton *_toggleFullscreenButton;
    id _volumeSlider;
}

+ (_Bool)buttonImagesUseBackgroundImage;
+ (long long)buttonType;
+ (Class)buttonClass;
+ (unsigned long long)defaultVisibleParts;
@property(nonatomic) _Bool registeredForPlayerNotifications; // @synthesize registeredForPlayerNotifications=_registeredForPlayerNotifications;
@property(nonatomic) unsigned long long visibleParts; // @synthesize visibleParts=_visibleParts;
@property(nonatomic) __weak id target; // @synthesize target=_target;
@property(retain, nonatomic) MPAVController *player; // @synthesize player=_player;
@property(retain, nonatomic) MPAVItem *item; // @synthesize item=_item;
@property(nonatomic) unsigned long long disabledParts; // @synthesize disabledParts=_disabledParts;
@property(nonatomic) unsigned long long desiredParts; // @synthesize desiredParts=_desiredParts;
@property(nonatomic) _Bool allowsWirelessPlayback; // @synthesize allowsWirelessPlayback=_allowsWirelessPlayback;
- (void).cxx_destruct;
- (void)_updateEnabledStates:(_Bool)arg1;
- (void)_updateTintColorForPart:(unsigned long long)arg1;
- (void)_updatePlayButtonImage;
- (id)_updateAdditions:(id)arg1 removals:(id)arg2 forPart:(unsigned long long)arg3;
- (void)_reloadViewWithAnimation:(_Bool)arg1;
- (_Bool)_handleTapForPart:(unsigned long long)arg1;
- (_Bool)_handleReleaseForPart:(unsigned long long)arg1;
- (_Bool)_handleHoldForPart:(unsigned long long)arg1;
- (void)_applyDesiredPartsWithAnimation:(_Bool)arg1;
- (unsigned long long)_applyPossibleVisiblePartsToParts:(unsigned long long)arg1;
- (_Bool)usesTintColorForControls;
- (_Bool)alwaysHidesSystemVolumeHUD;
- (id)tintColorForPart:(unsigned long long)arg1;
- (_Bool)showsVolumeSliderWhenNoVolumeControlAvailable;
- (id)highlightedButtonImageForPart:(unsigned long long)arg1;
- (id)disabledButtonImageForPart:(unsigned long long)arg1;
- (id)buttonImageForPart:(unsigned long long)arg1;
- (void)reloadForAdditions:(id)arg1 removals:(id)arg2 animate:(_Bool)arg3;
- (id)newVolumeSlider;
- (id)newButtonForPart:(unsigned long long)arg1;
- (void)buttonUp:(id)arg1;
- (void)buttonHoldReleased:(id)arg1;
- (void)buttonHeld:(id)arg1;
- (void)buttonDown:(id)arg1;
- (_Bool)allowsWirelessPlaybackForCurrentItem;
- (void)_validityChangedNotification:(id)arg1;
- (void)_playbackStateChangedNotification:(id)arg1;
- (void)_itemChangedNotification:(id)arg1;
- (void)_timeMarkersAvailableNotification:(id)arg1;
- (void)_itemDurationDidChangeNotification:(id)arg1;
- (void)_isExternalPlaybackActiveDidChangeNotification:(id)arg1;
- (void)_availableRoutesChangedNotification:(id)arg1;
- (void)_alternateTypesChangedNotification:(id)arg1;
@property(readonly, nonatomic) NSString *playPauseButtonImage;
@property(readonly, nonatomic) NSString *pauseButtonImage;
@property(readonly, nonatomic) NSString *playButtonImage;
- (void)setVisibleParts:(unsigned long long)arg1 animated:(_Bool)arg2;
- (void)setDesiredParts:(unsigned long long)arg1 animated:(_Bool)arg2;
- (id)buttonForPart:(unsigned long long)arg1;
- (void)tintColorDidChange;
- (void)setFrame:(struct CGRect)arg1;
- (void)setHidden:(_Bool)arg1;
- (void)setAlpha:(double)arg1;
- (void)didMoveToSuperview;
- (void)didMoveToWindow;
- (void)unregisterForPlayerNotifications;
- (void)registerForPlayerNotifications;
- (void)dealloc;
- (id)initWithFrame:(struct CGRect)arg1;
- (id)init;

@end

@interface MPTVOutWindow : UIWindow
{
    MPMovieTVHUDView *_hudView;
    MPVideoView *_videoView;
}

- (void).cxx_destruct;
- (void)_screenModeDidChange:(id)arg1;
- (void)_playbackStateChanged:(id)arg1;
- (id)videoView;
- (_Bool)setVideoView:(id)arg1;
- (_Bool)_setupTargetScreen:(id)arg1;
- (void)dealloc;
- (id)init;

@end

@interface MPVideoBackgroundView : UIView
{
    long long _interfaceOrientation;
    UIView *_imageView;
    UIImageView *_iconView;
    UIImageView *_backgroundPlaceholderImageView;
    UIView *_backgroundPlaceholderPosterImageView;
    UIView *_backgroundPlaceholderView;
    UIImageView *_customBackgroundImageView;
    NSString *_destinationName;
    long long _destinationPlaceholderStyle;
    _Bool _showDestinationPlaceholder;
    CDUnknownBlockType _layoutSubviewsPostflightHandler;
}

@property(copy, nonatomic) CDUnknownBlockType layoutSubviewsPostflightHandler; // @synthesize layoutSubviewsPostflightHandler=_layoutSubviewsPostflightHandler;
@property(nonatomic) long long interfaceOrientation; // @synthesize interfaceOrientation=_interfaceOrientation;
@property(nonatomic) long long destinationPlaceholderStyle; // @synthesize destinationPlaceholderStyle=_destinationPlaceholderStyle;
@property(copy, nonatomic) NSString *destinationName; // @synthesize destinationName=_destinationName;
@property(retain, nonatomic) UIView *backgroundPlaceholderPosterImageView; // @synthesize backgroundPlaceholderPosterImageView=_backgroundPlaceholderPosterImageView;
- (void).cxx_destruct;
- (void)_updateDestinationBackgroundViewAnimated:(_Bool)arg1;
- (void)_tvOutCapabilityDidChangeNotification:(id)arg1;
- (void)setShowDestinationPlaceholder:(_Bool)arg1 animated:(_Bool)arg2;
@property(readonly, nonatomic) UIView *backgroundPlaceholderView;
@property(retain, nonatomic) UIImage *backgroundPlaceholderImage;
- (void)setCustomBackgroundImage:(id)arg1;
- (void)_createInformationalTitleView:(id *)arg1 systemFont:(id)arg2 lineBreakMode:(long long)arg3;
- (void)setShowQTAudioOnlyUI:(_Bool)arg1;
- (id)qtIcon;
- (void)layoutSubviews;
- (void)dealloc;
- (id)initWithFrame:(struct CGRect)arg1;

@end

@interface MPVideoDestinationBackgroundView : UIView
{
    NSString *_destinationName;
    UILabel *_destinationSubtitleLabel;
    UILabel *_destinationTitleLabel;
    long long _style;
    UIImageView *_videosImageView;
}

@property(copy, nonatomic) NSString *destinationName; // @synthesize destinationName=_destinationName;
@property(nonatomic) long long style; // @synthesize style=_style;
- (void).cxx_destruct;
- (void)setFrame:(struct CGRect)arg1;
- (void)layoutSubviews;
- (id)initWithFrame:(struct CGRect)arg1;

@end

@interface MPArtworkResizeUtility : NSObject
{
    NSObject<OS_dispatch_queue> *_artworkResizingAccessQueue;
    NSOperationQueue *_artworkResizingOperationQueue;
    NSMapTable *_artworkResizingOperations;
}

@property(retain, nonatomic) NSMapTable *artworkResizingOperations; // @synthesize artworkResizingOperations=_artworkResizingOperations;
@property(retain, nonatomic) NSOperationQueue *artworkResizingOperationQueue; // @synthesize artworkResizingOperationQueue=_artworkResizingOperationQueue;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *artworkResizingAccessQueue; // @synthesize artworkResizingAccessQueue=_artworkResizingAccessQueue;
- (void).cxx_destruct;
- (id)resizeImage:(id)arg1 scaledFittingSize:(struct CGSize)arg2 useExactFittingSizeAsDestinationSize:(_Bool)arg3 saveToDestinationURL:(id)arg4 completionHandler:(CDUnknownBlockType)arg5;
- (void)cancelResizeImage:(id)arg1;
- (id)init;

@end

@interface MPVideoView : UIView
{
    MPAVController *_player;
    NSString *_moviePath;
    NSString *_movieSubtitle;
    NSString *_movieTitle;
    NSString *_videoID;
    double _startTime;
    double _stopTime;
    NSDictionary *_AVURLAssetOptions;
    unsigned long long _scaleMode;
}

+ (Class)layerClass;
@property(copy, nonatomic) NSString *videoID; // @synthesize videoID=_videoID;
@property(nonatomic) double stopTime; // @synthesize stopTime=_stopTime;
@property(nonatomic) double startTime; // @synthesize startTime=_startTime;
@property(nonatomic) unsigned long long scaleMode; // @synthesize scaleMode=_scaleMode;
@property(nonatomic) __weak MPAVController *player; // @synthesize player=_player;
@property(retain, nonatomic) NSString *movieTitle; // @synthesize movieTitle=_movieTitle;
@property(retain, nonatomic) NSString *movieSubtitle; // @synthesize movieSubtitle=_movieSubtitle;
@property(retain, nonatomic) NSDictionary *AVURLAssetOptions; // @synthesize AVURLAssetOptions=_AVURLAssetOptions;
- (void).cxx_destruct;
- (void)_playbackStateChangedNotification:(id)arg1;
- (void)_bufferingStateChangedNotification:(id)arg1;
- (void)didMoveToWindow;
@property(readonly, nonatomic) struct CGRect movieContentFrame;
@property(readonly, nonatomic) struct CGRect movieFrame;
@property(readonly, nonatomic) unsigned long long effectiveScaleMode;
- (void)toggleScaleMode:(_Bool)arg1;
- (void)setScaleMode:(unsigned long long)arg1 animated:(_Bool)arg2;
- (void)setScaleMode:(unsigned long long)arg1 duration:(float)arg2;
- (void)play;
- (void)playFromBeginning;
- (void)playWhenLikelyToKeepUp;
- (void)setMovieWithPath:(id)arg1;
- (void)prepareAVControllerQueue;
- (id)moviePath;
@property(readonly, nonatomic) _Bool canChangeScaleMode;
- (void)dealloc;
- (id)initWithFrame:(struct CGRect)arg1;

@end

@interface MPVideoPlaybackOverlayView : UIView <MPAudioAndSubtitlesControllerDelegate, UIPopoverControllerDelegate, MPVideoOverlay, MPDetailSliderDelegate>
{
    MPDetailSlider *_scrubber;
    _UIBackdropView *_bottomBarBackdropView;
    MPKnockoutButton *_playPauseButton;
    MPKnockoutButton *_fullscreenButton;
    _UIBackdropView *_topBarBackdropView;
    UIStatusBar *_statusBar;
    UIButton *_doneButton;
    UIActivityIndicatorView *_loadingIndicator;
    UILabel *_loadingLabel;
    UIButton *_scaleButton;
    UILabel *_scrubInstructions1;
    UILabel *_scrubInstructions2;
    MPVolumeSlider *_volumeSlider;
    MPKnockoutButton *_leftButton;
    MPKnockoutButton *_rightButton;
    UIButton *_audioAndSubtitlesButton;
    UIView *_topBarLayoutGuide;
    UIView *_topBarItemsGuide;
    UIView *_bottomBarTopLayoutGuide;
    UIView *_bottomBarBottomLayoutGuide;
    UIView *_bottomBarItemsGuide;
    MPAudioAndSubtitlesController *_audioAndSubtitlesController;
    UIPopoverController *_audioAndSubtitlesPopover;
    _Bool _ticking;
    _Bool _ignoreTouchUp;
    _Bool _shouldResumePlayback;
    int _seekDirection;
    NSLayoutConstraint *_topBarBottomConstraint;
    NSLayoutConstraint *_bottomBarHeightConstraint;
    NSLayoutConstraint *_topItemsTrailingConstraint;
    NSLayoutConstraint *_bottomItemsRightConstraint;
    NSLayoutConstraint *_volumeSliderRightConstraint;
    NSLayoutConstraint *_volumeSliderWidthConstraint;
    NSArray *_topItemsConstraints;
    NSArray *_bottomItemsConstraints;
    NSArray *_topItems;
    NSArray *_bottomItems;
    _Bool allowsWirelessPlayback;
    _Bool navigationBarHidden;
    _Bool _automaticallyHandleTransportControls;
    _Bool _allowsExitFromFullscreen;
    id <MPVideoOverlayDelegate> _delegate;
    MPAVController *_player;
    MPAVItem *_item;
    unsigned long long disabledParts;
    unsigned long long desiredParts;
    unsigned long long visibleParts;
    id <MPVideoControllerProtocol> videoViewController;
    long long _style;
}

@property(nonatomic) _Bool allowsExitFromFullscreen; // @synthesize allowsExitFromFullscreen=_allowsExitFromFullscreen;
@property(nonatomic) _Bool automaticallyHandleTransportControls; // @synthesize automaticallyHandleTransportControls=_automaticallyHandleTransportControls;
@property(nonatomic) long long style; // @synthesize style=_style;
@property(nonatomic) _Bool navigationBarHidden; // @synthesize navigationBarHidden;
@property(nonatomic) __weak id <MPVideoControllerProtocol> videoViewController; // @synthesize videoViewController;
@property(nonatomic) unsigned long long visibleParts; // @synthesize visibleParts;
@property(nonatomic) unsigned long long desiredParts; // @synthesize desiredParts;
@property(nonatomic) unsigned long long disabledParts; // @synthesize disabledParts;
@property(nonatomic) _Bool allowsWirelessPlayback; // @synthesize allowsWirelessPlayback;
@property(retain, nonatomic) MPAVItem *item; // @synthesize item=_item;
@property(retain, nonatomic) MPAVController *player; // @synthesize player=_player;
@property(nonatomic) __weak id <MPVideoOverlayDelegate> delegate; // @synthesize delegate=_delegate;
- (void).cxx_destruct;
- (void)hideAlternateTracks;
- (void)showAlternateTracks;
- (void)setDesiredParts:(unsigned long long)arg1 animate:(_Bool)arg2;
- (void)setVisibleParts:(unsigned long long)arg1 animate:(_Bool)arg2;
@property(readonly, retain, nonatomic) UINavigationBar *navigationBar;
- (void)_updateVolumeSlider;
- (_Bool)updateTimeBasedValues;
- (void)_updateLoadingIndicator;
- (void)_updateScaleButton;
- (void)_unregisterForPlayerNotifications:(id)arg1;
- (void)_unregisterForItemNotifications:(id)arg1;
- (void)_startSeeking;
- (void)_notifyDelegateOfUserEventEnd:(long long)arg1;
- (void)_notifyDelegateOfUserEventCancel:(long long)arg1;
- (void)_notifyDelegateOfUserEventBegin:(long long)arg1;
- (void)_notifyDelegateOfUserEvent:(long long)arg1;
- (void)_registerForPlayerNotifications:(id)arg1;
- (void)_registerForItemNotifications:(id)arg1;
- (id)_newFrostedGlassBackdropView;
- (id)_imageNamed:(id)arg1;
- (void)_configureTransportControls;
- (void)_configureAuxiliaryButtons:(_Bool)arg1;
- (void)_setButtons:(id)arg1 inBar:(id)arg2 animated:(_Bool)arg3;
- (void)_videoViewDidMoveToWindow:(id)arg1;
- (void)_tick:(id)arg1;
- (void)_seekabilityChanged:(id)arg1;
- (void)_playbackStateChanged:(id)arg1;
- (void)_itemReadyToPlay:(id)arg1;
- (void)_itemChanged:(id)arg1;
- (void)_effectiveScaleModeDidChange:(id)arg1;
- (void)_durationAvailable:(id)arg1;
- (void)_alternateTracksAvailable:(id)arg1;
- (void)_activeAudioRouteDidChange:(id)arg1;
- (void)_skipButtonTouchUpOutside:(id)arg1;
- (void)_skipButtonTouchUpInside:(id)arg1;
- (void)_skipButtonTouchCancel:(id)arg1;
- (void)_skipButtonTouchDown:(id)arg1;
- (void)_scaleButtonTapped:(id)arg1;
- (void)_playPauseButtonTapped:(id)arg1;
- (void)_observeControl:(id)arg1;
- (void)_fullscreenButtonTapped:(id)arg1;
- (void)_doneButtonTapped:(id)arg1;
- (void)_buttonInteractionEnded:(id)arg1;
- (void)_buttonInteractionCanceled:(id)arg1;
- (void)_buttonInteractionBegan:(id)arg1;
- (void)_audioAndSubtitlesButtonTapped:(id)arg1;
- (void)popoverControllerDidDismissPopover:(id)arg1;
- (void)_showScrubInstructions;
- (void)_hideScrubInstructions;
- (void)detailSliderTrackingDidCancel:(id)arg1;
- (void)detailSliderTrackingDidEnd:(id)arg1;
- (void)detailSliderTrackingDidBegin:(id)arg1;
- (void)detailSlider:(id)arg1 didChangeValue:(float)arg2;
- (void)detailSlider:(id)arg1 didChangeScrubSpeed:(long long)arg2;
- (void)audioAndSubtitleControllerRequestsDismissal:(id)arg1;
- (void)stopTicking;
- (void)startTicking;
- (void)setHidden:(_Bool)arg1 animated:(_Bool)arg2 animateAlongside:(CDUnknownBlockType)arg3 completionBlock:(CDUnknownBlockType)arg4;
- (void)setHidden:(_Bool)arg1 animated:(_Bool)arg2 completionBlock:(CDUnknownBlockType)arg3;
- (void)setHidden:(_Bool)arg1 animated:(_Bool)arg2;
- (void)setHidden:(_Bool)arg1;
@property(readonly, nonatomic) double bottomBarHeight;
@property(nonatomic) _Bool allowsDetailScrubbing;
- (void)removeFromSuperview;
- (void)setFrame:(struct CGRect)arg1;
- (void)setBounds:(struct CGRect)arg1;
- (_Bool)pointInside:(struct CGPoint)arg1 withEvent:(id)arg2;
- (void)layoutSubviews;
- (void)updateConstraints;
- (void)didMoveToWindow;
- (void)dealloc;
- (id)initWithFrame:(struct CGRect)arg1 style:(long long)arg2;
- (id)initWithFrame:(struct CGRect)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface MPKnockoutButton : MPButton
{
}

+ (id)easyTouchButtonWithType:(long long)arg1;
- (void)didMoveToSuperview;
- (void)_updateForStateChangeAnimated:(_Bool)arg1;
- (void)_updateSelected:(_Bool)arg1 highlighted:(_Bool)arg2;
- (_Bool)_drawingAsSelected;
- (void)setSelected:(_Bool)arg1;
- (void)setHighlighted:(_Bool)arg1;

@end

@interface UIMovieView : MPVideoView
{
}

- (void)stop;
- (void)setRepeatMode:(unsigned long long)arg1;
- (void)setCurrentTime:(double)arg1 timeSnapOption:(unsigned long long)arg2;
- (void)setCurrentTime:(double)arg1;
- (void)play;
- (void)pause;
- (unsigned long long)playbackState;
- (unsigned long long)playableContentType;
- (double)duration;
- (double)currentTime;
- (unsigned long long)bufferingStatusMask;
- (id)avPlayer;
- (id)mpavController;

@end

@interface MPVolumeSlider : UISlider <MPAVRoutingControllerDelegate, MPVolumeControllerDelegate>
{
    MPVolumeController *_volumeController;
    NSTimer *_commitTimer;
    UILabel *_routeNameLabel;
    long long _style;
    UIImageView *_thumbImageView;
    UIImageView *_thumbMaskImageView;
    _Bool _isOffScreen;
    _Bool _forcingOffscreenVisibility;
    _Bool _thumbIsDefault;
    UIView *_volumeWarningView;
    _Bool _volumeWarningBlinking;
    UIImage *_volumeWarningTrackImage;
    MPAVRoutingController *_routingController;
    struct UIEdgeInsets _hitRectInsets;
}

@property(nonatomic) struct UIEdgeInsets hitRectInsets; // @synthesize hitRectInsets=_hitRectInsets;
@property(retain, nonatomic) UIImage *volumeWarningTrackImage; // @synthesize volumeWarningTrackImage=_volumeWarningTrackImage;
@property(readonly, nonatomic) long long style; // @synthesize style=_style;
- (void).cxx_destruct;
- (id)_newVolumeWarningView;
- (void)_endBlinkingWarningView;
- (void)_blinkWarningView;
- (void)_beginBlinkingWarningView;
- (void)_routeNameLabelAnimationDidEnd;
- (void)_layoutVolumeWarningView;
- (void)_layoutForAvailableRoutes;
- (void)_resetThumbImageForState:(unsigned long long)arg1;
- (id)_maxTrackImageForStyle:(long long)arg1;
- (id)_minTrackImageForStyle:(long long)arg1;
- (id)_thumbImageForStyle:(long long)arg1;
- (void)_commitVolumeChange;
- (void)_isExternalPlaybackActiveDidChangeNotification:(id)arg1;
- (void)_availableRoutesDidChangeNotification:(id)arg1;
- (void)_applicationWillEnterForegroundNotification:(id)arg1;
- (void)_applicationDidEnterBackgroundNotification:(id)arg1;
@property(nonatomic, setter=_setIsOffScreen:) _Bool _isOffScreen;
- (void)volumeController:(id)arg1 EUVolumeLimitEnforcedDidChange:(_Bool)arg2;
- (void)volumeController:(id)arg1 EUVolumeLimitDidChange:(float)arg2;
- (void)volumeController:(id)arg1 volumeValueDidChange:(float)arg2;
- (void)routingControllerAvailableRoutesDidChange:(id)arg1;
@property(copy, nonatomic) NSString *volumeAudioCategory;
@property(retain, nonatomic) MPAVController *player;
- (void)setUserInteractionEnabled:(_Bool)arg1;
- (void)setHidden:(_Bool)arg1;
- (void)setAlpha:(double)arg1;
- (_Bool)pointInside:(struct CGPoint)arg1 withEvent:(id)arg2;
- (struct CGRect)hitRect;
- (void)didMoveToWindow;
- (void)didMoveToSuperview;
- (void)layoutSubviews;
- (void)_endTracking;
- (void)cancelTrackingWithEvent:(id)arg1;
- (void)endTrackingWithTouch:(id)arg1 withEvent:(id)arg2;
- (_Bool)beginTrackingWithTouch:(id)arg1 withEvent:(id)arg2;
- (struct CGRect)thumbRectForBounds:(struct CGRect)arg1 trackRect:(struct CGRect)arg2 value:(float)arg3;
- (void)setValue:(float)arg1 animated:(_Bool)arg2;
- (void)setThumbImage:(id)arg1 forState:(unsigned long long)arg2;
- (float)minimumValue;
- (float)maximumValue;
- (id)createThumbView;
- (void)dealloc;
- (id)initWithFrame:(struct CGRect)arg1 style:(long long)arg2;
- (id)initWithFrame:(struct CGRect)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface MPVolumeView : UIView <MPAVRoutingControllerDelegate, NSCoding>
{
    MPAVRoutingSheet *_routingSheet;
    MPAVRoutingController *_routingController;
    _Bool _hasNonDefaultRouteButtonImages;
    _Bool _hasNonDefaultMaxVolumeSliderImage;
    _Bool _hasNonDefaultMinVolumeSliderImage;
    _Bool _hidesRouteLabelWhenNoRouteChoice;
    UIButton *_routeButton;
    _Bool _routeButtonShowsTouchWhenHighlighted;
    _Bool _routeDiscoveryEnabled;
    UILabel *_routeLabel;
    MPAudioVideoRoutingPopoverController *_routePopoverController;
    _Bool _showingButton;
    _Bool _showingLabel;
    _Bool _showingSlider;
    _Bool _showsRouteButton;
    _Bool _showsVolumeSlider;
    long long _style;
    MPVolumeSlider *_volumeSlider;
    _Bool _volumeSliderShrinksFromBothEnds;
    _Bool _wirelessRouteIsPicked;
    _Bool _wirelessRoutesAvailable;
    _Bool _pushedRouteDiscoveryModeState;
    unsigned long long _routePopoverPermittedArrowDirections;
}

@property(nonatomic) unsigned long long routePopoverPermittedArrowDirections; // @synthesize routePopoverPermittedArrowDirections=_routePopoverPermittedArrowDirections;
- (void).cxx_destruct;
- (void)_applicationWillEnterForegroundNotification:(id)arg1;
- (void)_applicationDidEnterBackgroundNotification:(id)arg1;
- (void)_updateWirelessRouteStatus;
- (void)_setRouteDiscoveryEnabled:(_Bool)arg1;
- (void)_setShowsVolumeSlider:(_Bool)arg1;
- (void)_setShowsRouteButton:(_Bool)arg1 animated:(_Bool)arg2;
- (void)_getDefaultVolumeSliderFrame:(struct CGRect *)arg1 routeButtonFrame:(struct CGRect *)arg2 forBounds:(struct CGRect)arg3;
- (void)_displayAudioRoutePicker;
- (id)_defaultRouteButtonImageAsSelected:(_Bool)arg1;
- (void)_unregisterNotifications;
- (void)_registerNotifications;
- (void)_createSubviews;
- (id)_routeButton;
- (void)_setVolumeAudioCategory:(id)arg1;
- (_Bool)isShowingActiveOverlays;
- (void)dismissActiveOverlaysAnimated:(_Bool)arg1;
@property(readonly, nonatomic) _Bool isShowingRouteButton;
@property(readonly, nonatomic) _Bool isVisible;
@property(nonatomic) _Bool volumeSliderShrinksFromBothEnds;
@property(nonatomic) _Bool hidesRouteLabelWhenNoRouteChoice;
@property(readonly, nonatomic) MPVolumeSlider *volumeSlider;
@property(readonly, nonatomic) long long style;
- (struct CGRect)volumeThumbRectForBounds:(struct CGRect)arg1 volumeSliderRect:(struct CGRect)arg2 value:(float)arg3;
- (id)volumeThumbImageForState:(unsigned long long)arg1;
- (struct CGRect)volumeSliderRectForBounds:(struct CGRect)arg1;
@property(nonatomic) _Bool showsVolumeSlider;
@property(nonatomic) _Bool showsRouteButton;
- (void)setVolumeThumbImage:(id)arg1 forState:(unsigned long long)arg2;
@property(nonatomic) _Bool routeButtonShowsTouchWhenHighlighted;
- (void)setRouteButtonImage:(id)arg1 forState:(unsigned long long)arg2;
@property(retain, nonatomic) UIImage *volumeWarningSliderImage;
- (void)setMaximumVolumeSliderImage:(id)arg1 forState:(unsigned long long)arg2;
- (void)setMinimumVolumeSliderImage:(id)arg1 forState:(unsigned long long)arg2;
- (struct CGRect)routeButtonRectForBounds:(struct CGRect)arg1;
- (id)routeButtonImageForState:(unsigned long long)arg1;
- (id)maximumVolumeSliderImageForState:(unsigned long long)arg1;
- (id)minimumVolumeSliderImageForState:(unsigned long long)arg1;
@property(readonly, nonatomic, getter=areWirelessRoutesAvailable) _Bool wirelessRoutesAvailable;
@property(readonly, nonatomic, getter=isWirelessRouteActive) _Bool wirelessRouteActive;
- (void)popoverControllerDidDismissPopover:(id)arg1;
- (void)routingControllerAvailableRoutesDidChange:(id)arg1;
- (void)willMoveToWindow:(id)arg1;
- (void)setHidden:(_Bool)arg1;
- (void)setAlpha:(double)arg1;
- (void)didMoveToWindow;
- (void)didMoveToSuperview;
- (struct CGSize)sizeThatFits:(struct CGSize)arg1;
- (_Bool)pointInside:(struct CGPoint)arg1 withEvent:(id)arg2;
- (void)layoutSubviews;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (void)dealloc;
- (id)initWithFrame:(struct CGRect)arg1 style:(long long)arg2;
- (id)initWithFrame:(struct CGRect)arg1;
- (void)_initWithStyle:(long long)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface MPVolumeViewController : UIViewController
{
    MPVolumeView *_volumeView;
}

@property(readonly, nonatomic) MPVolumeView *volumeView; // @synthesize volumeView=_volumeView;
- (void).cxx_destruct;
- (struct CGSize)preferredContentSize;
- (void)viewDidLoad;
- (id)init;

@end

@interface MPVolumeSettingsController : UIViewController
{
    NSString *_audioCategory;
    UIAlertController *_alertController;
    UIWindow *_hostingWindow;
    UIWindow *_previousWindow;
}

@property(nonatomic) __weak UIWindow *previousWindow; // @synthesize previousWindow=_previousWindow;
@property(nonatomic) __weak UIWindow *hostingWindow; // @synthesize hostingWindow=_hostingWindow;
- (void).cxx_destruct;
- (void)_flip;
- (void)_keyWindowDidChange:(id)arg1;
- (void)dismissAlertController;
- (void)viewDidAppear:(_Bool)arg1;
- (void)presentAlertControllerInWindow:(id)arg1;
- (void)dealloc;
- (id)initWithAudioCategory:(id)arg1;

@end

@interface MPQueueFeederState : NSObject
{
    MPQueueFeeder *_feeder;
    unsigned long long _currentItemIndex;
    double _currentTime;
    int _feederMode;
}

@property(nonatomic) int feederMode; // @synthesize feederMode=_feederMode;
@property(nonatomic) double currentTime; // @synthesize currentTime=_currentTime;
@property(nonatomic) unsigned long long currentItemIndex; // @synthesize currentItemIndex=_currentItemIndex;
@property(retain, nonatomic) MPQueueFeeder *feeder; // @synthesize feeder=_feeder;
- (void).cxx_destruct;
- (id)description;
- (id)initWithStateOfAVController:(id)arg1;

@end

@interface MPAVPeriodicTimeObserverInfo : NSObject
{
    CDUnknownBlockType _block;
    NSObject<OS_dispatch_queue> *_queue;
    CDStruct_1b6d18a9 _interval;
}

@property(readonly, nonatomic) NSObject<OS_dispatch_queue> *queue; // @synthesize queue=_queue;
@property(readonly, nonatomic) CDStruct_1b6d18a9 interval; // @synthesize interval=_interval;
@property(readonly, copy, nonatomic) CDUnknownBlockType block; // @synthesize block=_block;
- (void).cxx_destruct;
- (id)initWithInterval:(CDStruct_1b6d18a9)arg1 queue:(id)arg2 block:(CDUnknownBlockType)arg3;

@end

@interface MPMoviePlayerViewController : UIViewController
{
    id _internal;
    _Bool _statusBarWasHidden;
}

- (void).cxx_destruct;
- (void)_moviePlayerViewController_playbackDidFinishNotification:(id)arg1;
- (void)_moviePlayerViewController_applicationDidEnterBackgroundNotification:(id)arg1;
- (_Bool)_shouldUseFullScreenLayoutInWindow:(id)arg1 parentViewController:(id)arg2;
- (_Bool)_canReloadView;
- (void)viewDidDisappear:(_Bool)arg1;
- (void)viewWillDisappear:(_Bool)arg1;
- (void)viewDidAppear:(_Bool)arg1;
- (void)viewWillAppear:(_Bool)arg1;
- (unsigned long long)supportedInterfaceOrientations;
- (void)didRotateFromInterfaceOrientation:(long long)arg1;
- (void)willAnimateRotationToInterfaceOrientation:(long long)arg1 duration:(double)arg2;
- (_Bool)shouldAutorotateToInterfaceOrientation:(long long)arg1;
- (_Bool)prefersStatusBarHidden;
- (_Bool)shouldAutorotate;
- (void)loadView;
- (void)remoteControlReceivedWithEvent:(id)arg1;
- (_Bool)canBecomeFirstResponder;
@property(readonly, nonatomic) MPMoviePlayerController *moviePlayer;
- (void)dealloc;
- (id)init;
- (id)initWithAsset:(id)arg1;
- (id)initWithContentURL:(id)arg1;

@end

@interface MPMoviePlayerViewControllerInternal : NSObject
{
    MPMoviePlayerController *_moviePlayer;
    _Bool _wasDisplayedAnimated;
}

- (void).cxx_destruct;

@end

@interface MPRemoteCommandEvent : NSObject
{
    NSDictionary *_mediaRemoteOptions;
    MPRemoteCommand *_command;
    double _timestamp;
}

+ (id)eventWithCommand:(id)arg1 mediaRemoteType:(unsigned int)arg2 options:(id)arg3;
@property(readonly, nonatomic) double timestamp; // @synthesize timestamp=_timestamp;
@property(readonly, nonatomic) MPRemoteCommand *command; // @synthesize command=_command;
- (void).cxx_destruct;
- (id)mediaRemoteOptions;
- (id)initWithCommand:(id)arg1 mediaRemoteType:(unsigned int)arg2 options:(id)arg3;
- (id)init;

@end

@interface MPSkipIntervalCommandEvent : MPRemoteCommandEvent
{
    double _interval;
}

@property(readonly, nonatomic) double interval; // @synthesize interval=_interval;
- (id)initWithCommand:(id)arg1 mediaRemoteType:(unsigned int)arg2 options:(id)arg3;

@end

@interface MPSeekCommandEvent : MPRemoteCommandEvent
{
    unsigned long long _type;
}

@property(readonly, nonatomic) unsigned long long type; // @synthesize type=_type;
- (id)initWithCommand:(id)arg1 mediaRemoteType:(unsigned int)arg2 options:(id)arg3;

@end

@interface MPRatingCommandEvent : MPRemoteCommandEvent
{
    float _rating;
}

@property(readonly, nonatomic) float rating; // @synthesize rating=_rating;
- (id)initWithCommand:(id)arg1 mediaRemoteType:(unsigned int)arg2 options:(id)arg3;

@end

@interface MPChangePlaybackRateCommandEvent : MPRemoteCommandEvent
{
    float _playbackRate;
}

@property(readonly, nonatomic) float playbackRate; // @synthesize playbackRate=_playbackRate;
- (id)initWithCommand:(id)arg1 mediaRemoteType:(unsigned int)arg2 options:(id)arg3;

@end

@interface MPFeedbackCommandEvent : MPRemoteCommandEvent
{
    _Bool _negative;
}

@property(readonly, nonatomic, getter=isNegative) _Bool negative; // @synthesize negative=_negative;
- (id)initWithCommand:(id)arg1 mediaRemoteType:(unsigned int)arg2 options:(id)arg3;

@end

@interface MPSkipTrackCommandEvent : MPRemoteCommandEvent
{
    _Bool _requestingDefermentToPlaybackQueuePosition;
}

@property(readonly, nonatomic, getter=isRequestingDefermentToPlaybackQueuePosition) _Bool requestingDefermentToPlaybackQueuePosition; // @synthesize requestingDefermentToPlaybackQueuePosition=_requestingDefermentToPlaybackQueuePosition;
- (id)initWithCommand:(id)arg1 mediaRemoteType:(unsigned int)arg2 options:(id)arg3;

@end

@interface MPSpecialSeekCommandEvent : MPRemoteCommandEvent
{
    unsigned long long _type;
}

@property(readonly, nonatomic) unsigned long long type; // @synthesize type=_type;
- (id)initWithCommand:(id)arg1 mediaRemoteType:(unsigned int)arg2 options:(id)arg3;

@end

@interface MPPurchaseCommandEvent : MPRemoteCommandEvent
{
    long long _type;
    NSNumber *_trackID;
    NSString *_stationHash;
    NSNumber *_stationID;
}

@property(readonly, nonatomic) NSNumber *stationID; // @synthesize stationID=_stationID;
@property(readonly, nonatomic) NSString *stationHash; // @synthesize stationHash=_stationHash;
@property(readonly, nonatomic) NSNumber *trackID; // @synthesize trackID=_trackID;
@property(readonly, nonatomic) long long type; // @synthesize type=_type;
- (void).cxx_destruct;
- (id)initWithCommand:(id)arg1 mediaRemoteType:(unsigned int)arg2 options:(id)arg3;

@end

@interface MPChangePlaybackPositionCommandEvent : MPRemoteCommandEvent
{
    double _positionTime;
}

@property(readonly, nonatomic) double positionTime; // @synthesize positionTime=_positionTime;
- (id)initWithCommand:(id)arg1 mediaRemoteType:(unsigned int)arg2 options:(id)arg3;

@end

@interface MPChangeRepeatModeCommandEvent : MPRemoteCommandEvent
{
    unsigned long long _repeatType;
}

@property(readonly, nonatomic) unsigned long long repeatType; // @synthesize repeatType=_repeatType;
- (id)initWithCommand:(id)arg1 mediaRemoteType:(unsigned int)arg2 options:(id)arg3;

@end

@interface MPChangeShuffleModeCommandEvent : MPRemoteCommandEvent
{
    unsigned long long _shuffleType;
}

@property(readonly, nonatomic) unsigned long long shuffleType; // @synthesize shuffleType=_shuffleType;
- (id)initWithCommand:(id)arg1 mediaRemoteType:(unsigned int)arg2 options:(id)arg3;

@end

@interface MPCreateRadioStationCommandEvent : MPRemoteCommandEvent
{
    _Bool _requestingPlaybackInitialization;
    NSURL *_stationURL;
}

@property(readonly, nonatomic, getter=isRequestingPlaybackInitialization) _Bool requestingPlaybackInitialization; // @synthesize requestingPlaybackInitialization=_requestingPlaybackInitialization;
@property(readonly, nonatomic) NSURL *stationURL; // @synthesize stationURL=_stationURL;
- (void).cxx_destruct;
- (id)initWithCommand:(id)arg1 mediaRemoteType:(unsigned int)arg2 options:(id)arg3;

@end

@interface MPSetPlaybackQueueCommandEvent : MPRemoteCommandEvent
{
    MPRemotePlaybackQueue *_playbackQueue;
}

@property(readonly, nonatomic) MPRemotePlaybackQueue *playbackQueue; // @synthesize playbackQueue=_playbackQueue;
- (void).cxx_destruct;
- (id)initWithCommand:(id)arg1 mediaRemoteType:(unsigned int)arg2 options:(id)arg3;

@end

@interface MPAVRoutingController : NSObject
{
    NSArray *_cachedRoutes;
    MPAVRoute *_cachedPickedRoute;
    NSMutableArray *_asyncFetchingCompletionHandlers;
    _Bool _asyncFetchingRoutes;
    long long _externalScreenType;
    _Bool _hasExternalScreenType;
    _Bool _scheduledSendDelegateRoutesChanged;
    _Bool _pickedRouteHasVolumeControl;
    _Bool _hasVolumeControlInfoForPickedRoute;
    int _deviceAvailabilityNotifyToken;
    _Bool _deviceAvailabilityOverrideState;
    id <MPAVRoutingControllerDelegate> _delegate;
    NSString *_name;
    long long _discoveryMode;
    NSString *_category;
}

@property(copy, nonatomic) NSString *category; // @synthesize category=_category;
@property(nonatomic) long long discoveryMode; // @synthesize discoveryMode=_discoveryMode;
@property(copy, nonatomic) NSString *name; // @synthesize name=_name;
@property(nonatomic) __weak id <MPAVRoutingControllerDelegate> delegate; // @synthesize delegate=_delegate;
- (void).cxx_destruct;
- (void)_scheduleSendDelegateRoutesChanged;
- (void)_updateCachedRoutes;
- (void)_setExternalScreenType:(long long)arg1;
- (id)_parseAVRouteDescriptions:(id)arg1;
- (void)_unregisterNotifications;
- (void)_registerNotifications;
- (void)logCurrentRoutes;
- (void)clearCachedRoutes;
- (void)_mediaServerDiedNotification:(id)arg1;
- (void)_externalScreenTypeDidChangeNotification:(id)arg1;
- (void)_activeAudioRouteDidChangeNotification:(id)arg1;
- (void)_routeStatusDidChangeNotification:(id)arg1;
- (void)_pickableRoutesDidChangeNotification:(id)arg1;
- (_Bool)routeOtherThanHandsetAndSpeakerAvailable;
- (_Bool)routeOtherThanHandsetAvailable;
- (_Bool)wirelessDisplayRoutesAvailable;
- (_Bool)airtunesRouteIsPicked;
- (_Bool)wirelessDisplayRouteIsPicked;
- (_Bool)receiverRouteIsPicked;
- (_Bool)handsetRouteIsPicked;
- (_Bool)speakerRouteIsPicked;
- (_Bool)pickSpeakerRoute;
- (_Bool)pickHandsetRoute;
- (_Bool)pickBestDeviceRoute;
- (_Bool)pickRoute:(id)arg1 withPassword:(id)arg2;
- (_Bool)pickRoute:(id)arg1;
- (id)videoRouteForRoute:(id)arg1;
- (void)fetchAvailableRoutesWithCompletionHandler:(CDUnknownBlockType)arg1;
@property(readonly, nonatomic) _Bool volumeControlIsAvailable;
@property(readonly, nonatomic) MPAVRoute *pickedRoute;
@property(readonly, nonatomic) long long externalScreenType;
@property(readonly, copy, nonatomic) NSArray *availableRoutes;
- (id)description;
- (void)dealloc;
- (id)init;
- (id)initWithName:(id)arg1;

@end

@interface MPCompleteMyCollectionArtworkDataSource : MPAbstractNetworkArtworkDataSource
{
}

- (long long)_artworkTypeForCatalog:(id)arg1;
- (id)supportedSizesForCatalog:(id)arg1;
- (id)sortedSupportedSizesForCatalog:(id)arg1;
- (id)requestForCatalog:(id)arg1 size:(struct CGSize)arg2;
- (id)cacheKeyForCatalog:(id)arg1 size:(struct CGSize)arg2;
- (_Bool)areRepresentationsAvailableForCatalog:(id)arg1;
- (_Bool)areRepresentationsForCatalog:(id)arg1 visuallyIdenticalToRepresentationsForCatalog:(id)arg2;

@end

@interface MPCloudAVURLAsset : AVURLAsset
{
    _Bool _isStreamingQuality;
    AVAssetDownloadSession *_downloadSession;
}

@property(nonatomic) _Bool isStreamingQuality; // @synthesize isStreamingQuality=_isStreamingQuality;
@property(nonatomic) __weak AVAssetDownloadSession *downloadSession; // @synthesize downloadSession=_downloadSession;
- (void).cxx_destruct;
- (void)dealloc;

@end

@interface MPStoreAVItem : MPAVItem
{
    MPStoreItemContext *_storeItemContext;
    NSString *_aggregateDictionaryItemIdentifier;
    MPMediaItem *_mediaItem;
    unsigned long long _options;
}

+ (void)applyVolumeNormalizationForQueuedItems:(id)arg1;
+ (void)setShouldAlwaysAirplayFromCloud:(_Bool)arg1;
@property(readonly, nonatomic) unsigned long long options; // @synthesize options=_options;
- (void).cxx_destruct;
- (id)mediaItem;
- (void)loadAssetAndPlayerItem;
- (id)aggregateDictionaryItemIdentifier;
- (unsigned long long)type;
- (void)applyVolumeNormalizationWithSoundCheckEnabled:(_Bool)arg1;
- (id)initWithStoreID:(long long)arg1 buyParameters:(id)arg2 mediaType:(unsigned long long)arg3 options:(unsigned long long)arg4;
- (id)initWithMediaItem:(id)arg1 options:(unsigned long long)arg2;

@end

@interface MPPlaybackContext : NSObject
{
    _Bool _keepPlayingCurrentItemIfPossible;
    _Bool _shouldStartPlayback;
    unsigned long long _shuffleType;
    unsigned long long _repeatType;
}

+ (Class)queueFeederClass;
@property(nonatomic) unsigned long long repeatType; // @synthesize repeatType=_repeatType;
@property(nonatomic) unsigned long long shuffleType; // @synthesize shuffleType=_shuffleType;
@property(nonatomic) _Bool shouldStartPlayback; // @synthesize shouldStartPlayback=_shouldStartPlayback;
@property(nonatomic) _Bool keepPlayingCurrentItemIfPossible; // @synthesize keepPlayingCurrentItemIfPossible=_keepPlayingCurrentItemIfPossible;
- (id)init;

@end

@interface MPSwipableView : UIView <UIGestureRecognizerDelegate>
{
    long long _enabledGestureTypes;
    long long _simultaneousGestureTypes;
    id <MPSwipableViewDelegate> _swipeDelegate;
    MPTapGestureRecognizer *_tapGestureRecognizer;
    MPSwipeGestureRecognizer *_swipeGestureRecognizer;
    MPActivityGestureRecognizer *_activityGestureRecognizer;
    UIPinchGestureRecognizer *_pinchGestureRecognizer;
}

@property(nonatomic) long long simultaneousGestureTypes; // @synthesize simultaneousGestureTypes=_simultaneousGestureTypes;
@property(nonatomic) long long enabledGestureTypes; // @synthesize enabledGestureTypes=_enabledGestureTypes;
@property(nonatomic) __weak id <MPSwipableViewDelegate> swipeDelegate; // @synthesize swipeDelegate=_swipeDelegate;
- (void).cxx_destruct;
- (void)_updateGestureRecognizersForEnabledTypes;
- (_Bool)gestureRecognizer:(id)arg1 shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)arg2;
- (void)_pinchGestureRecognized:(id)arg1;
- (void)_activityGestureRecognized:(id)arg1;
- (void)_tapGestureRecognized:(id)arg1;
- (void)_swipeGestureRecognized:(id)arg1;
- (void)willMoveToWindow:(id)arg1;
- (void)didMoveToSuperview;
- (void)willMoveToSuperview:(id)arg1;
- (void)removeGestureRecognizer:(id)arg1;
- (void)addGestureRecognizer:(id)arg1;
- (id)hitTest:(struct CGPoint)arg1 withEvent:(id)arg2;
- (void)dealloc;
- (id)initWithFrame:(struct CGRect)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface MPSwipeGestureRecognizer : UIGestureRecognizer
{
    struct CGPoint _startLocation;
    double _startTime;
    UITouch *_trackingTouch;
    long long _swipeDirection;
}

@property(readonly, nonatomic) long long swipeDirection; // @synthesize swipeDirection=_swipeDirection;
- (void).cxx_destruct;
- (void)dealloc;
- (void)reset;
- (void)touchesCancelled:(id)arg1 withEvent:(id)arg2;
- (void)touchesEnded:(id)arg1 withEvent:(id)arg2;
- (void)touchesMoved:(id)arg1 withEvent:(id)arg2;
- (void)touchesBegan:(id)arg1 withEvent:(id)arg2;
- (id)initWithTarget:(id)arg1 action:(SEL)arg2;

@end

@interface MPTapGestureRecognizer : UIGestureRecognizer
{
    unsigned long long _lastTapCount;
    struct CGPoint _tapLocation;
    UITouch *_trackingTouch;
    NSTimer *_tapHandleTimer;
}

@property unsigned long long tapCount; // @synthesize tapCount=_lastTapCount;
- (void).cxx_destruct;
- (void)dealloc;
- (void)reset;
- (struct CGPoint)locationInView:(id)arg1;
- (void)_delayedHandleTaps:(id)arg1;
- (void)touchesCancelled:(id)arg1 withEvent:(id)arg2;
- (void)touchesEnded:(id)arg1 withEvent:(id)arg2;
- (void)touchesBegan:(id)arg1 withEvent:(id)arg2;
- (void)_resetTapTimer;
- (void)_setTapTimerWithDuration:(double)arg1;
- (id)initWithTarget:(id)arg1 action:(SEL)arg2;

@end

@interface MPActivityGestureRecognizer : UIGestureRecognizer
{
}

- (void)_stopReportingOngoingActivity;
- (void)_reportOngoingActivity;
- (void)_touchesTerminated:(id)arg1 withEvent:(id)arg2;
- (void)touchesCancelled:(id)arg1 withEvent:(id)arg2;
- (void)touchesEnded:(id)arg1 withEvent:(id)arg2;
- (void)touchesMoved:(id)arg1 withEvent:(id)arg2;
- (void)touchesBegan:(id)arg1 withEvent:(id)arg2;
- (id)initWithTarget:(id)arg1 action:(SEL)arg2;

@end

@interface MPButton : UIButton
{
    struct UIEdgeInsets _hitRectInsets;
    double _holdDelayInterval;
    unsigned int _holding:1;
    struct UIEdgeInsets _alignmentRectInsets;
}

+ (id)easyTouchButtonWithType:(long long)arg1;
+ (double)easyTouchDefaultCharge;
+ (struct UIEdgeInsets)easyTouchDefaultHitRectInsets;
@property(nonatomic) double holdDelayInterval; // @synthesize holdDelayInterval=_holdDelayInterval;
@property(nonatomic) struct UIEdgeInsets hitRectInsets; // @synthesize hitRectInsets=_hitRectInsets;
- (void)_handleTouchUp;
- (void)_handleTouchDown;
- (void)_handleTouchCancel;
- (void)_delayedTriggerHold;
@property(nonatomic) struct UIEdgeInsets alignmentRectInsets; // @synthesize alignmentRectInsets=_alignmentRectInsets;
- (void)dealloc;
- (_Bool)pointInside:(struct CGPoint)arg1 withEvent:(id)arg2;
- (struct CGRect)hitRect;
- (void)endTrackingWithTouch:(id)arg1 withEvent:(id)arg2;
- (void)cancelTrackingWithEvent:(id)arg1;
- (_Bool)beginTrackingWithTouch:(id)arg1 withEvent:(id)arg2;
- (id)initWithFrame:(struct CGRect)arg1;

@end

@interface MPPlaybackControlsView : UIView <MPDetailSliderDelegate>
{
    UIActivityIndicatorView *_activityIndicator;
    id <MPPlaybackControlsDelegate> _delegate;
    MPButton *_fastFowardButton;
    UIView *_fastFowardButtonBezel;
    MPButton *_geniusButton;
    MPAVItem *_item;
    MPTimeMarker *_markerForProgressControlDuration;
    MPButton *_mailButton;
    MPButton *_playbackSpeedButton;
    MPDetailSlider *_progressControl;
    MPButton *_repeatButton;
    MPButton *_rewindButton;
    UIView *_rewindButtonBezel;
    CABasicAnimation *_rewindOpacityAnimation;
    MPAVController *_player;
    double _progressOffset;
    float _seekedToValue;
    MPButton *_shuffleButton;
    double _tickInterval;
    UILabel *_trackInfoLabel;
    unsigned long long _visibleParts;
    unsigned int _wantsTick:1;
    unsigned int _geniusButtonDisabled:1;
    unsigned int _fastForwardAndRewindButtonDisabled:1;
    unsigned int _playbackSpeedButtonDisabled:1;
    unsigned int _mailButtonDisabled:1;
    unsigned int _mailButtonHidden:1;
    unsigned int _useMediaDetailSlider:1;
    unsigned int _detailScrubbing:1;
    unsigned int _needsUpdateButtonVisibility:1;
    unsigned long long _disabledParts;
}

+ (unsigned long long)defaultVisibleParts;
@property(nonatomic) unsigned long long disabledParts; // @synthesize disabledParts=_disabledParts;
@property(nonatomic) unsigned long long visibleParts; // @synthesize visibleParts=_visibleParts;
@property(retain, nonatomic) MPAVController *player; // @synthesize player=_player;
@property(retain, nonatomic) MPAVItem *item; // @synthesize item=_item;
@property(nonatomic) __weak id <MPPlaybackControlsDelegate> delegate; // @synthesize delegate=_delegate;
- (void).cxx_destruct;
- (void)_updateForPlaybackSpeed;
- (void)_updateButtonVisibility;
- (void)_unregisterForAVItemNotifications;
- (void)_setVisiblePartsNeedReload;
- (void)_setCurrentTime:(double)arg1 duration:(double)arg2;
- (void)_resetGeniusButtonImages;
- (void)_registerForAVItemNotifications;
- (void)_changeGeniusImageToNormalImage:(id)arg1;
- (void)_changeGeniusImageToPressedImage:(id)arg1;
- (void)reloadControls;
- (void)_addOpacityAnimationToBezelView:(id)arg1 reversed:(_Bool)arg2;
- (void)_validityChangedNotification:(id)arg1;
- (void)_timeDidJumpNotification:(id)arg1;
- (void)_tickNotification:(id)arg1;
- (void)_playbackModeDidChangeNotification:(id)arg1;
- (void)_itemDurationDidChangeNotification:(id)arg1;
- (void)_isGeniusEnabledDidChangeNotification:(id)arg1;
- (void)crossedTimeMakerWithEvent:(id)arg1;
- (void)_contentsChangedNotification:(id)arg1;
- (void)_applicationWillEnterForegroundNotification:(id)arg1;
- (void)_applicationDidEnterBackgroundNotification:(id)arg1;
- (void)detailSlider:(id)arg1 didChangeScrubSpeed:(long long)arg2;
- (void)detailSlider:(id)arg1 didChangeValue:(float)arg2;
- (void)detailSliderTrackingDidEnd:(id)arg1;
- (void)detailSliderTrackingDidCancel:(id)arg1;
- (void)detailSliderTrackingDidBegin:(id)arg1;
- (void)animationDidStop:(id)arg1 finished:(_Bool)arg2;
- (void)_shuffleButton:(id)arg1;
- (void)_rewindButton:(id)arg1;
- (void)_fastForwardButton:(id)arg1;
- (void)_repeatButton:(id)arg1;
- (void)_playbackSpeedButton:(id)arg1;
- (void)_mailButton:(id)arg1;
- (void)_handleGeniusButtonClick;
- (void)_geniusButton:(id)arg1;
@property(readonly, nonatomic) _Bool shouldOverrideProgressTimeLabelStyle;
- (unsigned long long)displayablePartsInPartMask:(unsigned long long)arg1;
- (void)unregisterForPlayerNotifications;
- (void)registerForPlayerNotifications;
- (_Bool)pointInside:(struct CGPoint)arg1 withEvent:(id)arg2;
- (void)didMoveToSuperview;
- (void)updateForEndOfDetailScrubbing;
- (void)setCurrentTime:(double)arg1;
- (void)stopTicking;
- (void)startTicking;
@property(readonly, nonatomic) unsigned long long shuffleType;
@property(readonly, nonatomic) _Bool shuffleIsOn;
@property(readonly, nonatomic) UIImage *shuffleButtonImage;
- (void)resetDetailSlider:(id)arg1;
@property(readonly, nonatomic) UIImage *repeatButtonImage;
@property(readonly, nonatomic) _Bool isScrubbing;
@property(readonly, nonatomic) unsigned long long repeatType;
- (void)reloadView;
- (void)reloadButtonVisibility;
- (double)_updatedDisplayDurationForTime:(double)arg1 preciseChapterMarkers:(_Bool)arg2;
- (double)_currentDisplayTime;
- (id)playbackSpeedTitleForPlaybackSpeed:(unsigned long long)arg1;
- (id)playbackSpeedButtonImageForPlaybackSpeed:(unsigned long long)arg1;
- (_Bool)progressBarClipsToChapterDuration;
@property(readonly, nonatomic) UIImage *mailButtonImage;
@property(readonly, nonatomic) NSString *localizedScrubSpeedText;
@property(readonly, nonatomic) _Bool hideGeniusButton;
- (void)handleChangeToShuffleType:(unsigned long long)arg1;
- (void)handleChangeToRepeatType:(unsigned long long)arg1;
- (id)geniusButtonImageForControlState:(unsigned long long)arg1;
- (id)newTrackInfoLabel;
- (id)newProgressIndicator;
- (id)newButtonBezelViewForPart:(unsigned long long)arg1;
- (id)newButtonForPart:(unsigned long long)arg1;
@property(readonly, nonatomic) _Bool detailScrubbingHidesControls;
- (long long)buttonType;
- (Class)buttonClass;
- (void)layoutSubviews;
- (void)dealloc;
- (id)initWithFrame:(struct CGRect)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface MPMediaPlaylist : MPMediaItemCollection
{
    NSArray *_representativeArtists;
    MPMediaQuery *_seedTracksQuery;
}

+ (_Bool)_isValidPlaylistProperty:(id)arg1;
+ (void)_createFilterableDictionary;
+ (_Bool)canFilterByProperty:(id)arg1;
- (void).cxx_destruct;
- (_Bool)canPlayUsingNetworkType:(long long)arg1;
- (_Bool)isCloudMix;
- (id)seedTracksQuery;
- (id)representativeArtists;
- (id)multiverseIdentifier;
- (id)representativeItem;
- (unsigned long long)mediaTypes;
- (unsigned long long)count;
- (id)items;
@property(readonly, nonatomic) NSArray *seedItems;
@property(readonly, nonatomic) unsigned long long playlistAttributes;
@property(readonly, nonatomic) NSString *name;
@property(readonly, nonatomic) unsigned long long persistentID;
- (_Bool)existsInLibrary;
- (id)valueForProperty:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (_Bool)isEqual:(id)arg1;
- (unsigned long long)hash;
- (id)initWithMultiverseIdentifier:(id)arg1;
- (id)initWithPersistentID:(unsigned long long)arg1;
- (id)artworkCatalogsWithMaximumCount:(unsigned long long)arg1;

@end

@interface MPMediaQuery : NSObject <MPPProtobufferCoding, NSSecureCoding, NSCopying>
{
    MPMediaLibrary *_mediaLibrary;
    MPMediaQueryCriteria *_criteria;
    int _isFilteringDisabled;
    NSArray *_staticEntities;
    unsigned long long _staticEntityType;
}

+ (id)geniusMixesQuery;
+ (id)videoPodcastsQuery;
+ (id)audioPodcastsQuery;
+ (id)movieRentalsQuery;
+ (id)moviesQuery;
+ (id)homeVideosQuery;
+ (id)tvShowsQuery;
+ (id)musicVideosQuery;
+ (id)videosQuery;
+ (id)albumArtistsQuery;
+ (_Bool)isFilteringDisabled;
+ (void)setFilteringDisabled:(_Bool)arg1;
+ (void)initFilteringDisabled;
+ (id)genresQuery;
+ (id)composersQuery;
+ (id)compilationsQuery;
+ (id)audibleAudiobooksQuery;
+ (id)audiobooksQuery;
+ (id)videoITunesUQuery;
+ (id)ITunesUAudioQuery;
+ (id)ITunesUQuery;
+ (id)podcastsQuery;
+ (id)playlistsQuery;
+ (id)songsQuery;
+ (id)artistsQuery;
+ (id)albumsQuery;
+ (_Bool)supportsSecureCoding;
+ (void)initialize;
+ (id)currentDevicePurchasesPlaylist;
+ (id)activeGeniusPlaylist;
- (void).cxx_destruct;
- (void)setCriteria:(id)arg1;
- (id)criteria;
- (void)setStaticEntities:(id)arg1 entityType:(unsigned long long)arg2;
- (void)_enumerateCollectionsInOrder:(_Bool)arg1 usingBlock:(CDUnknownBlockType)arg2;
- (void)_enumerateUnorderedCollectionsUsingBlock:(CDUnknownBlockType)arg1;
- (void)_enumerateCollectionsUsingBlock:(CDUnknownBlockType)arg1;
- (void)_enumerateItemsInOrder:(_Bool)arg1 usingBlock:(CDUnknownBlockType)arg2;
- (void)_enumerateUnorderedItemsUsingBlock:(CDUnknownBlockType)arg1;
- (void)_enumerateItemsUsingBlock:(CDUnknownBlockType)arg1;
- (_Bool)_isFilteringDisabled;
- (id)valueForAggregateFunction:(id)arg1 onCollectionsForProperty:(id)arg2;
- (id)valueForAggregateFunction:(id)arg1 onItemsForProperty:(id)arg2;
- (id)_valueForAggregateFunction:(id)arg1 onProperty:(id)arg2 entityType:(unsigned long long)arg3;
@property(readonly, nonatomic) NSArray *collectionSections;
@property(readonly, nonatomic) NSArray *itemSections;
@property(readonly, nonatomic) _Bool willGroupEntities;
- (unsigned long long)groupingThreshold;
@property(readonly, nonatomic) _Bool specifiesPlaylistItems;
@property(readonly, nonatomic) _Bool excludesEntitiesWithBlankNames;
@property(nonatomic) _Bool useSections;
@property(nonatomic) _Bool sortItems;
@property(copy, nonatomic, getter=_orderingDirectionMappings, setter=_setOrderingDirectionMappings:) NSDictionary *orderingDirectionMappings;
@property(copy, nonatomic, getter=_orderingProperties, setter=_setOrderingProperties:) NSArray *orderingProperties;
@property(readonly, nonatomic) MPMediaQuerySectionInfo *collectionSectionInfo;
@property(readonly, nonatomic) MPMediaQuerySectionInfo *itemSectionInfo;
@property(readonly, nonatomic) NSArray *collectionPersistentIdentifiers;
@property(readonly, nonatomic) NSArray *itemPersistentIdentifiers;
@property(readonly, nonatomic) unsigned long long _countOfCollections;
@property(readonly, nonatomic) unsigned long long _countOfItems;
@property(readonly, nonatomic) _Bool _hasCollections;
@property(readonly, nonatomic) _Bool _hasItems;
@property(copy, nonatomic) NSSet *collectionPropertiesToFetch;
@property(readonly, nonatomic) NSArray *collectionPropertiesToFetchArray;
@property(copy, nonatomic) NSSet *itemPropertiesToFetch;
@property(readonly, nonatomic) NSArray *itemPropertiesToFetchArray;
@property(nonatomic) _Bool ignoreSystemFilterPredicates;
@property(nonatomic) long long groupingType;
@property(readonly, nonatomic) NSArray *collections;
@property(readonly, nonatomic) NSArray *items;
@property(retain, nonatomic) MPMediaLibrary *mediaLibrary;
- (void)removeFilterPredicate:(id)arg1;
- (void)addFilterPredicate:(id)arg1;
@property(retain, nonatomic) NSSet *filterPredicates;
- (id)protobufferEncodableObject;
- (id)initWithProtobufferDecodableObject:(id)arg1;
- (id)copyBySanitizingStaticEntities;
- (id)copyByRemovingStaticEntities;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
@property(readonly) unsigned long long hash;
- (_Bool)isEqual:(id)arg1;
@property(readonly, copy) NSString *description;
- (id)init;
- (id)initWithEntities:(id)arg1 entityType:(unsigned long long)arg2;
- (id)initWithCriteria:(id)arg1 library:(id)arg2;
- (id)initWithFilterPredicates:(id)arg1;
@property(readonly, nonatomic) MPMediaItemCollection *collectionByJoiningCollections;
- (_Bool)_updatePredicateForProperty:(id)arg1 withPropertyPredicate:(id)arg2;
- (void)setFilterPropertyPredicate:(id)arg1;
- (void)setFilterPredicate:(id)arg1 forProperty:(id)arg2;
- (void)removePredicatesForProperty:(id)arg1;
- (id)predicateForProperty:(id)arg1;
@property(readonly, nonatomic) MPMediaPlaylist *containingPlaylist;
- (id)MPSD_mediaQueryForDownloadingEntities;
- (id)MPSD_mediaQueryForDownloadableEntities;
- (_Bool)MPSD_hasDownloadingEntities;
- (_Bool)MPSD_hasDownloadableEntities;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly) Class superclass;

@end

@interface MPMediaPredicate : NSObject <MPPProtobufferCoding, NSSecureCoding>
{
}

+ (_Bool)supportsSecureCoding;
- (_Bool)evaluateEntity:(id)arg1;
- (id)protobufferEncodableObject;
- (id)initWithProtobufferDecodableObject:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface MPMediaPropertyPredicate : MPMediaPredicate <MPPProtobufferCoding>
{
    NSString *_property;
    id _value;
    long long _comparisonType;
}

+ (id)predicateWithValue:(id)arg1 forProperty:(id)arg2 comparisonType:(long long)arg3;
+ (id)predicateWithValue:(id)arg1 forProperty:(id)arg2;
- (void).cxx_destruct;
@property(nonatomic) long long comparisonType;
@property(copy, nonatomic) id value;
@property(copy, nonatomic) NSString *property;
- (id)protobufferEncodableObject;
- (id)initWithProtobufferDecodableObject:(id)arg1;
@property(readonly) unsigned long long hash;
- (_Bool)isEqual:(id)arg1;
@property(readonly, copy) NSString *description;
- (id)descriptionOfValue:(id)arg1 forProperty:(id)arg2;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)_ML3PredicateForML3EntityProperty:(id)arg1;
- (id)ML3PredicateForContainer;
- (id)ML3PredicateForTrack;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly) Class superclass;

@end

@interface MPMediaConditionalPredicate : MPMediaPredicate <MPPProtobufferCoding>
{
    MPMediaPredicate *_conditionPredicate;
    MPMediaPredicate *_thenPredicate;
    MPMediaPredicate *_elsePredicate;
}

+ (id)predicateWithConditionPredicate:(id)arg1 thenPredicate:(id)arg2 elsePredicate:(id)arg3;
@property(readonly, copy, nonatomic) MPMediaPredicate *elsePredicate; // @synthesize elsePredicate=_elsePredicate;
@property(readonly, copy, nonatomic) MPMediaPredicate *thenPredicate; // @synthesize thenPredicate=_thenPredicate;
@property(readonly, copy, nonatomic) MPMediaPredicate *conditionPredicate; // @synthesize conditionPredicate=_conditionPredicate;
- (void).cxx_destruct;
- (id)protobufferEncodableObject;
- (id)initWithProtobufferDecodableObject:(id)arg1;
- (id)initWithConditionPredicate:(id)arg1 thenPredicate:(id)arg2 elsePredicate:(id)arg3;
- (id)ML3PredicateForContainer;
- (id)ML3PredicateForTrack;
- (id)_ML3PredicateForEntityTypeSelector:(SEL)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface MPMediaCompoundPredicate : MPMediaPredicate <MPPProtobufferCoding>
{
    NSArray *_predicates;
}

+ (id)predicateMatchingPredicates:(id)arg1;
@property(readonly, copy, nonatomic) NSArray *predicates; // @synthesize predicates=_predicates;
- (void).cxx_destruct;
- (id)protobufferEncodableObject;
- (id)initWithProtobufferDecodableObject:(id)arg1;
@property(readonly) unsigned long long hash;
- (_Bool)isEqual:(id)arg1;
@property(readonly, copy) NSString *description;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithPredicates:(id)arg1;
- (id)ML3PredicateForContainer;
- (id)ML3PredicateForTrack;
- (id)_ML3PredicateForEntityTypeSelector:(SEL)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly) Class superclass;

@end

@interface MPMediaCompoundAllPredicate : MPMediaCompoundPredicate
{
}

@end

@interface MPMediaCompoundAnyPredicate : MPMediaCompoundPredicate
{
}

@end

@interface MPMediaPersistentIDsPredicate : MPMediaPredicate <MPPProtobufferCoding>
{
    long long *_persistentIDs;
    _Bool _shouldContain;
    unsigned long long _count;
}

+ (id)predicateWithPersistentIDs:(const long long *)arg1 count:(unsigned long long)arg2 shouldContain:(_Bool)arg3;
@property(readonly, nonatomic) _Bool shouldContain; // @synthesize shouldContain=_shouldContain;
@property(readonly, nonatomic) const long long *persistentIDs; // @synthesize persistentIDs=_persistentIDs;
@property(readonly, nonatomic) unsigned long long count; // @synthesize count=_count;
- (id)protobufferEncodableObject;
- (id)initWithProtobufferDecodableObject:(id)arg1;
@property(readonly) unsigned long long hash;
- (_Bool)isEqual:(id)arg1;
@property(readonly, copy) NSString *description;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (void)dealloc;
- (id)ML3PredicateForContainer;
- (id)ML3PredicateForTrack;
- (id)_ML3PredicateForEntityClass:(Class)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly) Class superclass;

@end

@interface _MPMediaSearchStringPredicate : MPMediaPredicate <MPPProtobufferCoding>
{
    NSString *_searchString;
    NSSet *_properties;
}

+ (id)predicateWithSearchString:(id)arg1 forProperties:(id)arg2;
@property(copy, nonatomic) NSSet *properties; // @synthesize properties=_properties;
@property(copy, nonatomic) NSString *searchString; // @synthesize searchString=_searchString;
- (void).cxx_destruct;
- (id)protobufferEncodableObject;
- (id)initWithProtobufferDecodableObject:(id)arg1;
@property(readonly) unsigned long long hash;
- (_Bool)isEqual:(id)arg1;
@property(readonly, copy) NSString *description;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)ML3PredicateForContainer;
- (id)ML3PredicateForTrack;
- (id)_ML3PredicateForEntityClass:(Class)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly) Class superclass;

@end

@interface MPMusicPlayerController : NSObject <MPMediaPlayback>
{
    MPMusicPlayerControllerInternal *_internal;
}

+ (id)runLoopForNotifications;
+ (void)setRunLoopForNotifications:(id)arg1;
+ (void)initialize;
+ (id)iPodMusicPlayer;
+ (id)systemMusicPlayer;
+ (id)applicationMusicPlayer;
- (void).cxx_destruct;
- (void)_stopMigServer;
- (void)_runMigServerOnPort:(unsigned int)arg1;
- (void)_itemPlaybackDidEnd:(unsigned long long)arg1;
- (void)_isQueuePreparedDidChange:(_Bool)arg1;
- (void)_repeatModeDidChange:(long long)arg1;
- (void)_shuffleModeDidChange:(long long)arg1;
- (void)_nowPlayingItemDidChange:(unsigned long long)arg1;
- (void)_playbackStateDidChange:(long long)arg1;
- (_Bool)_musicPlayerExistencePortIsValid;
- (void)_clientCheckInUsingExistencePort:(_Bool)arg1;
- (void)_unregisterForLaunchNotifications;
- (void)_registerForLaunchNotifications;
- (void)_musicPlayerDidLaunch;
- (void)_serverDied:(id)arg1;
- (void)_setUseApplicationSpecificQueue:(_Bool)arg1;
- (_Bool)serverIsAlive;
- (_Bool)skipInDirection:(long long)arg1 error:(id *)arg2;
- (void)setQueueWithRadioStation:(id)arg1;
- (void)setQueueWithGeniusMixPlaylist:(id)arg1;
- (void)setQueueWithQuery:(id)arg1 firstItem:(id)arg2;
- (void)setCurrentChapterIndex:(unsigned long long)arg1;
- (unsigned long long)currentChapterIndex;
- (_Bool)isNowPlayingItemFromGeniusMix;
- (unsigned long long)numberOfItems;
- (unsigned long long)unshuffledIndexOfNowPlayingItem;
- (unsigned long long)indexOfNowPlayingItem;
- (void)setPlaybackSpeed:(long long)arg1;
- (long long)playbackSpeed;
- (void)setAllowsBackgroundVideo:(_Bool)arg1;
- (_Bool)allowsBackgroundVideo;
- (void)setUseCachedPlaybackState:(_Bool)arg1;
- (void)pauseWithFadeoutDuration:(double)arg1;
- (id)nowPlayingItemAtIndex:(unsigned long long)arg1;
- (_Bool)setQueueWithSeedItems:(id)arg1;
- (_Bool)isGeniusAvailableForSeedItems:(id)arg1;
- (_Bool)isGeniusAvailable;
- (void)endGeneratingPlaybackNotifications;
- (void)beginGeneratingPlaybackNotifications;
- (void)setVolumePrivate:(float)arg1;
- (void)setVolume:(float)arg1;
- (float)volume;
- (void)setShuffleMode:(long long)arg1;
- (long long)shuffleMode;
- (void)setRepeatMode:(long long)arg1;
- (long long)repeatMode;
- (long long)playbackState;
- (void)setQueueWithItemCollection:(id)arg1;
- (void)setQueueWithQuery:(id)arg1;
- (id)nowPlayingItem;
- (void)stop;
@property(nonatomic) double currentPlaybackTime;
@property(nonatomic) float currentPlaybackRate;
- (void)pause;
- (void)play;
- (void)prepareToPlay;
@property(readonly, nonatomic) _Bool isPreparedToPlay;
- (void)endSeeking;
- (void)beginSeekingBackward;
- (void)beginSeekingForward;
- (id)methodSignatureForSelector:(SEL)arg1;
- (void)forwardInvocation:(id)arg1;
- (void)_systemVolumeDidChange:(id)arg1;
- (void)dealloc;
- (id)init;

@end

@interface MPMusicPlayerControllerInternal : MPServerObjectProxy <MPMusicPlayerController>
{
    unsigned int _clientPort;
    long long _inBlockHandlingPlaybackStateChangedMessageFromServer;
    MPMediaItemCollection *_itemCollection;
    MPMusicPlayerController *_musicPlayerController;
    long long _playbackNotificationObservers;
    long long _playbackState;
    _Bool _preparedToPlay;
    struct SBSProcessAssertion *_processAssertion;
    MPMediaQuery *_query;
    struct __CFRunLoopSource *_runLoopSource;
    unsigned int _didCheckIn:1;
    unsigned int _useApplicationSpecificQueue:1;
    unsigned int _useCachedPlaybackState:1;
    unsigned int _cachedPlaybackStateIsValid:1;
    unsigned int _allowsBackgroundVideo:1;
}

- (void).cxx_destruct;
- (id)_bundleIdentifier;
@property _Bool inBlockHandlingPlaybackStateChangedMessageFromServer;
- (void)acquireProcessAssertion;
- (void)serverConnectionDied;
- (void)didPrepareForRemoteSelectorInvocation;
- (_Bool)prepareForRemoteSelectorInvocation;
- (void)dealloc;
- (id)initWithMusicPlayerController:(id)arg1;

@end

@interface MPArtworkCatalog : NSObject
{
    struct CGSize _fittingSize;
    _Bool _loadingRepresentation;
    double _destinationScale;
    id _token;
    id <MPArtworkDataSource> _dataSource;
    NSString *_cacheIdentifier;
    id _requestingContext;
    id _destination;
    CDUnknownBlockType _configurationBlock;
}

+ (id)_artworkCacheForIdentifier:(id)arg1 requestingContext:(id)arg2;
+ (void)setCachePurgesWhenEnteringBackground:(_Bool)arg1 forCacheIdentifier:(id)arg2 requestingContext:(id)arg3;
+ (void)setCacheLimit:(unsigned long long)arg1 forCacheIdentifier:(id)arg2 requestingContext:(id)arg3;
@property(getter=isLoadingRepresentation) _Bool loadingRepresentation; // @synthesize loadingRepresentation=_loadingRepresentation;
@property(copy, nonatomic) CDUnknownBlockType configurationBlock; // @synthesize configurationBlock=_configurationBlock;
@property(nonatomic) __weak id destination; // @synthesize destination=_destination;
@property(nonatomic) __weak id requestingContext; // @synthesize requestingContext=_requestingContext;
@property(copy, nonatomic) NSString *cacheIdentifier; // @synthesize cacheIdentifier=_cacheIdentifier;
@property(nonatomic) __weak id <MPArtworkDataSource> dataSource; // @synthesize dataSource=_dataSource;
@property(retain, nonatomic) id token; // @synthesize token=_token;
@property(nonatomic) struct CGSize fittingSize; // @synthesize fittingSize=_fittingSize;
@property(nonatomic) double destinationScale; // @synthesize destinationScale=_destinationScale;
- (void).cxx_destruct;
- (void)_updateWithRepresentation:(id)arg1;
- (void)_updateRepresentation;
- (void)_loadBestRepresentationIfNeeded;
@property(readonly, nonatomic) NSCache *cache;
- (void)setCacheIdentifier:(id)arg1 forRequestingContext:(id)arg2;
- (_Bool)isArtworkVisuallyIdenticalToCatalog:(id)arg1;
- (void)setDestination:(id)arg1 configurationBlock:(CDUnknownBlockType)arg2;
- (id)bestImageFromDisk;
- (void)requestImageWithCompletionHandler:(CDUnknownBlockType)arg1;
@property(readonly, nonatomic) struct CGSize scaledFittingSize;
- (id)description;
- (_Bool)isEqual:(id)arg1;
- (unsigned long long)hash;
- (void)dealloc;
- (id)initWithToken:(id)arg1 dataSource:(id)arg2;

@end

@interface MPArtworkRepresentation : NSObject
{
    UIImage *_image;
    struct CGSize _representationSize;
}

+ (id)representationWithSize:(struct CGSize)arg1 image:(id)arg2;
@property(nonatomic) struct CGSize representationSize; // @synthesize representationSize=_representationSize;
@property(retain, nonatomic) UIImage *image; // @synthesize image=_image;
- (void).cxx_destruct;
- (id)debugQuickLookObject;

@end

@interface MPPConditionalPredicate : PBCodable <NSCopying>
{
    MPPMediaPredicate *_conditionalPredicate;
    MPPMediaPredicate *_elsePredicate;
    MPPMediaPredicate *_thenPredicate;
}

@property(retain, nonatomic) MPPMediaPredicate *elsePredicate; // @synthesize elsePredicate=_elsePredicate;
@property(retain, nonatomic) MPPMediaPredicate *thenPredicate; // @synthesize thenPredicate=_thenPredicate;
@property(retain, nonatomic) MPPMediaPredicate *conditionalPredicate; // @synthesize conditionalPredicate=_conditionalPredicate;
- (void).cxx_destruct;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)copyTo:(id)arg1;
- (void)writeTo:(id)arg1;
- (_Bool)readFrom:(id)arg1;
- (id)dictionaryRepresentation;
- (id)description;
@property(readonly, nonatomic) _Bool hasElsePredicate;
@property(readonly, nonatomic) _Bool hasThenPredicate;
@property(readonly, nonatomic) _Bool hasConditionalPredicate;
- (void)dealloc;

@end

@interface MPMediaItem : MPMediaEntity
{
}

+ (_Bool)_isValidItemProperty:(id)arg1;
+ (void)_createFilterableDictionary;
+ (id)dynamicProperties;
+ (id)fallbackTitlePropertyForGroupingType:(long long)arg1;
+ (id)titlePropertyForGroupingType:(long long)arg1;
+ (id)persistentIDPropertyForGroupingType:(long long)arg1;
+ (_Bool)canFilterByProperty:(id)arg1;
+ (id)screenshotArtworkCatalogCacheProperties;
+ (id)artworkCatalogCacheProperties;
+ (id)MPSD_mediaItemPropertiesForDownloadability;
- (id)_libraryLinkURL;
- (id)_libraryLinkPlaylistName;
- (id)_libraryLinkKind;
- (id)_libraryLinkArtist;
- (id)_directStoreURL;
@property(readonly, nonatomic) _Bool isUsableAsRepresentativeItem;
- (void)gaplessHeuristicInfo:(unsigned int *)arg1 durationInSamples:(unsigned long long *)arg2 lastPacketsResync:(unsigned long long *)arg3 encodingDelay:(unsigned int *)arg4 encodingDrain:(unsigned int *)arg5;
- (unsigned long long)countOfChaptersOfType:(long long)arg1;
- (id)chapterOfType:(long long)arg1 atTime:(double)arg2;
- (id)chapterOfType:(long long)arg1 atIndex:(unsigned long long)arg2;
- (id)chaptersOfType:(long long)arg1;
@property(readonly, nonatomic) NSString *userGrouping;
@property(readonly, nonatomic) NSString *lyrics;
@property(readonly, nonatomic) unsigned long long discCount;
@property(readonly, nonatomic) unsigned long long discNumber;
@property(readonly, nonatomic) unsigned long long albumTrackNumber;
@property(readonly, nonatomic) _Bool rememberBookmarkTime;
@property(nonatomic) _Bool hasBeenPlayed;
@property(copy, nonatomic) NSDate *lastSkippedDate;
@property(nonatomic) unsigned long long skipCountSinceSync;
- (void)setSkipCount:(unsigned long long)arg1;
@property(readonly, nonatomic) unsigned long long skipCount;
@property(copy, nonatomic) NSDate *dateAccessed;
@property(copy, nonatomic) NSDate *lastPlayedDate;
@property(nonatomic) unsigned long long playCountSinceSync;
- (void)setPlayCount:(unsigned long long)arg1;
@property(readonly, nonatomic) unsigned long long playCount;
- (id)predicateForProperty:(id)arg1;
@property(readonly, nonatomic) unsigned long long year;
@property(readonly, nonatomic) NSString *title;
@property(readonly, nonatomic) NSDate *releaseDate;
- (void)setRating:(unsigned long long)arg1;
@property(readonly, nonatomic) unsigned long long rating;
@property(readonly, nonatomic) unsigned long long podcastPersistentID;
@property(readonly, nonatomic) NSString *podcastTitle;
@property(readonly, nonatomic) double effectiveStopTime;
@property(readonly, nonatomic) double stopTime;
@property(readonly, nonatomic) double startTime;
@property(readonly, nonatomic) double playbackDuration;
@property(readonly, nonatomic) unsigned long long mediaType;
@property(readonly, nonatomic, getter=isCloudItem) _Bool cloudItem;
@property(readonly, nonatomic, getter=isCompilation) _Bool compilation;
@property(readonly, nonatomic) _Bool isITunesU;
@property(readonly, nonatomic) _Bool isRental;
@property(readonly, nonatomic) unsigned long long genrePersistentID;
@property(readonly, nonatomic) NSString *genre;
@property(readonly, nonatomic) unsigned long long composerPersistentID;
@property(readonly, nonatomic) NSString *composer;
@property(readonly, nonatomic) NSString *comments;
@property(readonly, nonatomic) double bookmarkTime;
@property(readonly, nonatomic) unsigned long long beatsPerMinute;
@property(readonly, nonatomic) NSURL *assetURL;
@property(readonly, nonatomic) MPMediaItemArtwork *artwork;
@property(readonly, nonatomic) unsigned long long artistPersistentID;
@property(readonly, nonatomic) NSString *artist;
@property(readonly, nonatomic) unsigned long long albumTrackCount;
@property(readonly, nonatomic) NSString *albumTitle;
@property(readonly, nonatomic) unsigned long long albumArtistPersistentID;
@property(readonly, nonatomic) unsigned long long albumPersistentID;
@property(readonly, nonatomic) NSString *effectiveAlbumArtist;
@property(readonly, nonatomic) NSString *albumArtist;
@property(readonly, nonatomic) NSArray *chapters;
- (id)multiverseIdentifier;
- (void)populateLocationPropertiesWithPath:(id)arg1;
- (_Bool)existsInLibrary;
- (id)representativeItem;
- (id)_bestStoreURL;
- (void)didReceiveMemoryWarning;
- (void)updateDateAccessedToCurrentDateWithWriteCompletionBlock:(CDUnknownBlockType)arg1;
- (_Bool)incrementPlayCountForStopTime:(double)arg1;
- (void)incrementPlayCountForPlayingToEnd;
- (void)incrementSkipCount;
- (void)noteWasPlayedToTime:(double)arg1 skipped:(_Bool)arg2;
- (void)markNominalAmountHasBeenPlayed;
- (_Bool)didSkipWithPlayedToTime:(double)arg1;
- (id)valuesForProperties:(id)arg1;
- (id)valueForProperty:(id)arg1;
- (Class)itemArrayCoderPIDDataCodingClass;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (_Bool)isEqual:(id)arg1;
- (unsigned long long)hash;
- (id)initWithMultiverseIdentifier:(id)arg1;
- (id)initWithPersistentID:(unsigned long long)arg1;
- (id)screenshotArtworkCatalog;
- (id)artworkCatalog;
@property(readonly, nonatomic) _Bool mediaTypeCanSeedGenius;
- (_Bool)MPSD_isDownloadInProgress;
- (_Bool)MPSD_isDownloadable;

// Remaining properties
@property(readonly, nonatomic) unsigned long long persistentID;

@end

@interface MPNondurableMediaItem : MPMediaItem
{
    unsigned long long _persistentID;
}

+ (id)defaultPropertyValues;
+ (_Bool)canFilterByProperty:(id)arg1;
- (_Bool)isUsableAsRepresentativeItem;
- (void)enumerateValuesForProperties:(id)arg1 usingBlock:(CDUnknownBlockType)arg2;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (void)setValue:(id)arg1 forKey:(id)arg2;
- (id)valueForProperty:(id)arg1;
- (id)valuesForProperties:(id)arg1;
- (void)updateDateAccessedToCurrentDateWithWriteCompletionBlock:(CDUnknownBlockType)arg1;
- (_Bool)incrementPlayCountForStopTime:(double)arg1;
- (void)incrementPlayCountForPlayingToEnd;
- (void)incrementSkipCount;
- (void)noteWasPlayedToTime:(double)arg1 skipped:(_Bool)arg2;
- (void)markNominalAmountHasBeenPlayed;
- (_Bool)didSkipWithPlayedToTime:(double)arg1;
- (_Bool)existsInLibrary;
- (unsigned long long)persistentID;
- (id)initWithPersistentID:(unsigned long long)arg1;

@end

@interface MPMediaItemArtwork : NSObject
{
    UIImage *_image;
}

- (void).cxx_destruct;
@property(readonly, nonatomic) struct CGRect imageCropRect;
@property(readonly, nonatomic) struct CGRect bounds;
- (id)imageWithSize:(struct CGSize)arg1;
- (id)initWithImage:(id)arg1;

@end

@interface QueryCriteriaResultsCache : NSCache
{
}

- (id)init;

@end

@interface MPMediaLibrary : NSObject <NSSecureCoding>
{
    id <MPMediaLibraryDataProviderPrivate> _libraryDataProvider;
    long long _libraryChangeObservers;
    NSObject<OS_dispatch_queue> *_entityCacheQueue;
    NSObject<OS_dispatch_queue> *_fixedQueue;
    QueryCriteriaResultsCache *_itemsForCriteriaCache;
    QueryCriteriaResultsCache *_hasItemsForCriteriaCache;
    QueryCriteriaResultsCache *_countOfItemsForCriteriaCache;
    QueryCriteriaResultsCache *_itemResultSetsForCriteriaCache;
    QueryCriteriaResultsCache *_collectionsForCriteriaCache;
    QueryCriteriaResultsCache *_hasCollectionsForCriteriaCache;
    QueryCriteriaResultsCache *_countOfCollectionsForCriteriaCache;
    QueryCriteriaResultsCache *_collectionsResultSetsForCriteriaCache;
    NSMutableDictionary *_hasItemsDidLoadForCriteria;
    NSMutableDictionary *_hasCollectionsDidLoadForCriteria;
    NSMutableDictionary *_countOfCollectionsDidLoadForCriteria;
    NSMutableDictionary *_countOfItemsDidLoadForCriteria;
    NSMutableArray *_additionalLibraryFilterPredicates;
    NSObject<OS_dispatch_queue> *_additionalLibraryFilterPredicatesAccessQueue;
    NSHashTable *_connectionAssertions;
    _Bool _disconnectAfterReleasingAssertions;
    float _connectionProgress;
    CADisplayLink *_connectionProgressDisplayLink;
    double _connectionProgressStartTime;
    long long _removalReason;
    unsigned int _determinedHasMedia:1;
    unsigned int _hasMedia:1;
    unsigned int _determinedHasSongs:1;
    unsigned int _hasSongs:1;
    unsigned int _determinedHasGeniusMixes:1;
    unsigned int _hasGeniusMixes:1;
    unsigned int _determinedHasPlaylists:1;
    unsigned int _hasPlaylists:1;
    unsigned int _determinedHasComposers:1;
    unsigned int _hasComposers:1;
    unsigned int _determinedHasPodcasts:1;
    unsigned int _hasPodcasts:1;
    unsigned int _determinedHasUbiquitousBookmarkableItems:1;
    unsigned int _hasUbiquitousBookmarkableContent:1;
    unsigned int _determinedHasAudiobooks:1;
    unsigned int _hasAudiobooks:1;
    long long _cloudFilteringType;
    _Bool _filteringDisabled;
    _Bool _hasVideos;
    _Bool _determinedHasVideos;
    _Bool _hasMusicVideos;
    _Bool _determinedHasMusicVideos;
    _Bool _hasAudibleAudioBooks;
    _Bool _determinedHasAudibleAudioBooks;
    _Bool _hasMovies;
    _Bool _determinedHasMovies;
    _Bool _hasCompilations;
    _Bool _determinedHasCompilations;
    _Bool _hasITunesU;
    _Bool _determinedHasITunesU;
    _Bool _hasVideoITunesU;
    _Bool _determinedHasVideoITunesU;
    _Bool _hasMovieRentals;
    _Bool _determinedHasMovieRentals;
    _Bool _hasTVShows;
    _Bool _determinedHasTVShows;
    _Bool _hasHomeVideos;
    _Bool _determinedHasHomeVideos;
    _Bool _hasVideoPodcasts;
    _Bool _determinedHasVideoPodcasts;
    unsigned char _originalCellNetworkFlags;
    unsigned char _originalWiFiNetworkFlags;
}

+ (void)uniqueIdentifierDidChangeForLibraryDataProvider:(id)arg1;
+ (void)syncGenerationDidChangeForLibraryDataProvider:(id)arg1;
+ (void)reloadDisplayValuesForLibraryDataProvider:(id)arg1;
+ (void)reloadInvisiblePropertiesForLibraryDataProvider:(id)arg1;
+ (void)reloadDynamicPropertiesForLibraryDataProvider:(id)arg1;
+ (void)reloadLibraryDataProvider:(id)arg1;
+ (void)removeLibraryDataProvider:(id)arg1 removalReason:(long long)arg2;
+ (void)addLibraryDataProvider:(id)arg1;
+ (id)libraryDataProviders;
+ (id)_libraryDataProviders;
+ (id)_libraryForDataProvider:(id)arg1;
+ (id)mediaLibraryWithUniqueIdentifier:(id)arg1;
+ (id)mediaLibraries;
+ (id)_mediaLibraries;
+ (void)setRunLoopForNotifications:(id)arg1;
+ (void)setLibraryServerDisabled:(_Bool)arg1;
+ (_Bool)isLibraryServerDisabled;
+ (void)endDiscoveringMediaLibraries;
+ (void)beginDiscoveringMediaLibraries;
+ (_Bool)supportsSecureCoding;
+ (id)deviceMediaLibrary;
+ (void)setDefaultMediaLibrary:(id)arg1;
+ (id)defaultMediaLibrary;
+ (void)initialize;
- (void).cxx_destruct;
- (_Bool)companionDeviceActiveStoreAccountIsDynamiteEligible;
- (id)completeMyCollectionArtworkDataSource;
- (id)artworkDataSource;
- (id)libraryDataProvider;
- (id)_initWithLibraryDataProvider:(id)arg1;
- (void)_stopConnectionProgressDisplayLink;
- (void)_removeConnectionAssertion:(id)arg1;
- (void)_connectionProgressDisplayLinkCallback:(id)arg1;
- (id)_collectionsForQueryCriteria:(id)arg1;
- (void)setLibraryFilterPredicates;
- (long long)cloudFilteringType;
- (void)setCloudFilteringType:(long long)arg1;
- (void)_clearPendingDisconnection;
- (id)_collectionPersistentIdentifiersForQueryCriteria:(id)arg1;
- (id)_itemPersistentIdentifiersForQueryCriteria:(id)arg1;
- (unsigned long long)_countOfCollectionsForQueryCriteria:(id)arg1;
- (unsigned long long)_countOfItemsForQueryCriteria:(id)arg1;
- (_Bool)_hasCollectionsForQueryCriteria:(id)arg1;
- (_Bool)_hasItemsForQueryCriteria:(id)arg1;
- (id)_getCachedValueForQueryCritiera:(id)arg1 valueCriteriaCache:(id)arg2 entitiesForCriteriaCache:(id)arg3 didLoadBlocksByQueryCriteria:(id)arg4 valueLoadedFromEntitiesArrayBlock:(CDUnknownBlockType)arg5 loadValueFromDataProviderBlock:(CDUnknownBlockType)arg6;
- (id)_itemsForQueryCriteria:(id)arg1;
- (_Bool)collectionExistsWithStoreID:(long long)arg1 groupingType:(long long)arg2 existentPID:(unsigned long long *)arg3;
- (_Bool)collectionExistsWithName:(id)arg1 groupingType:(long long)arg2 existentPID:(unsigned long long *)arg3;
- (_Bool)collectionExistsContainedWithinPersistentIDs:(const unsigned long long *)arg1 count:(unsigned long long)arg2 groupingType:(long long)arg3 existentPID:(unsigned long long *)arg4;
- (_Bool)collectionExistsWithPersistentID:(unsigned long long)arg1 groupingType:(long long)arg2;
- (_Bool)playlistExistsWithPersistentID:(unsigned long long)arg1;
- (_Bool)itemExistsWithPersistentID:(unsigned long long)arg1;
- (unsigned long long)_persistentIDForAssetURL:(id)arg1;
- (id)pathForAssetURL:(id)arg1;
- (_Bool)isValidAssetURL:(id)arg1;
- (id)entityWithMultiverseIdentifier:(id)arg1;
- (id)multiverseIdentifierForCollectionWithPersistentID:(long long)arg1 groupingType:(long long)arg2;
- (id)multiverseIdentifierForTrackWithPersistentID:(long long)arg1;
- (_Bool)setValue:(id)arg1 forDatabaseProperty:(id)arg2;
- (id)valueForDatabaseProperty:(id)arg1;
- (id)entityCache;
- (id)syncValidity;
- (float)connectionProgress;
- (_Bool)isCurrentThreadInTransaction;
- (void)performReadTransactionWithBlock:(CDUnknownBlockType)arg1;
- (_Bool)performTransactionWithBlock:(CDUnknownBlockType)arg1;
- (id)connectionAssertionWithIdentifier:(id)arg1;
- (void)connectWithAuthenticationData:(id)arg1 completionBlock:(CDUnknownBlockType)arg2;
- (_Bool)requiresAuthentication;
- (id)preferredSubtitleLanguages;
- (id)preferredAudioLanguages;
- (_Bool)isGeniusEnabled;
- (void)populateLocationPropertiesOfItem:(id)arg1 withPath:(id)arg2;
- (void)downloadAsset:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (_Bool)removePlaylist:(id)arg1;
- (_Bool)removeItems:(id)arg1;
- (_Bool)removeItems:(id)arg1 hideFromPurchaseHistory:(_Bool)arg2;
- (unsigned long long)syncPlaylistId;
- (void)setSyncPlaylistId:(unsigned long long)arg1;
- (id)addPlaylistWithName:(id)arg1 activeGeniusPlaylist:(_Bool)arg2;
- (id)addPlaylistWithName:(id)arg1;
- (id)playlistWithPersistentID:(unsigned long long)arg1;
- (id)localizedSectionIndexTitles;
- (id)localizedSectionHeaderForSectionIndex:(unsigned long long)arg1;
- (id)newPlaylistWithPersistentID:(unsigned long long)arg1;
- (id)itemWithStoreID:(unsigned long long)arg1;
- (id)itemWithPersistentID:(unsigned long long)arg1 verifyExistence:(_Bool)arg2;
- (id)itemWithPersistentID:(unsigned long long)arg1;
- (_Bool)hasVideoPodcasts;
- (_Bool)hasHomeVideos;
- (_Bool)hasTVShows;
- (_Bool)hasMovieRentals;
- (_Bool)hasVideoITunesUContent;
- (_Bool)hasAudioITunesUContent;
- (_Bool)hasITunesUContent;
- (_Bool)hasCompilations;
- (_Bool)hasMovies;
- (_Bool)hasAudibleAudioBooks;
- (_Bool)hasMusicVideos;
- (_Bool)hasVideos;
- (_Bool)_checkHasContent:(_Bool *)arg1 determined:(_Bool *)arg2 mediaType:(unsigned long long)arg3 queryHasEntitiesBlock:(CDUnknownBlockType)arg4;
- (_Bool)_checkHasContent:(_Bool *)arg1 determined:(_Bool *)arg2 queryHasEntitiesBlock:(CDUnknownBlockType)arg3;
- (_Bool)hasAudiobooks;
- (_Bool)hasComposers;
- (_Bool)hasGenres;
- (_Bool)hasUbiquitousBookmarkableItems;
- (_Bool)hasPodcasts;
- (_Bool)hasSongs;
- (_Bool)hasAlbums;
- (_Bool)hasArtists;
- (_Bool)hasPlaylists;
- (_Bool)hasGeniusMixes;
- (_Bool)hasMedia;
- (_Bool)hasMediaOfType:(unsigned long long)arg1;
- (_Bool)libraryHasBeenModifiedWithToken:(id)arg1;
- (id)modificationToken;
- (id)databasePath;
- (id)uniqueIdentifier;
@property(nonatomic) long long removalReason;
- (id)name;
- (void)removeLibraryFilterPredicate:(id)arg1;
- (void)addLibraryFilterPredicate:(id)arg1;
- (id)additionalLibraryFilterPredicates;
- (long long)status;
- (_Bool)writable;
- (long long)playlistGeneration;
- (unsigned long long)syncGenerationID;
- (unsigned long long)currentEntityRevision;
@property(readonly, nonatomic) NSDate *lastModifiedDate;
- (void)endGeneratingLibraryChangeNotifications;
- (void)disconnect;
- (void)connectWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)beginGeneratingLibraryChangeNotifications;
- (void)_displayValuesDidChangeNotification:(id)arg1;
- (void)_didReceiveMemoryWarning:(id)arg1;
- (void)_canShowCloudTracksDidChangeNotification:(id)arg1;
- (void)_reloadLibraryForInvisiblePropertyChangeWithNotificationInfo:(id)arg1;
- (void)_reloadLibraryForDynamicPropertyChangeWithNotificationInfo:(id)arg1;
- (void)_reloadLibraryForContentsChangeWithNotificationInfo:(id)arg1;
- (void)_reloadLibraryForRestrictionsChange;
- (void)_scheduleLibraryChangeNotificationPostingBlock:(CDUnknownBlockType)arg1;
- (void)_clearCachedContentDataAndResultSets:(_Bool)arg1;
- (void)_clearCachedEntitiesIncludingResultSets:(_Bool)arg1;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (id)description;
- (void)dealloc;
- (id)init;
@property(readonly, nonatomic) NSURL *protectedContentSupportStorageURL;
- (void)enumerateEntityChangesAfterSyncAnchor:(id)arg1 usingBlock:(CDUnknownBlockType)arg2;
- (void)enumerateEntityChangesAfterSyncAnchor:(id)arg1 maximumRevisionType:(int)arg2 usingBlock:(CDUnknownBlockType)arg3;
@property(readonly, nonatomic) NSString *_syncValidity;
- (id)errorResolverForMediaItem:(id)arg1;

@end

@interface MPMediaLibraryConnectionAssertion : NSObject
{
    MPMediaLibrary *_library;
    NSString *_identifier;
}

@property(readonly, nonatomic) NSString *identifier; // @synthesize identifier=_identifier;
- (void).cxx_destruct;
- (id)description;
- (void)dealloc;
- (id)_initWithMediaLibrary:(id)arg1 identifier:(id)arg2;

@end

@interface _MPMediaLibraryEntityChange : NSObject
{
    int _deletionType;
    MPMediaEntity *_entity;
    NSString *_anchor;
}

@property(readonly, nonatomic) int deletionType; // @synthesize deletionType=_deletionType;
@property(readonly, copy, nonatomic) NSString *anchor; // @synthesize anchor=_anchor;
@property(readonly, nonatomic) MPMediaEntity *entity; // @synthesize entity=_entity;
- (void).cxx_destruct;
- (id)initWithEntity:(id)arg1 anchor:(id)arg2 deletionType:(int)arg3;

@end

@interface MPServerObject : NSObject
{
    int _clientPID;
    CDStruct_6ad76789 *_clientAuditToken;
}

+ (id)_center;
@property(readonly, nonatomic) CDStruct_6ad76789 *clientAuditToken; // @synthesize clientAuditToken=_clientAuditToken;
@property(readonly, nonatomic) int clientPID; // @synthesize clientPID=_clientPID;
- (id)_forwardMessage:(id)arg1 userInfo:(id)arg2 auditToken:(CDStruct_6ad76789 *)arg3;
- (void)_registerNotificationsForSelectors;
- (id)init;

@end

@interface MPServerObjectProxy : NSObject
{
    unsigned int _didPrepareForRemoteSelectorInvocation:1;
    unsigned int _lastPrepareForRemoteSelectorInvocationTimedOut:1;
    double _lastPrepareAttemptTime;
}

+ (id)_center;
- (id)_performRemoteSelectorAndReceiveReply:(SEL)arg1 userInfo:(id)arg2 timeout:(double)arg3;
- (_Bool)_performRemoteSelector:(SEL)arg1 userInfo:(id)arg2 timeout:(double)arg3;
- (void)_serverConnectionDied;
- (void)_messagingCenterDied:(id)arg1;
- (void)serverConnectionDied;
- (void)didPrepareForRemoteSelectorInvocation;
- (_Bool)prepareForRemoteSelectorInvocationWithTimeout:(double *)arg1;
- (_Bool)prepareForRemoteSelectorInvocation;
- (void)forwardInvocation:(id)arg1;
- (void)dealloc;
- (id)init;

@end

@interface MPMediaPickerController : UIViewController
{
    _UIAsyncInvocation *_cancelRequest;
    id _modalContext;
    MPRemoteMediaPickerController *_remoteViewController;
    _Bool _allowsPickingMultipleItems;
    _Bool _showsCloudItems;
    unsigned long long _mediaTypes;
    id <MPMediaPickerControllerDelegate> _delegate;
    NSString *_prompt;
}

+ (void)preheatMediaPicker;
@property(copy, nonatomic) NSString *prompt; // @synthesize prompt=_prompt;
@property(nonatomic) __weak id <MPMediaPickerControllerDelegate> delegate; // @synthesize delegate=_delegate;
@property(readonly, nonatomic) unsigned long long mediaTypes; // @synthesize mediaTypes=_mediaTypes;
- (void).cxx_destruct;
- (id)_serviceViewControllerProxy;
- (void)_sendSettingsToService;
- (void)_resetRemoteViewController;
- (void)_requestRemoteViewController;
- (void)_forceDismissal;
- (void)_pickerDidPickItems:(id)arg1;
- (void)_pickerDidCancel;
- (_Bool)_hasAddedRemoteView;
- (void)_addRemoteView;
@property(nonatomic) _Bool showsCloudItems;
@property(nonatomic) _Bool allowsPickingMultipleItems;
- (void)remoteMediaPickerDidCancel;
- (void)remoteMediaPickerDidPickMediaItems:(id)arg1;
- (void)viewWillAppear:(_Bool)arg1;
- (void)viewDidAppear:(_Bool)arg1;
- (void)loadView;
- (void)willMoveToParentViewController:(id)arg1;
- (void)dealloc;
- (id)initWithMediaTypes:(unsigned long long)arg1;
- (id)init;

@end

@interface MPMediaItemCollection : MPMediaEntity
{
    unsigned long long _containedMediaTypes;
    _Bool _initializedContainedMediaTypes;
    NSArray *_items;
    unsigned long long _itemsCount;
    MPMediaQuery *_itemsQuery;
    MPMediaItem *_representativeItem;
}

+ (id)representativePersistentIDPropertyForGroupingType:(long long)arg1;
+ (id)sortTitlePropertyForGroupingType:(long long)arg1;
+ (id)titlePropertyForGroupingType:(long long)arg1;
+ (_Bool)supportsSecureCoding;
+ (id)collectionWithItems:(id)arg1;
- (void).cxx_destruct;
- (id)multiverseIdentifier;
@property(readonly, nonatomic) long long groupingType;
@property(readonly, nonatomic) unsigned long long mediaTypes;
@property(readonly, nonatomic) unsigned long long count;
@property(readonly, nonatomic) MPMediaItem *representativeItem;
@property(readonly, nonatomic) NSArray *items;
- (id)itemsQuery;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)init;
- (id)initWithMultiverseIdentifier:(id)arg1;
- (id)initWithItemsQuery:(id)arg1;
- (id)initWithItems:(id)arg1;
- (id)__artistArtworkCatalog;
- (id)__albumArtistArtworkCatalog;
- (id)artworkCatalog;
- (_Bool)MPSD_hasDownloadingItem;
- (_Bool)MPSD_hasDownloadableItem;

@end

@interface MPDetailSlider : UISlider <MPDetailedScrubbing, MPDetailScrubControllerDelegate>
{
    UILabel *_currentTimeInverseLabel;
    UILabel *_currentTimeLabel;
    MPDetailScrubController *_scrubController;
    _Bool _allowsScrubbing;
    _Bool _autoscrubActive;
    NSTimer *_autoscrubTimer;
    _Bool _canCommit;
    double _currentTime;
    UIView *_downloadingTrackOverlay;
    UIImageView *_glowDetailScrubImageView;
    _Bool _isTracking;
    double _maxTrackWidth;
    struct CGPoint _previousLocationInView;
    long long _style;
    UIImageView *_thumbImageView;
    double _trackInset;
    id <MPDetailSliderDelegate> _delegate;
    double _detailScrubbingVerticalRange;
    double _duration;
    double _availableDuration;
    long long _timeLabelStyle;
    double _minTimeLabelWidth;
}

+ (Class)labelClass;
@property(nonatomic) double minTimeLabelWidth; // @synthesize minTimeLabelWidth=_minTimeLabelWidth;
@property(nonatomic) long long timeLabelStyle; // @synthesize timeLabelStyle=_timeLabelStyle;
@property(nonatomic) double availableDuration; // @synthesize availableDuration=_availableDuration;
@property(nonatomic) double duration; // @synthesize duration=_duration;
@property(nonatomic) double detailScrubbingVerticalRange; // @synthesize detailScrubbingVerticalRange=_detailScrubbingVerticalRange;
@property(nonatomic) _Bool allowsScrubbing; // @synthesize allowsScrubbing=_allowsScrubbing;
@property(nonatomic) __weak id <MPDetailSliderDelegate> delegate; // @synthesize delegate=_delegate;
- (void).cxx_destruct;
- (void)_updateForAvailableDuraton;
- (void)_commitValue;
- (void)_resetScrubInfo;
- (id)_stringForInverseCurrentTime:(double)arg1;
- (id)_stringForCurrentTime:(double)arg1;
- (id)_stringForTime:(double)arg1;
- (void)_updateTimeDisplayForTime:(double)arg1 force:(_Bool)arg2;
- (void)_updateTimeDisplayForTime:(double)arg1;
- (void)_updateTrackInset;
- (void)_setupControlsForStyle;
- (id)_colorSliceImageWithColor:(id)arg1 height:(double)arg2;
- (id)_modernThumbImageWithColor:(id)arg1 height:(double)arg2 includeShadow:(_Bool)arg3;
- (id)timeLabelTextColorForStyle:(long long)arg1;
- (id)timeLabelFontForStyle:(long long)arg1;
@property(nonatomic) _Bool allowsDetailScrubbing;
@property(readonly, nonatomic) NSString *localizedScrubSpeedText;
- (void)cancelTracking;
@property(readonly, nonatomic) _Bool detailScrubbingAvailableForCurrentDuration;
- (_Bool)isTracking;
- (void)cancelTrackingWithEvent:(id)arg1;
- (void)endTrackingWithTouch:(id)arg1 withEvent:(id)arg2;
- (_Bool)continueTrackingWithTouch:(id)arg1 withEvent:(id)arg2;
- (void)_autoscrubTick:(id)arg1;
- (_Bool)beginTrackingWithTouch:(id)arg1 withEvent:(id)arg2;
- (void)detailScrubController:(id)arg1 didChangeValue:(float)arg2;
- (void)detailScrubController:(id)arg1 didChangeScrubSpeed:(long long)arg2;
- (struct CGRect)thumbHitRect;
- (struct UIEdgeInsets)_thumbHitEdgeInsets;
- (void)_setValueWhileTracking:(float)arg1 duration:(double)arg2;
- (void)setValue:(float)arg1 duration:(double)arg2;
- (void)setValue:(float)arg1 animated:(_Bool)arg2;
- (struct CGRect)thumbRectForBounds:(struct CGRect)arg1 trackRect:(struct CGRect)arg2 value:(float)arg3;
- (struct CGRect)trackRectForBounds:(struct CGRect)arg1;
- (id)currentThumbImage;
- (id)createThumbView;
- (id)viewForBaselineLayout;
- (void)tintColorDidChange;
- (void)setFrame:(struct CGRect)arg1;
- (void)setBounds:(struct CGRect)arg1;
- (void)layoutSubviews;
- (void)dealloc;
- (id)initWithFrame:(struct CGRect)arg1;
- (id)initWithFrame:(struct CGRect)arg1 style:(long long)arg2;
- (id)initWithFrame:(struct CGRect)arg1 style:(long long)arg2 maxTrackWidth:(double)arg3;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface MPPlayableContentManager : NSObject
{
    NSMutableSet *_mutatedContentItems;
    NSMutableSet *_contentItemIdentifiersSentToMediaRemote;
    NSObject<OS_dispatch_queue> *_serialQueue;
    NSOperationQueue *_artworkUpdateQueue;
    _Bool _coalescingUpdates;
    id <MPPlayableContentDataSource> _dataSource;
    id <MPPlayableContentDelegate> _delegate;
}

+ (id)sharedContentManager;
@property(nonatomic) __weak id <MPPlayableContentDelegate> delegate; // @synthesize delegate=_delegate;
@property(nonatomic) __weak id <MPPlayableContentDataSource> dataSource; // @synthesize dataSource=_dataSource;
- (void).cxx_destruct;
- (void)_markContentItemsAsSentToMediaRemote:(id)arg1;
- (_Bool)_onQueueContentItemWasSentToMediaRemote:(id)arg1;
- (_Bool)_contentItemWasSentToMediaRemote:(id)arg1;
- (void)_handlePlaybackInitializationCompletedWithContext:(id)arg1 error:(id)arg2;
- (void)_handleBeginLoadingCompletedAtIndexPath:(id)arg1 withError:(id)arg2;
- (void)_pushContentItemsUpdate;
- (void)_tearDownNotifications;
- (void)_setupNotifications;
- (void)_tearDownMediaRemoteEndpoint;
- (void)_setupMediaRemoteEndpoint;
- (void)_enqueueArtworkUpdate:(id)arg1 forContentItem:(id)arg2 withCompletion:(CDUnknownBlockType)arg3;
- (void)_contentItemChangedNotification:(id)arg1;
- (void)endUpdates;
- (void)beginUpdates;
- (void)reloadData;
- (void)dealloc;
- (id)init;
- (id)_init;

@end

@interface MPPlayableContentCallbackContext : NSObject
{
    _Bool _serviced;
    NSIndexPath *_indexPath;
}

@property(nonatomic) _Bool serviced; // @synthesize serviced=_serviced;
@property(readonly, nonatomic) NSIndexPath *indexPath; // @synthesize indexPath=_indexPath;
- (void).cxx_destruct;
- (id)initWithIndexPath:(id)arg1;

@end

@interface MPAudioRouteCell : _UIAlertTableViewCell
{
    UIImageView *_pickedImage;
}

- (void).cxx_destruct;
- (void)setPicked:(_Bool)arg1;
- (void)layoutSubviews;
- (id)initWithRouteName:(id)arg1 isPicked:(_Bool)arg2;

@end

@interface MPAudioRoutingPicker : UIAlertView <MPAVRoutingControllerDelegate, UITableViewDataSource, UITableViewDelegate>
{
    MPAVRoutingController *_routingController;
    _Bool _ignoringInteractionEvents;
    NSArray *_routes;
}

- (void).cxx_destruct;
- (_Bool)_pickRouteAtIndex:(unsigned long long)arg1 withPassword:(id)arg2;
- (_Bool)requiresPortraitOrientation;
- (void)willMoveToSuperview:(id)arg1;
- (void)tableView:(id)arg1 didSelectRowAtIndexPath:(id)arg2;
- (id)tableView:(id)arg1 willSelectRowAtIndexPath:(id)arg2;
- (id)tableView:(id)arg1 cellForRowAtIndexPath:(id)arg2;
- (long long)tableView:(id)arg1 numberOfRowsInSection:(long long)arg2;
- (void)routingControllerAvailableRoutesDidChange:(id)arg1;
- (void)dealloc;
- (void)setAVPlayer:(id)arg1;
- (id)initWithAVPlayer:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface MPAudioDeviceController : NSObject
{
    NSString *_category;
    id _delegate;
    _Bool _determiningPickableRoutes;
    _Bool _fakeRouteAvailable;
    NSArray *_pickableRoutes;
    NSDictionary *_pickedRoute;
    _Bool _pickedRouteHasVolumeControl;
    _Bool _pickedRouteHasVolumeControlIsValid;
    NSMutableArray *_pickableRoutesCompletionHandlers;
    _Bool _scheduledSendAudioRoutesDidChange;
}

+ (id)_routeDiscoveryModeStack;
+ (void)setRouteDiscoveryEnabled:(_Bool)arg1;
+ (_Bool)routeDiscoveryEnabled;
+ (void)_internalSetSystemRouteDiscoveryMode:(long long)arg1;
+ (void)_internalPushRouteDiscoveryMode:(long long)arg1;
+ (void)restoreRouteDiscoveryMode;
+ (void)pushRouteDiscoveryMode:(long long)arg1;
+ (void)setRouteDiscoveryMode:(long long)arg1;
+ (long long)routeDiscoveryMode;
@property(nonatomic) __weak id delegate; // @synthesize delegate=_delegate;
- (void).cxx_destruct;
- (void)_sendFakeRouteChange;
- (void)_scheduleSendDelegateAudioRoutesChanged;
- (void)_unregisterNotifications;
- (void)_registerNotifications;
- (_Bool)_routeIsWireless:(id)arg1;
- (_Bool)_routeIsReceiver:(id)arg1;
- (_Bool)_routeIsHandset:(id)arg1;
- (_Bool)_routeIsHeadphones:(id)arg1;
- (_Bool)_routeIsDisplayPort:(id)arg1;
- (_Bool)_routeIsSpeaker:(id)arg1;
- (id)_pickedRoute;
- (id)_pickableRoutes;
- (void)_mediaServerDiedNotification:(id)arg1;
- (void)_routeDiscoveryDidEndNotification:(id)arg1;
- (void)_portStatusDidChangeNotification:(id)arg1;
- (void)_pickableRoutesChangedNotification:(id)arg1;
- (void)_activeAudioRouteDidChange:(id)arg1;
- (void)alertView:(id)arg1 didDismissWithButtonIndex:(long long)arg2;
- (void)logCurrentRoutes;
- (_Bool)isPickedRouteDistinctFromRoute:(id)arg1;
- (_Bool)volumeControlIsAvailable;
- (_Bool)airtunesRouteIsPicked;
- (_Bool)wirelessRouteIsPicked;
- (_Bool)receiverRouteIsPicked;
- (_Bool)handsetRouteIsPicked;
- (_Bool)speakerRouteIsPicked;
- (id)pickedRouteDescription;
- (id)nameOfPickedRoute;
- (long long)indexOfPickedRoute;
- (void)restorePickedRoute;
- (_Bool)pickBestDeviceRoute;
- (_Bool)pickHandsetRoute;
- (_Bool)pickSpeakerRoute;
- (_Bool)pickRoute:(id)arg1 withPassword:(id)arg2;
- (_Bool)pickRoute:(id)arg1;
- (_Bool)pickRouteAtIndex:(unsigned long long)arg1 withPassword:(id)arg2;
- (_Bool)pickRouteAtIndex:(unsigned long long)arg1;
@property(nonatomic) _Bool routeDiscoveryEnabled;
- (void)determinePickableRoutesWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)setCategory:(id)arg1;
- (void)clearCachedRoutes;
- (long long)indexOfRouteWithName:(id)arg1;
- (id)routeTypeAtIndex:(unsigned long long)arg1;
- (_Bool)routeRequiresPasswordAtIndex:(unsigned long long)arg1;
- (id)routeNameAtIndex:(unsigned long long)arg1 isPicked:(_Bool *)arg2;
- (id)routeDescriptionAtIndex:(unsigned long long)arg1;
- (_Bool)routeOtherThanHandsetAndSpeakerIsAvailable;
- (_Bool)routeOtherThanHandsetIsAvailable;
- (unsigned long long)numberOfAudioRoutes;
- (void)dealloc;
- (id)init;

@end

@interface MPMusicPlayerControllerServer : NSObject
{
    MPMusicPlayerControllerServerInternal *_internal;
}

+ (id)sharedInstance;
+ (_Bool)isMusicPlayerControllerServerRunning;
+ (void)startMusicPlayerControllerServerWithDelegate:(id)arg1;
- (void).cxx_destruct;
@property(readonly, nonatomic) MPAVController *player;
- (id)methodSignatureForSelector:(SEL)arg1;
- (void)forwardInvocation:(id)arg1;
- (void)setDelegate:(id)arg1;
- (id)init;
- (void)_runMigServer;

@end

@interface MPMusicPlayerControllerServerInternal : MPServerObject <MPMusicPlayerController>
{
    id <MPMusicPlayerControllerServerDelegate> _delegate;
    MPMusicPlayerControllerServer *_musicPlayerServer;
    int _activeClientPID;
    NSMutableArray *_clientPorts;
    NSMutableDictionary *_clientPortsForPIDs;
    NSMutableDictionary *_clientStateForPIDs;
    MPVideoViewController *_videoViewController;
    unsigned int _queuePrepared:1;
}

+ (_Bool)_canSeedGeniusWithItem:(id)arg1;
- (void).cxx_destruct;
- (void)_updateVideoView;
- (unsigned long long)_numberOfItems;
- (void)_tearDownVideoView;
- (void)_endPlayback;
- (void)_endPlaybackForClientIfNecessary:(int)arg1;
- (void)_prepareQueueIfNecessary;
- (void)_setQueueWithQuery:(id)arg1;
- (void)_setQueuePrepared:(_Bool)arg1;
- (id)_avControllerForClientPID:(int)arg1;
- (id)_avController;
- (_Bool)_currentClientPIDHasPermissionToPlay;
- (_Bool)_clientPIDHasPermissionToPlay:(int)arg1;
- (id)_clientStateForPID:(int)arg1;
- (id)_clientState;
- (void)_clientPortInvalidated:(id)arg1;
- (void)_registerClientPort:(unsigned int)arg1 forProcessID:(int)arg2 hasAudioBackgroundMode:(_Bool)arg3;
- (void)_tvOutCapabilityDidChangeNotification:(id)arg1;
- (void)_itemPlaybackDidEndNotification:(id)arg1;
- (void)_itemDidChangeNotification:(id)arg1;
- (void)_playbackStateDidChangeNotification:(id)arg1;
- (void)_applicationStateChangedNotification:(id)arg1;
- (void)_clientPortInvalidatedNotification:(id)arg1;
- (void)setQueueWithRadioStation:(id)arg1;
- (void)setQueueWithGeniusMixPlaylist:(id)arg1;
- (void)setAllowsBackgroundVideo:(id)arg1;
- (id)allowsBackgroundVideo;
- (void)setUseApplicationSpecificQueue:(id)arg1;
- (_Bool)useApplicationSpecificQueue;
- (void)registerForServerDiedNotifications;
- (id)serverIsAlive;
- (void)prepareQueueForPlayback;
- (void)setCurrentChapterIndex:(id)arg1;
- (id)currentChapterIndex;
- (void)skipToPreviousChapter;
- (void)skipToNextChapter;
- (id)skipInDirection:(id)arg1;
- (id)isNowPlayingItemFromGeniusMix;
- (id)unshuffledIndexOfNowPlayingItem;
- (id)indexOfNowPlayingItem;
- (id)playbackSpeed;
- (void)setPlaybackSpeed:(id)arg1;
- (void)pauseWithFadeoutDuration:(id)arg1;
- (void)playItem:(id)arg1;
- (id)nowPlayingItemAtIndex:(id)arg1;
- (id)queueAsRadioStation;
- (id)queueAsQuery;
- (void)setQueueWithQuery:(id)arg1 firstItem:(id)arg2;
- (id)setQueueWithSeedItems:(id)arg1;
- (id)isGeniusAvailableForSeedItems:(id)arg1;
- (id)isGeniusAvailable;
- (void)skipToBeginningOrPreviousItem;
- (void)skipToPreviousItem;
- (void)skipToBeginning;
- (void)skipToNextItem;
- (void)endSeeking;
- (void)beginSeekingBackward;
- (void)beginSeekingForward;
- (void)setRepeatMode:(id)arg1;
- (id)repeatMode;
- (void)setShuffleMode:(id)arg1;
- (id)shuffleMode;
- (id)numberOfItems;
- (id)playbackState;
- (void)setCurrentPlaybackTime:(id)arg1;
- (id)currentPlaybackTime;
- (void)setCurrentPlaybackRate:(id)arg1;
- (id)currentPlaybackRate;
- (void)stop;
- (void)pause;
- (void)shuffle;
- (void)prepareToPlay;
- (void)play;
- (void)setQueueWithItemCollection:(id)arg1;
- (void)setQueueWithQuery:(id)arg1;
- (id)nowPlayingItem;
- (void)setNowPlayingItem:(id)arg1;
- (void)dealloc;
- (id)init;

@end

@interface MPMusicPlayerClientState : NSObject
{
    _Bool _allowsBackgroundVideo;
    int _backgroundPlaybackAccess;
    MPMediaItem *_firstItem;
    MPMediaPlaylist *_geniusMixPlaylist;
    _Bool _hasAudioBackgroundMode;
    MPMediaQuery *_query;
    MPRadioStation *_radioStation;
    long long _repeatMode;
    _Bool _seeking;
    long long _shuffleMode;
    _Bool _useApplicationSpecificQueue;
    _Bool _videoPlaybackEnabled;
}

@property(retain, nonatomic) MPRadioStation *radioStation; // @synthesize radioStation=_radioStation;
@property(nonatomic) _Bool videoPlaybackEnabled; // @synthesize videoPlaybackEnabled=_videoPlaybackEnabled;
@property(nonatomic) _Bool useApplicationSpecificQueue; // @synthesize useApplicationSpecificQueue=_useApplicationSpecificQueue;
@property(nonatomic) long long shuffleMode; // @synthesize shuffleMode=_shuffleMode;
@property(nonatomic) _Bool seeking; // @synthesize seeking=_seeking;
@property(nonatomic) long long repeatMode; // @synthesize repeatMode=_repeatMode;
@property(retain, nonatomic) MPMediaQuery *query; // @synthesize query=_query;
@property(nonatomic) _Bool hasAudioBackgroundMode; // @synthesize hasAudioBackgroundMode=_hasAudioBackgroundMode;
@property(retain, nonatomic) MPMediaPlaylist *geniusMixPlaylist; // @synthesize geniusMixPlaylist=_geniusMixPlaylist;
@property(retain, nonatomic) MPMediaItem *firstItem; // @synthesize firstItem=_firstItem;
@property(nonatomic) int backgroundPlaybackAccess; // @synthesize backgroundPlaybackAccess=_backgroundPlaybackAccess;
@property(nonatomic) _Bool allowsBackgroundVideo; // @synthesize allowsBackgroundVideo=_allowsBackgroundVideo;
- (void).cxx_destruct;

@end

@interface MPAVRoutingViewController : UIViewController <MPAVRoutingControllerDelegate, MPAVRoutingTableViewCellDelegate, UITableViewDataSource, UITableViewDelegate>
{
    UITableView *_tableView;
    NSArray *_cachedRoutes;
    MPWeakTimer *_updateTimer;
    MPAVRoutingController *_routingController;
    UIColor *_tableCellsBackgroundColor;
    UIColor *_tableCellsContentColor;
    int _airPlayPasswordAlertDidAppearToken;
    int _airPlayPasswordAlertDidCancelToken;
    _Bool _airPlayPasswordAlertDidAppearTokenIsValid;
    _Bool _cachedShowAirPlayDebugButton;
    _Bool _hasCachedAirPlayDebugButtonStatus;
    _Bool _needsDisplayedRoutesUpdate;
    _Bool _allowMirroring;
    unsigned long long _style;
    id <MPAVRoutingViewControllerDelegate> _delegate;
    unsigned long long _avItemType;
}

@property(nonatomic) _Bool allowMirroring; // @synthesize allowMirroring=_allowMirroring;
@property(nonatomic, setter=setAVItemType:) unsigned long long avItemType; // @synthesize avItemType=_avItemType;
@property(nonatomic) __weak id <MPAVRoutingViewControllerDelegate> delegate; // @synthesize delegate=_delegate;
@property(readonly, nonatomic) unsigned long long style; // @synthesize style=_style;
- (void).cxx_destruct;
- (void)_showAirPlayDebug;
- (_Bool)_shouldShowAirPlayDebugButton;
- (_Bool)_shouldShowMirroringCellForRoute:(id)arg1;
- (void)_pickRoute:(id)arg1;
- (void)_updateDisplayedRoutes;
- (void)_setNeedsDisplayedRoutesUpdate;
- (void)_setupUpdateTimerIfNecessary;
- (unsigned long long)_routeIndexForTableViewIndex:(unsigned long long)arg1;
- (unsigned long long)_tableViewIndexForRouteIndex:(unsigned long long)arg1;
- (unsigned long long)_debugButtonTableViewIndex;
- (id)_routesWhereMirroringIsPreferred;
- (id)_displayedRoutes;
- (void)_serviceWillPresentAuthenticationPromptNotification:(id)arg1;
- (double)_tableViewHeightAccordingToDataSource;
- (void)_setTableCellsContentColor:(id)arg1;
- (void)_setTableCellsBackgroundColor:(id)arg1;
- (id)_tableCellsContentColor;
- (id)_tableCellsBackgroundColor;
- (double)_expandedCellHeight;
- (double)_normalCellHeight;
- (id)_tableView;
- (void)routingCell:(id)arg1 mirroringSwitchValueDidChange:(_Bool)arg2;
- (void)routingControllerAvailableRoutesDidChange:(id)arg1;
- (id)tableView:(id)arg1 titleForFooterInSection:(long long)arg2;
- (double)tableView:(id)arg1 heightForRowAtIndexPath:(id)arg2;
- (void)tableView:(id)arg1 didSelectRowAtIndexPath:(id)arg2;
- (id)tableView:(id)arg1 cellForRowAtIndexPath:(id)arg2;
- (long long)tableView:(id)arg1 numberOfRowsInSection:(long long)arg2;
- (struct CGSize)preferredContentSize;
- (void)viewWillLayoutSubviews;
- (void)viewDidDisappear:(_Bool)arg1;
- (void)viewDidAppear:(_Bool)arg1;
- (void)viewDidLoad;
- (void)dealloc;
- (id)initWithStyle:(unsigned long long)arg1;
- (id)initWithNibName:(id)arg1 bundle:(id)arg2;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface MPInlineTransportControls : MPTransportControls
{
    UILabel *_loadingMovieLabel;
    UIActivityIndicatorView *_loadingMovieIndicator;
}

- (void).cxx_destruct;
- (void)_enableAnimationIfNecessary:(id)arg1;
- (void)_disableAnimationIfNecessary:(id)arg1;
@property(readonly, nonatomic) struct CGRect availableProgressControlAreaFrame;
- (void)layoutSubviews;
- (void)setDisabledParts:(unsigned long long)arg1;
- (id)pauseButtonImage;
- (id)playButtonImage;
- (id)buttonImageForPart:(unsigned long long)arg1;
- (id)newButtonForPart:(unsigned long long)arg1;
- (void)reloadForAdditions:(id)arg1 removals:(id)arg2 animate:(_Bool)arg3;
- (id)initWithFrame:(struct CGRect)arg1;

@end

@interface MPRemoteMediaPickerController : _UIRemoteViewController
{
    MPMediaPickerController *_mediaPickerController;
}

+ (id)serviceViewControllerInterface;
+ (id)exportedInterface;
@property(nonatomic) __weak MPMediaPickerController *mediaPickerController; // @synthesize mediaPickerController=_mediaPickerController;
- (void).cxx_destruct;
- (void)remoteMediaPickerDidCancel;
- (void)remoteMediaPickerDidPickMediaItems:(id)arg1;
- (void)viewServiceDidTerminateWithError:(id)arg1;

@end

@interface MPInlineAudioOverlay : MPPlaybackControlsView
{
    id <MPVideoControllerProtocol> _videoViewController;
    long long _style;
    UIView *_backgroundView;
    MPInlineAudioTransportControls *_transportControls;
    UILabel *_streamingLabel;
    NSString *_playbackErrorDescription;
    UILabel *_playbackErrorDescriptionLabel;
}

@property(nonatomic) __weak id <MPVideoControllerProtocol> videoViewController; // @synthesize videoViewController=_videoViewController;
@property(nonatomic) long long style; // @synthesize style=_style;
@property(copy, nonatomic) NSString *playbackErrorDescription; // @synthesize playbackErrorDescription=_playbackErrorDescription;
- (void).cxx_destruct;
- (struct CGRect)_frameInBackgroundViewForDescriptionLabel:(id)arg1;
- (id)_newDescriptionLabel;
- (void)_updateVisiblePartsForAvailableRoutes;
- (void)setHidden:(_Bool)arg1 animated:(_Bool)arg2 completionBlock:(CDUnknownBlockType)arg3;
- (void)setHidden:(_Bool)arg1 animated:(_Bool)arg2;
- (void)_itemDurationDidChangeNotification:(id)arg1;
- (void)_availableRoutesDidChangeNotification:(id)arg1;
- (void)setPlayer:(id)arg1;
- (unsigned long long)displayablePartsInPartMask:(unsigned long long)arg1;
- (void)reloadView;
- (void)setItem:(id)arg1;
- (void)setCurrentTime:(double)arg1;
- (id)newProgressIndicator;
- (void)layoutSubviews;
- (void)dealloc;
- (id)initWithFrame:(struct CGRect)arg1;

@end

@interface MPInlineAudioTransportControls : MPTransportControls
{
    long long _style;
}

- (struct CGRect)availableProgressControlAreaFrame;
- (void)layoutSubviews;
- (id)hitTest:(struct CGPoint)arg1 withEvent:(id)arg2;
- (id)pauseButtonImage;
- (id)playButtonImage;
- (id)newVolumeSlider;
- (id)buttonImageForPart:(unsigned long long)arg1;
- (void)reloadForAdditions:(id)arg1 removals:(id)arg2 animate:(_Bool)arg3;
- (id)initWithFrame:(struct CGRect)arg1 style:(long long)arg2;

@end

@interface MPMovie : NSObject
{
    MPAVItem *_item;
    NSURL *_url;
    long long _movieSourceType;
    double _startPlaybackTime;
    double _endPlaybackTime;
    _Bool _explicitlySetMovieSourceType;
    _Bool _movieIsUnplayable;
    double _lastKnownDuration;
    struct CGSize _lastKnownNaturalSize;
    unsigned long long _lastKnownType;
}

+ (id)movieWithPlayerItem:(id)arg1 error:(id *)arg2;
+ (id)movieWithAsset:(id)arg1 error:(id *)arg2;
+ (id)movieWithURL:(id)arg1 options:(id)arg2 error:(id *)arg3;
- (void).cxx_destruct;
- (void)_determineMediaType;
- (id)_MPArrayQueueItem;
- (void)_typeAvailableNotification:(id)arg1;
- (void)_naturalSizeAvailableNotification:(id)arg1;
- (void)_durationAvailableNotification:(id)arg1;
@property(nonatomic) double endPlaybackTime;
@property(nonatomic) double startPlaybackTime;
@property(readonly, nonatomic) struct CGSize naturalSize;
@property(readonly, nonatomic) double playableDuration;
@property(readonly, nonatomic) double duration;
@property(nonatomic) long long movieSourceType;
@property(readonly, nonatomic) unsigned long long movieMediaTypes;
@property(readonly, nonatomic) NSURL *url;
@property(readonly, nonatomic) AVPlayerItem *playerItem;
@property(readonly, nonatomic) AVAsset *asset;
- (void)dealloc;
- (void)_sharedInit;
- (id)_initWithURL:(id)arg1 options:(id)arg2 error:(id *)arg3;
- (id)_initWithPlayerItem:(id)arg1 error:(id *)arg2;
- (id)_initWithAsset:(id)arg1 error:(id *)arg2;

@end

@interface MPAbstractNetworkArtworkDataSource : NSObject <NSURLSessionDataDelegate, MPArtworkDataSource>
{
    NSObject<OS_dispatch_queue> *_accessQueue;
    NSCache *_artworkRepresentationCache;
    NSMapTable *_catalogTaskMap;
    NSURLSession *_URLSession;
}

@property(retain, nonatomic) NSURLSession *URLSession; // @synthesize URLSession=_URLSession;
@property(retain, nonatomic) NSMapTable *catalogTaskMap; // @synthesize catalogTaskMap=_catalogTaskMap;
@property(retain, nonatomic) NSCache *artworkRepresentationCache; // @synthesize artworkRepresentationCache=_artworkRepresentationCache;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *accessQueue; // @synthesize accessQueue=_accessQueue;
- (void).cxx_destruct;
- (void)_updateConfigurationForCellularDataRestriction:(id)arg1;
- (id)_existingRepresentativeObjectForArtworkCatalog:(id)arg1 handler:(CDUnknownBlockType)arg2;
- (_Bool)_isRepresentationSize:(struct CGSize)arg1 validForCatalog:(id)arg2;
- (id)_existingRepresentationFromURLCacheForArtworkCatalog:(id)arg1 immediateImageDecompressionAllowed:(_Bool)arg2;
- (id)_artworkRepresentationWithImageFromData:(id)arg1 forURLResponse:(id)arg2 size:(struct CGSize)arg3 immediateImageDecompressionAllowed:(_Bool)arg4;
- (void)cancelLoadingRepresentationForArtworkCatalog:(id)arg1;
- (void)loadRepresentationForArtworkCatalog:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (_Bool)isRepresentation:(id)arg1 bestRepresentationForArtworkCatalog:(id)arg2;
- (id)existingRepresentationForArtworkCatalog:(id)arg1;
- (_Bool)areRepresentationsForCatalog:(id)arg1 visuallyIdenticalToRepresentationsForCatalog:(id)arg2;
- (_Bool)wantsBackgroundImageDecompression;
- (_Bool)shouldLookForLargerRepresentationsWhenBestRepresentationIsUnavailable;
- (id)sortedSupportedSizesForCatalog:(id)arg1;
- (id)cacheKeyForCatalog:(id)arg1 size:(struct CGSize)arg2;
- (id)requestForCatalog:(id)arg1 size:(struct CGSize)arg2;
- (id)supportedSizesForCatalog:(id)arg1;
- (_Bool)areRepresentationsAvailableForCatalog:(id)arg1;
@property(readonly, nonatomic) NSURLSessionConfiguration *URLSessionConfiguration;
- (void)dealloc;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface _MPArtworkDataSourceURLCache : NSURLCache
{
    NSMapTable *_requestSizeMap;
    NSObject<OS_dispatch_queue> *_accessQueue;
}

- (void).cxx_destruct;
- (void)setRepresentationSize:(struct CGSize)arg1 forRequest:(id)arg2;
- (void)storeCachedResponse:(id)arg1 forRequest:(id)arg2;
- (id)init;

@end

@interface MPAbstractAlternateTracksViewController : MPViewController
{
    unsigned long long _selectedTracks[2];
    unsigned long long _previousTracks[2];
}

- (_Bool)_hasSubtitlesGroup;
- (_Bool)_hasAudioGroup;
- (unsigned long long)typeForGroup:(long long)arg1;
- (unsigned long long)indexForGroup:(long long)arg1;
- (id)arrayForGroup:(long long)arg1;
- (unsigned long long)countOfGroups;
- (id)alternateTracks;
- (void)saveChanges;
- (void)removeLoadingUI;
- (void)addLoadingUI;
- (void)reloadData;
- (void)_alternateTypesChangedNotification:(id)arg1;
- (void)dealloc;
- (id)init;

@end

@interface MPPlaybackTitlesView : UIControl
{
    UIView *_contentView;
    NSArray *_labels;
    NSArray *_titles;
    _Bool _showingLoadingUI;
    unsigned long long _marqueeScrollableIndex;
    _Bool _marqueeScrollingActive;
}

@property(nonatomic) _Bool marqueeScrollingActive; // @synthesize marqueeScrollingActive=_marqueeScrollingActive;
@property(nonatomic) unsigned long long marqueeScrollableIndex; // @synthesize marqueeScrollableIndex=_marqueeScrollableIndex;
@property(nonatomic) _Bool showingLoadingUI; // @synthesize showingLoadingUI=_showingLoadingUI;
@property(retain, nonatomic) NSArray *titles; // @synthesize titles=_titles;
- (void).cxx_destruct;
- (void)_tearDownLabels;
- (void)_updateLabelMarqueeScrolling;
- (void)_layoutLabels;
- (void)_layoutLoadingUI;
- (id)_addLabel:(unsigned long long)arg1;
- (id)_addLoadingLabel;
- (void)_applicationDidEnterBackgroundNotification:(id)arg1;
- (void)_applicationDidBecomeActiveNotification:(id)arg1;
@property(readonly, nonatomic) UIView *contentView;
- (void)layoutSubviews;
- (void)dealloc;
- (id)initWithFrame:(struct CGRect)arg1;
- (id)init;

@end

@interface MPAVErrorResolver : NSObject
{
    id <MPAVErrorResolverDelegate> _delegate;
}

@property(nonatomic) __weak id <MPAVErrorResolverDelegate> delegate; // @synthesize delegate=_delegate;
- (void).cxx_destruct;
- (void)sendDidResolveError:(id)arg1 withResolution:(long long)arg2;
- (void)resolveError:(id)arg1;

@end

@interface MPAVDestinationBrowser : NSObject
{
    MPAVRoutingController *_routingController;
    _Bool _scansForDestinationsWhenEnteringForeground;
    _Bool _isScanning;
}

- (void).cxx_destruct;
- (void)_endScanningForDestinationsNotification:(id)arg1;
- (void)_beginScanningForDestinationsNotification:(id)arg1;
@property(nonatomic) _Bool scansForDestinationsWhenEnteringForeground;
- (void)endScanningForDestinations;
- (void)beginScanningForDestinations;
- (void)dealloc;
- (id)init;

@end

@interface MPConcreteMediaItem : MPMediaItem <NSCoding, NSCopying, MPMediaItemArrayPIDEncodableItem, MPCacheableConcreteMediaEntity>
{
    MPMediaLibrary *_library;
    unsigned long long _persistentID;
    MPConcreteMediaEntityPropertiesCache *_propertiesCache;
}

+ (_Bool)supportsSecureCoding;
+ (id)concreteMediaItemWithPersistentID:(unsigned long long)arg1 prefetchedProperties:(id)arg2 library:(id)arg3;
+ (id)concreteMediaItemWithPersistentID:(unsigned long long)arg1;
- (void).cxx_destruct;
- (void)updateDateAccessedToCurrentDateWithWriteCompletionBlock:(CDUnknownBlockType)arg1;
- (_Bool)incrementPlayCountForStopTime:(double)arg1;
- (void)incrementPlayCountForPlayingToEnd;
- (void)incrementSkipCount;
- (void)noteWasPlayedToTime:(double)arg1 skipped:(_Bool)arg2;
- (_Bool)didSkipWithPlayedToTime:(double)arg1;
- (double)nominalHasBeenPlayedThreshold;
- (void)markNominalAmountHasBeenPlayed;
- (void)reallyIncrementPlayCount;
- (void)enumerateValuesForProperties:(id)arg1 usingBlock:(CDUnknownBlockType)arg2;
- (void)setValue:(id)arg1 forProperty:(id)arg2 withCompletionBlock:(CDUnknownBlockType)arg3;
- (_Bool)setValue:(id)arg1 forProperty:(id)arg2;
- (id)valuesForProperties:(id)arg1;
- (id)cachedValueForProperty:(id)arg1;
- (id)valueForProperty:(id)arg1;
- (id)_nonBatchableOrCachedValueForProperty:(id)arg1 needsFetch:(_Bool *)arg2;
- (unsigned long long)persistentID;
- (id)mediaLibrary;
- (_Bool)existsInLibrary;
- (Class)itemArrayCoderPIDDataCodingClass;
- (Class)classForCoder;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
@property(readonly, copy) NSString *description;
- (void)invalidateCachedProperties;
@property(readonly, retain, nonatomic) MPConcreteMediaEntityPropertiesCache *cachedPropertyValues;
- (void)dealloc;
- (id)_initWithPersistentID:(unsigned long long)arg1 library:(id)arg2 propertiesCache:(id)arg3;
- (id)initWithPersistentID:(unsigned long long)arg1 library:(id)arg2;
- (id)initWithPersistentID:(unsigned long long)arg1;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface MPConcreteMediaItemArtwork : MPMediaItemArtwork
{
    MPArtworkCatalog *_catalog;
    struct CGRect _bounds;
}

- (void).cxx_destruct;
@property(readonly, nonatomic) MPArtworkCatalog *artworkCatalog;
- (struct CGRect)bounds;
- (id)imageWithSize:(struct CGSize)arg1;
- (id)initWithArtworkCatalog:(id)arg1;

@end

@interface MPConcreteMediaItemCollection : MPMediaItemCollection <NSCoding, NSCopying, MPCacheableConcreteMediaEntity>
{
    long long _identifier;
    MPMediaQuery *_itemsQuery;
    long long _grouping;
    MPMediaItem *_representativeItem;
    MPConcreteMediaEntityPropertiesCache *_propertiesCache;
}

- (void).cxx_destruct;
- (unsigned long long)count;
- (id)representativeItem;
- (id)items;
- (id)itemsQuery;
- (void)setValue:(id)arg1 forProperty:(id)arg2 withCompletionBlock:(CDUnknownBlockType)arg3;
- (_Bool)setValue:(id)arg1 forProperty:(id)arg2;
- (id)valuesForProperties:(id)arg1;
- (id)valueForProperty:(id)arg1;
- (void)enumerateValuesForProperties:(id)arg1 usingBlock:(CDUnknownBlockType)arg2;
- (unsigned long long)persistentID;
- (id)mediaLibrary;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)invalidateCachedProperties;
@property(readonly, retain, nonatomic) MPConcreteMediaEntityPropertiesCache *cachedPropertyValues;
- (long long)groupingType;
- (void)dealloc;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (id)initWithMultiverseIdentifier:(id)arg1;
- (id)initWithIdentifier:(long long)arg1 itemsQuery:(id)arg2 grouping:(long long)arg3;
- (id)initWithIdentifier:(long long)arg1 valuesForProperties:(id)arg2 itemsQuery:(id)arg3 grouping:(long long)arg4 representativeItemIdentifier:(long long)arg5;
- (id)_initWithIdentifier:(long long)arg1 valuesForProperties:(id)arg2 itemsQuery:(id)arg3 grouping:(long long)arg4 representativeItemIdentifier:(long long)arg5 propertiesCache:(id)arg6;

@end

@interface MPConcreteMediaPlaylist : MPMediaPlaylist <NSCoding, NSCopying>
{
    NSObject<OS_dispatch_queue> *_accessQueue;
    NSMutableDictionary *_properties;
    MPMediaQuery *_itemsQuery;
    void *_clusterPlaylist;
}

- (void).cxx_destruct;
- (void)endGeneratingGeniusClusterItems;
- (id)geniusClusterItemsWithCount:(unsigned long long)arg1 error:(id *)arg2;
- (_Bool)beginGeneratingGeniusClusterItemsWithSeedItems:(id)arg1 error:(id *)arg2;
- (void)populateWithSeedItem:(id)arg1 queue:(id)arg2 completionBlock:(CDUnknownBlockType)arg3;
- (void)populateWithSeedItem:(id)arg1 completionBlock:(CDUnknownBlockType)arg2;
- (void)moveItemFromIndex:(unsigned long long)arg1 toIndex:(unsigned long long)arg2 completionBlock:(CDUnknownBlockType)arg3;
- (void)removeAllItems;
- (void)removeItems:(id)arg1 atFilteredIndexes:(id)arg2 completionBlock:(CDUnknownBlockType)arg3;
- (void)addItems:(id)arg1 completionBlock:(CDUnknownBlockType)arg2;
- (void)addItem:(id)arg1 completionBlock:(CDUnknownBlockType)arg2;
- (void)_updateLibraryForPlaylistEdit:(id)arg1;
- (id)valuesForProperties:(id)arg1;
- (id)valueForProperty:(id)arg1;
- (id)multiverseIdentifier;
- (unsigned long long)mediaTypes;
- (unsigned long long)count;
- (id)representativeItem;
- (id)items;
- (void)setValue:(id)arg1 forProperty:(id)arg2 withCompletionBlock:(CDUnknownBlockType)arg3;
- (_Bool)setValue:(id)arg1 forProperty:(id)arg2;
- (_Bool)existsInLibrary;
- (id)mediaLibrary;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (id)itemsQuery;
- (id)initWithProperties:(id)arg1 itemsQuery:(id)arg2;

@end

@interface MPMediaArray : NSArray
{
}


// Remaining properties
@property(readonly, copy, nonatomic) MPMediaQuerySectionInfo *sectionInfo; // @dynamic sectionInfo;
@end

@interface MPMediaEntityResultSetArray : MPMediaArray <NSCopying>
{
    id <MPMediaLibraryResultSet> _resultSet;
    Class _entityClass;
    MPWeakRef *_libraryWeakRef;
    MPMediaQuerySectionInfo *_sectionInfo;
    NSMutableArray *_entities;
    NSObject<OS_dispatch_queue> *_entitiesQueue;
    MPMediaQueryCriteria *_queryCriteria;
}

- (id)sectionInfo;
- (void).cxx_destruct;
- (void)objectAtIndex:(unsigned long long)arg1 withCompletion:(CDUnknownBlockType)arg2;
- (id)objectAtIndex:(unsigned long long)arg1;
- (unsigned long long)count;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)initWithResultSet:(id)arg1 queryCriteria:(id)arg2 entityType:(unsigned long long)arg3 library:(id)arg4;

@end

@interface MPConcreteMediaEntityPropertiesCache : NSObject
{
    Class _dataProviderEntityClass;
    long long _identifier;
    NSMutableDictionary *_properties;
    NSMutableDictionary *_valuePersistenceBlocks;
    NSObject<OS_dispatch_queue> *_propertiesQueue;
    id <MPMediaLibraryDataProvider> _dataProvider;
}

@property(readonly, nonatomic) long long identifier; // @synthesize identifier=_identifier;
@property(readonly, nonatomic) Class dataProviderEntityClass; // @synthesize dataProviderEntityClass=_dataProviderEntityClass;
@property(readonly, nonatomic) __weak id <MPMediaLibraryDataProvider> dataProvider; // @synthesize dataProvider=_dataProvider;
- (void).cxx_destruct;
- (void)dealloc;
- (void)invalidate;
- (void)delete;
- (void)cacheValue:(id)arg1 forProperty:(id)arg2 persistValueInBackgroundBlock:(CDUnknownBlockType)arg3;
- (void)cachePropertyValues:(id)arg1 forProperties:(id)arg2 persistValueInBackgroundBlock:(CDUnknownBlockType)arg3;
- (void)_onBarrierCacheValues:(id)arg1 persistValueInBackgroundBlock:(CDUnknownBlockType)arg2;
- (id)valueForProperty:(id)arg1 isCached:(_Bool *)arg2;
- (id)initWithLibraryDataProvider:(id)arg1 dataProviderEntityClass:(Class)arg2 identifier:(long long)arg3;

@end

@interface MPMediaLibraryDataProviderML3 : NSObject <MPMediaLibraryDataProviderPrivate>
{
    NSObject<OS_dispatch_queue> *_backgroundTaskQueue;
    unsigned long long _backgroundTask;
    unsigned long long _backgroundTaskCount;
    _Bool _hasScheduledEventPosting;
    int _refreshState;
    NSString *_uniqueIdentifier;
    ML3MusicLibrary *_library;
    MPMediaEntityCache *_entityCache;
    id <MPArtworkDataSource> _artworkDataSource;
}

+ (id)_unadjustedValueForMPProperty:(id)arg1 withDefaultValue:(id)arg2;
+ (id)_unadjustedValueForItemDateWithDefaultValue:(id)arg1;
+ (id)_unadjustedValueForItemTimeWithDefaultValue:(id)arg1;
+ (id)_unadjustedValueForItemPropertyRatingWithDefaultValue:(id)arg1;
+ (id)_unadjustedValueForItemPropertyVolumeAdjustmentWithDefaultValue:(id)arg1;
+ (id)_unadjustedValueForItemPropertyVolumeNormalizationWithDefaultValue:(id)arg1;
@property(readonly, nonatomic) id <MPArtworkDataSource> artworkDataSource; // @synthesize artworkDataSource=_artworkDataSource;
@property(readonly, nonatomic) MPMediaEntityCache *entityCache; // @synthesize entityCache=_entityCache;
@property(retain, nonatomic) ML3MusicLibrary *library; // @synthesize library=_library;
- (void).cxx_destruct;
- (_Bool)_removeEntitiesWithIdentifiers:(long long *)arg1 count:(unsigned long long)arg2 entityClass:(Class)arg3;
- (void)_loadValueForAggregateFunction:(id)arg1 entityClass:(Class)arg2 property:(id)arg3 query:(id)arg4 completionBlock:(CDUnknownBlockType)arg5;
- (void)_loadProperties:(id)arg1 ofEntityWithIdentifier:(long long)arg2 ML3EntityClass:(Class)arg3 completionBlock:(CDUnknownBlockType)arg4;
- (void)_libraryUIDDidChange:(id)arg1;
- (void)_syncGenerationDidChange:(id)arg1;
- (void)_displayValuesDidChange:(id)arg1;
- (void)_invisiblePropertiesDidChange:(id)arg1;
- (void)_dynamicPropertiesDidChange:(id)arg1;
- (void)_libraryContentsDidChange:(id)arg1;
- (_Bool)_dataProviderSupportsEntityChangeTracking;
- (void)_postEvents;
- (void)_coalesceEvents;
- (id)adjustedValueForMPProperty:(id)arg1 ofEntity:(id)arg2 withDefaultValue:(id)arg3;
- (id)_adjustedItemPropertyVerifiedIntegrityOfEntity:(id)arg1 withDefaultValue:(id)arg2;
- (id)_adjustedItemPropertyAssetURLOfEntity:(id)arg1 withDefaultValue:(id)arg2;
- (id)_adjustedItemPropertyEQPresetOfEntity:(id)arg1 withDefaultValue:(id)arg2;
- (id)_adjustedItemPropertyContentRatingOfEntity:(id)arg1 withDefaultValue:(id)arg2;
- (id)_adjustedItemPropertyChaptersOfEntity:(id)arg1 withDefaultValue:(id)arg2;
- (id)_adjustedItemPropertySeasonNameOfEntity:(id)arg1 withDefaultValue:(id)arg2;
- (id)_adjustedItemPropertySeasonNumberOfEntity:(id)arg1 withDefaultValue:(id)arg2;
- (id)_adjustedItemPropertyChapterArtworkTimesOfEntity:(id)arg1 withDefaultValue:(id)arg2;
- (id)_adjustedItemPropertyEpisodeNumberOfEntity:(id)arg1 withDefaultValue:(id)arg2;
- (id)_adjustedItemPropertyMovieInfoOfEntity:(id)arg1 withDefaultValue:(id)arg2;
- (id)_adjustedItemPropertyFilePathOfEntity:(id)arg1 withDefaultValue:(id)arg2;
- (id)_adjustedItemDateOfEntity:(id)arg1 withDefaultValue:(id)arg2;
- (id)_adjustedItemPropertyRatingOfEntity:(id)arg1 withDefaultValue:(id)arg2;
- (id)_adjustedItemPropertyVolumeAdjustmentOfEntity:(id)arg1 withDefaultValue:(id)arg2;
- (id)_adjustedItemPropertyVolumeNormalizationOfEntity:(id)arg1 withDefaultValue:(id)arg2;
- (id)_adjustedItemTimeOfEntity:(id)arg1 withDefaultValue:(id)arg2;
- (id)_adjustedPropertyMediaTypeOfEntity:(id)arg1 withDefaultValue:(id)arg2;
- (id)_adjustedPlaylistPropertySeedItemsOfEntity:(id)arg1 withDefaultValue:(id)arg2;
- (void)performBackgroundTaskWithBlock:(CDUnknownBlockType)arg1;
- (id)ML3SystemFilterPredicatesWithGroupingType:(long long)arg1 cloudTrackFilteringType:(long long)arg2 additionalFilterPredicates:(id)arg3;
- (id)systemFilterPredicatesWithGroupingType:(long long)arg1 cloudTrackFilteringType:(long long)arg2;
- (void)setLibraryContainerFilterPredicatesWithCloudFilteringType:(long long)arg1 additionalFilterPredicates:(id)arg2;
- (void)setLibraryEntityFilterPredicatesWithCloudFilteringType:(long long)arg1 additionalFilterPredicates:(id)arg2;
- (void)populateLocationPropertiesOfItemWithIdentifier:(long long)arg1 withPath:(id)arg2;
- (id)itemResultSetForQueryCriteria:(id)arg1;
- (id)collectionResultSetForQueryCriteria:(id)arg1;
- (void)enumerateEntityChangesAfterSyncAnchor:(id)arg1 maximumRevisionType:(int)arg2 itemBlock:(CDUnknownBlockType)arg3 collectionBlock:(CDUnknownBlockType)arg4;
@property(readonly, nonatomic) NSString *syncValidity;
@property(readonly, nonatomic) NSArray *preferredSubtitleLanguages;
@property(readonly, nonatomic) NSArray *preferredAudioLanguages;
- (void)moveItemFromIndex:(unsigned long long)arg1 toIndex:(unsigned long long)arg2 inPlaylistWithIdentifier:(long long)arg3 completionBlock:(CDUnknownBlockType)arg4;
- (void)removeAllItemsInPlaylistWithIdentifier:(long long)arg1;
- (void)removeItemsWithIdentifiers:(long long *)arg1 atFilteredIndexes:(id)arg2 inPlaylistWithIdentifier:(long long)arg3 completionBlock:(CDUnknownBlockType)arg4;
- (void)addItemsWithIdentifiers:(long long *)arg1 count:(unsigned long long)arg2 toPlaylistWithIdentifier:(long long)arg3 completionBlock:(CDUnknownBlockType)arg4;
- (void)addItemWithIdentifier:(long long)arg1 toPlaylistWithIdentifier:(long long)arg2 completionBlock:(CDUnknownBlockType)arg3;
- (_Bool)removeItemsWithIdentifiers:(long long *)arg1 count:(unsigned long long)arg2 hideFromPurchaseHistory:(_Bool)arg3;
- (_Bool)removePlaylistWithIdentifier:(long long)arg1;
- (long long)addPlaylistWithValuesForProperties:(id)arg1;
- (void)setValue:(id)arg1 forProperty:(id)arg2 ofPlaylistWithIdentifier:(long long)arg3 completionBlock:(CDUnknownBlockType)arg4;
- (void)setValue:(id)arg1 forProperty:(id)arg2 ofCollectionWithIdentifier:(long long)arg3 groupingType:(long long)arg4 completionBlock:(CDUnknownBlockType)arg5;
- (void)setValue:(id)arg1 forProperty:(id)arg2 ofItemWithIdentifier:(long long)arg3 completionBlock:(CDUnknownBlockType)arg4;
- (_Bool)isCurrentThreadInTransaction;
- (void)performReadTransactionWithBlock:(CDUnknownBlockType)arg1;
- (_Bool)performTransactionWithBlock:(CDUnknownBlockType)arg1;
- (void)loadProperties:(id)arg1 ofCollectionWithIdentifier:(long long)arg2 groupingType:(long long)arg3 completionBlock:(CDUnknownBlockType)arg4;
- (void)loadProperties:(id)arg1 ofItemWithIdentifier:(long long)arg2 completionBlock:(CDUnknownBlockType)arg3;
- (void)loadValueForAggregateFunction:(id)arg1 onCollectionsForProperty:(id)arg2 queryCriteria:(id)arg3 completionBlock:(CDUnknownBlockType)arg4;
- (void)loadValueForAggregateFunction:(id)arg1 onItemsForProperty:(id)arg2 queryCriteria:(id)arg3 completionBlock:(CDUnknownBlockType)arg4;
- (void)enumerateCollectionIdentifiersForQueryCriteria:(id)arg1 ordered:(_Bool)arg2 cancelBlock:(CDUnknownBlockType)arg3 usingBlock:(CDUnknownBlockType)arg4;
- (void)enumerateItemIdentifiersForQueryCriteria:(id)arg1 ordered:(_Bool)arg2 cancelBlock:(CDUnknownBlockType)arg3 usingBlock:(CDUnknownBlockType)arg4;
@property(readonly, nonatomic) _Bool companionDeviceActiveStoreAccountIsDynamiteEligible;
- (id)multiverseIdentifierForCollectionWithPersistentID:(long long)arg1 groupingType:(long long)arg2;
- (id)multiverseIdentifierForTrackWithPersistentID:(long long)arg1;
- (_Bool)setValue:(id)arg1 forDatabaseProperty:(id)arg2;
- (id)valueForDatabaseProperty:(id)arg1;
@property(readonly, nonatomic) NSArray *localizedSectionIndexTitles;
- (id)localizedSectionHeaderForSectionIndex:(unsigned long long)arg1;
- (void)loadQueryCriteria:(id)arg1 countOfCollectionsWithCompletionBlock:(CDUnknownBlockType)arg2;
- (void)loadQueryCriteria:(id)arg1 countOfItemsWithCompletionBlock:(CDUnknownBlockType)arg2;
- (void)loadQueryCriteria:(id)arg1 hasCollectionsWithCompletionBlock:(CDUnknownBlockType)arg2;
- (void)loadQueryCriteria:(id)arg1 hasItemsWithCompletionBlock:(CDUnknownBlockType)arg2;
- (_Bool)collectionExistsWithStoreID:(long long)arg1 groupingType:(long long)arg2 existentPID:(unsigned long long *)arg3;
- (_Bool)collectionExistsWithName:(id)arg1 groupingType:(long long)arg2 existentPID:(unsigned long long *)arg3;
- (_Bool)collectionExistsContainedWithinPersistentIDs:(const unsigned long long *)arg1 count:(unsigned long long)arg2 groupingType:(long long)arg3 existentPID:(unsigned long long *)arg4;
- (_Bool)collectionExistsWithPersistentID:(unsigned long long)arg1 groupingType:(long long)arg2;
- (_Bool)playlistExistsWithPersistentID:(unsigned long long)arg1;
- (long long)itemPersistentIDForStoreID:(long long)arg1;
- (_Bool)itemExistsWithPersistentID:(unsigned long long)arg1;
- (_Bool)hasUbiquitousBookmarkableItems;
- (_Bool)hasGeniusMixes;
- (_Bool)hasMediaOfType:(unsigned long long)arg1;
- (_Bool)writable;
- (long long)playlistGeneration;
- (unsigned long long)syncGenerationID;
- (unsigned long long)currentEntityRevision;
- (id)lastModifiedDate;
@property(readonly, nonatomic) NSString *databasePath;
@property(readonly, nonatomic) NSString *uniqueIdentifier;
@property(readonly, nonatomic) NSString *name;
- (void)dealloc;
- (id)initWithLibrary:(id)arg1;

// Remaining properties
@property(readonly, nonatomic) id <MPArtworkDataSource> completeMyCollectionArtworkDataSource;
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly, nonatomic) _Bool isGeniusEnabled;
@property(readonly, nonatomic) NSSet *propertiesToCache;
@property(readonly, nonatomic) _Bool requiresAuthentication;
@property(readonly) Class superclass;

@end

@interface MPWeakRef : NSObject
{
    id _object;
    unsigned long long _objectAddress;
}

+ (id)weakRefWithObject:(id)arg1;
- (void).cxx_destruct;
- (id)object;
- (_Bool)isEqual:(id)arg1;
- (unsigned long long)hash;
- (void)dealloc;

@end

@interface MPMediaEntity : NSObject <NSCopying, NSSecureCoding>
{
    MIPMultiverseIdentifier *_multiverseIdentifier;
}

+ (_Bool)supportsSecureCoding;
+ (_Bool)canFilterByProperty:(id)arg1;
@property(readonly, nonatomic) MIPMultiverseIdentifier *multiverseIdentifier; // @synthesize multiverseIdentifier=_multiverseIdentifier;
- (void).cxx_destruct;
@property(readonly, nonatomic) MPMediaLibrary *mediaLibrary;
- (id)objectForKeyedSubscript:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithMultiverseIdentifier:(id)arg1;
- (void)enumerateValuesForProperties:(id)arg1 usingBlock:(CDUnknownBlockType)arg2;
- (id)cachedValueForProperty:(id)arg1;
- (id)valuesForProperties:(id)arg1;
- (id)valueForProperty:(id)arg1;
- (void)invalidateCachedProperties;
@property(readonly, nonatomic) MPMediaItem *representativeItem;
@property(readonly, nonatomic) unsigned long long persistentID;
@property(readonly, nonatomic) _Bool isPurchasableStoreOffer;
@property(readonly, nonatomic) _Bool isDownloadableStoreOffer;
@property(readonly, nonatomic) long long preferredStoreOfferVariant;
- (id)buyOffer;
- (id)completionOfferForVariant:(long long)arg1;
- (id)buyOfferForVariant:(long long)arg1;
@property(readonly, nonatomic) _Bool isDownloadable;

@end

@interface MPMediaQuerySectionInfo : NSObject <NSCopying, NSMutableCopying, NSSecureCoding>
{
    NSArray *_sections;
    NSArray *_sectionIndexTitles;
}

+ (_Bool)supportsSecureCoding;
@property(copy, nonatomic) NSArray *sectionIndexTitles; // @synthesize sectionIndexTitles=_sectionIndexTitles;
@property(readonly, copy, nonatomic) NSArray *sections; // @synthesize sections=_sections;
- (void).cxx_destruct;
@property(readonly, nonatomic) unsigned long long count;
- (unsigned long long)indexOfSectionForSectionIndexTitleAtIndex:(unsigned long long)arg1;
- (id)mutableCopyWithZone:(struct _NSZone *)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)description;

@end

@interface MPMediaQueryMutableSectionInfo : MPMediaQuerySectionInfo
{
}

- (void)addSectionWithHeaderTitle:(id)arg1 sectionIndexTitleIndex:(unsigned long long)arg2 count:(unsigned long long)arg3;

// Remaining properties
@property(copy, nonatomic) NSArray *sectionIndexTitles; // @dynamic sectionIndexTitles;

@end

@interface MPVolumeController : NSObject
{
    MPAVController *_player;
    NSString *_volumeAudioCategory;
    _Bool _volumeWarningBlinking;
    UIImage *_volumeWarningTrackImage;
    _Bool _debugVolumeWarning;
    _Bool _volumeWarningEnabled;
    float _volumeValue;
    float _EUVolumeLimit;
    id <MPVolumeControllerDelegate> _delegate;
    long long _volumeWarningState;
}

@property(readonly, nonatomic) float EUVolumeLimit; // @synthesize EUVolumeLimit=_EUVolumeLimit;
@property(readonly, nonatomic) long long volumeWarningState; // @synthesize volumeWarningState=_volumeWarningState;
@property(readonly, nonatomic) _Bool volumeWarningEnabled; // @synthesize volumeWarningEnabled=_volumeWarningEnabled;
@property(readonly, nonatomic) float volumeValue; // @synthesize volumeValue=_volumeValue;
@property(nonatomic) __weak id <MPVolumeControllerDelegate> delegate; // @synthesize delegate=_delegate;
- (void).cxx_destruct;
- (float)_volumeFromAVController;
- (_Bool)_isPlayerInValidState;
- (void)_setVolumeWarningState:(long long)arg1;
- (void)_internalSetVolumeValue:(float)arg1;
- (void)_applicationWillEnterForegroundNotification:(id)arg1;
- (void)_applicationDidEnterBackgroundNotification:(id)arg1;
- (void)_isExternalPlaybackActiveDidChangeNotification:(id)arg1;
- (void)_availableRoutesDidChangeNotification:(id)arg1;
- (void)_volumeDidChange:(id)arg1;
- (void)_mediaServerDiedNotification:(id)arg1;
- (void)_EUVolumeLimitEnforcedDidChange:(id)arg1;
- (void)_EUVolumeLimitDidChange:(id)arg1;
- (void)_systemMuteDidChange:(id)arg1;
- (void)_systemVolumeDidChange:(id)arg1;
- (void)_tearDownNotifications;
- (void)_setupNotifications;
- (void)_forcefullySetVolumeValue:(float)arg1;
- (void)updateVolumeWarningState;
- (void)updateVolumeValue;
@property(copy, nonatomic) NSString *volumeAudioCategory;
@property(retain, nonatomic) MPAVController *player;
@property(nonatomic) _Bool muted;
- (float)setVolumeValue:(float)arg1;
- (void)dealloc;
- (id)init;

@end

@interface MPMediaChapter : NSObject
{
    long long _chapterType;
    unsigned long long _indexInChaptersWithAnyType;
    unsigned long long _indexInChaptersWithSameType;
    double _playbackDuration;
    double _playbackTime;
    id _value;
    CDUnknownBlockType _valueLoader;
    MPMediaLibraryArtworkRequest *_artworkRequest;
    MPMediaLibraryArtworkDataSource *_artworkDataSource;
}

@property(nonatomic) __weak MPMediaLibraryArtworkDataSource *artworkDataSource; // @synthesize artworkDataSource=_artworkDataSource;
@property(retain, nonatomic) MPMediaLibraryArtworkRequest *artworkRequest; // @synthesize artworkRequest=_artworkRequest;
@property(copy, nonatomic) CDUnknownBlockType valueLoader; // @synthesize valueLoader=_valueLoader;
@property(retain, nonatomic) id value; // @synthesize value=_value;
@property(nonatomic) double playbackTime; // @synthesize playbackTime=_playbackTime;
@property(nonatomic) double playbackDuration; // @synthesize playbackDuration=_playbackDuration;
@property(nonatomic) long long chapterType; // @synthesize chapterType=_chapterType;
@property(nonatomic) unsigned long long indexInChaptersWithSameType; // @synthesize indexInChaptersWithSameType=_indexInChaptersWithSameType;
@property(nonatomic) unsigned long long indexInChaptersWithAnyType; // @synthesize indexInChaptersWithAnyType=_indexInChaptersWithAnyType;
- (void).cxx_destruct;
- (double)duration;
- (id)title;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)description;
- (long long)_sortByChapterIndex:(id)arg1;
- (id)artworkCatalog;

@end

@interface MPMediaChapterTimeMarker : MPTimeMarker
{
    unsigned long long _chapterIndex;
    NSArray *_chapters;
    _Bool _hasArtworkAtPlaybackTime;
}

@property(nonatomic) _Bool hasArtworkAtPlaybackTime; // @synthesize hasArtworkAtPlaybackTime=_hasArtworkAtPlaybackTime;
@property(retain, nonatomic) NSArray *chapters; // @synthesize chapters=_chapters;
@property(nonatomic) unsigned long long chapterIndex; // @synthesize chapterIndex=_chapterIndex;
- (void).cxx_destruct;

@end

@interface MPRotatingViewController : UIViewController
{
    CDUnknownBlockType _block;
}

- (void).cxx_destruct;
- (unsigned long long)supportedInterfaceOrientations;
- (_Bool)shouldAutorotate;
- (id)initWithValidInterfaceOrientationsBlock:(CDUnknownBlockType)arg1;

@end

@interface MPAudioVideoRoutingActionSheet : UIActionSheet <UIActionSheetDelegate>
{
    int _airPlayPasswordAlertDidAppearToken;
    _Bool _airPlayPasswordAlertDidAppearTokenIsValid;
    MPAVRoutingController *_routingController;
    unsigned long long _avItemType;
    CDUnknownBlockType _completionHandler;
    UIViewController *_viewControllerForActionSheet;
    UIWindow *_windowForActionSheet;
    _Bool _shouldPauseAfterDismissing;
    NSArray *_displayedRoutes;
}

- (void).cxx_destruct;
- (void)_debugButtonAction:(id)arg1;
- (id)_availableRoutes;
- (_Bool)_isDeviceVideoRoute:(id)arg1;
- (void)showInPopoverFromRect:(struct CGRect)arg1 inView:(id)arg2 backgroundStyle:(long long)arg3 animated:(_Bool)arg4 completionHandler:(CDUnknownBlockType)arg5;
- (void)showWithValidInterfaceOrientationsBlock:(CDUnknownBlockType)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)showWithValidInterfaceOrientationMaskBlock:(CDUnknownBlockType)arg1 windowLevel:(double)arg2 completionHandler:(CDUnknownBlockType)arg3;
- (void)showWithValidInterfaceOrientationMaskBlock:(CDUnknownBlockType)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)showFromRect:(struct CGRect)arg1 inView:(id)arg2 animated:(_Bool)arg3 withCompletionHandler:(CDUnknownBlockType)arg4;
- (void)actionSheet:(id)arg1 didDismissWithButtonIndex:(long long)arg2;
- (void)actionSheet:(id)arg1 clickedButtonAtIndex:(long long)arg2;
- (void)layoutSubviews;
- (void)dealloc;
- (id)initWithType:(unsigned long long)arg1;
- (id)initWithType:(unsigned long long)arg1 routingController:(id)arg2;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface MPAudioVideoRoutingPopoverController : UIPopoverController <MPAVRoutingViewControllerDelegate>
{
    int _airPlayPasswordAlertDidAppearToken;
    _Bool _airPlayPasswordAlertDidAppearTokenIsValid;
    _Bool _mirroringIncluded;
}

- (id)_tableViewController;
- (void)routingViewController:(id)arg1 didPickRoute:(id)arg2;
- (id)routingController;
- (void)dealloc;
- (id)initWithContentViewController:(id)arg1;
- (id)initWithType:(unsigned long long)arg1 includeMirroring:(_Bool)arg2;
- (id)initWithType:(unsigned long long)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface MPAVRoute : NSObject
{
    NSString *_routeName;
    _Bool _picked;
    NSDictionary *_avRouteDescription;
    MPAVRoute *_wirelessDisplayRoute;
    long long _displayRouteType;
    _Bool _requiresPassword;
    NSString *_routeUID;
    long long _routeType;
    long long _pickableRouteType;
    long long _routeSubtype;
}

@property(readonly, nonatomic) _Bool requiresPassword; // @synthesize requiresPassword=_requiresPassword;
@property(readonly, nonatomic) long long routeSubtype; // @synthesize routeSubtype=_routeSubtype;
@property(readonly, nonatomic) long long pickableRouteType; // @synthesize pickableRouteType=_pickableRouteType;
@property(readonly, nonatomic) long long routeType; // @synthesize routeType=_routeType;
@property(readonly, nonatomic) NSString *routeUID; // @synthesize routeUID=_routeUID;
- (void).cxx_destruct;
- (void)_routingControllerPickedRouteNotification:(id)arg1;
- (_Bool)isEqual:(id)arg1;
- (id)description;
- (unsigned long long)hash;
- (void)setDisplayRouteType:(long long)arg1;
@property(readonly, nonatomic) long long displayRouteType;
@property(readonly, nonatomic) _Bool displayIsPicked;
@property(readonly, nonatomic) long long passwordType;
- (void)setWirelessDisplayRoute:(id)arg1;
@property(readonly, nonatomic) MPAVRoute *wirelessDisplayRoute;
- (void)setPicked:(_Bool)arg1;
@property(readonly, nonatomic, getter=isPicked) _Bool picked;
- (void)setAVRouteDescription:(id)arg1;
- (id)avRouteDescription;
- (void)setRouteName:(id)arg1;
@property(readonly, nonatomic) NSString *routeName;
- (void)dealloc;
- (id)_initWithAVRouteDescription:(id)arg1;

@end

@interface MPPlaceholderArtwork : NSObject
{
}

+ (id)noArtPlaceholderImageForMediaType:(unsigned long long)arg1;

@end

@interface MPTermsViewController : UIViewController
{
    _Bool _needToLoadTerms;
    SSTermsAndConditions *_termsAndConditions;
    id <MPTermsViewControllerDelegate> _delegate;
    UIActivityIndicatorView *_activityIndicatorView;
    UIView *_topSpacerView;
    UIView *_bottomSpacerView;
    UITextView *_termsTextView;
}

@property(retain, nonatomic) UITextView *termsTextView; // @synthesize termsTextView=_termsTextView;
@property(retain, nonatomic) UIView *bottomSpacerView; // @synthesize bottomSpacerView=_bottomSpacerView;
@property(retain, nonatomic) UIView *topSpacerView; // @synthesize topSpacerView=_topSpacerView;
@property(retain, nonatomic) UIActivityIndicatorView *activityIndicatorView; // @synthesize activityIndicatorView=_activityIndicatorView;
@property(nonatomic) __weak id <MPTermsViewControllerDelegate> delegate; // @synthesize delegate=_delegate;
- (void).cxx_destruct;
- (void)_failedToAcceptTermsWithError:(id)arg1;
- (void)_userAcceptedTerms;
- (void)_failedToLoadTermsWithError:(id)arg1;
- (void)_loadedTerms:(id)arg1;
- (void)_startLoadingTerms;
- (void)_setupViewForFailedToAcceptTerms;
- (void)_setupViewForFailedToLoadTerms;
- (void)_setupViewForShowingTerms;
- (void)_setupViewForLoadingTerms;
- (void)_cancelAction:(id)arg1;
- (void)_acceptAction:(id)arg1;
- (unsigned long long)supportedInterfaceOrientations;
- (_Bool)shouldAutorotate;
- (void)viewDidAppear:(_Bool)arg1;
- (void)viewDidLoad;
- (id)init;

@end

@interface MPPasswordAlertView : UIAlertView <UIAlertViewDelegate>
{
    CDUnknownBlockType _completionHandler;
    long long _style;
    UITextField *_passwordTextField;
}

@property(readonly, nonatomic) long long style; // @synthesize style=_style;
- (void).cxx_destruct;
- (void)alertView:(id)arg1 clickedButtonAtIndex:(long long)arg2;
- (id)initWithTitle:(id)arg1 message:(id)arg2 delegate:(id)arg3 cancelButtonTitle:(id)arg4 otherButtonTitles:(id)arg5;
- (id)initWithStyle:(long long)arg1 routeName:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface MPClosedCaptionDisplay : UIView
{
    UILabel *_label;
    UIView *_backgroundView;
    _Bool _hidden;
    _Bool _rotating;
}

- (void).cxx_destruct;
- (void)setText:(id)arg1;
- (void)_updatePositioning:(_Bool)arg1;
- (void)setNeedsLayout;
- (void)endLayoutChange;
- (void)startLayoutChange:(_Bool)arg1;
- (void)_hidePanel;
- (id)initWithFrame:(struct CGRect)arg1;

@end

@interface MPMediaQuerySection : NSObject <NSSecureCoding, NSCopying>
{
    NSString *_title;
    unsigned long long _sectionIndexTitleIndex;
    struct _NSRange _range;
}

+ (_Bool)supportsSecureCoding;
@property(nonatomic) unsigned long long sectionIndexTitleIndex; // @synthesize sectionIndexTitleIndex=_sectionIndexTitleIndex;
@property(nonatomic) struct _NSRange range; // @synthesize range=_range;
@property(copy, nonatomic) NSString *title; // @synthesize title=_title;
- (void).cxx_destruct;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)description;
- (id)_init;
- (id)init;

@end

@interface MPArtworkResizeOperation : NSOperation
{
    _Bool _usesExactFittingSizeAsDestinationSize;
    NSURL *_destinationURL;
    NSObject<OS_dispatch_group> *_operationGroup;
    NSError *_error;
    UIImage *_resizedImage;
    UIImage *_image;
    struct CGSize _scaledFittingSize;
}

@property(nonatomic) _Bool usesExactFittingSizeAsDestinationSize; // @synthesize usesExactFittingSizeAsDestinationSize=_usesExactFittingSizeAsDestinationSize;
@property(nonatomic) struct CGSize scaledFittingSize; // @synthesize scaledFittingSize=_scaledFittingSize;
@property(retain, nonatomic) UIImage *image; // @synthesize image=_image;
@property(readonly, nonatomic) UIImage *resizedImage; // @synthesize resizedImage=_resizedImage;
@property(readonly, nonatomic) NSError *error; // @synthesize error=_error;
@property(readonly, nonatomic) NSObject<OS_dispatch_group> *operationGroup; // @synthesize operationGroup=_operationGroup;
@property(readonly, nonatomic) NSURL *destinationURL; // @synthesize destinationURL=_destinationURL;
- (void).cxx_destruct;
- (struct CGSize)_resizedScaledSizeForScaledImageSize:(struct CGSize)arg1 scaledFittingSize:(struct CGSize)arg2;
- (void)main;
- (id)initWithImage:(id)arg1 scaledFittingSize:(struct CGSize)arg2 useExactFittingSizeAsDestinationSize:(_Bool)arg3 destinationURL:(id)arg4;
- (id)initWithImage:(id)arg1 scaledFittingSize:(struct CGSize)arg2 destinationURL:(id)arg3;
- (id)initWithImage:(id)arg1 scaledFittingSize:(struct CGSize)arg2;

@end

@interface MPVideoOverlay : UIView <MPVideoOverlay, MPDetailSliderDelegate>
{
    id <MPVideoControllerProtocol> _videoViewController;
    id <MPVideoOverlayDelegate> _delegate;
    MPAVItem *_item;
    MPAVController *_player;
    MPDetailSlider *_scrubControl;
    long long _interfaceOrientation;
    _Bool _controlsAutohideDisabled;
    _Bool _wantsTick;
    unsigned long long _desiredParts;
    unsigned long long _visibleParts;
    unsigned long long _disabledParts;
    NSMutableDictionary *_tickTimeEvents;
    double _lastTickTime;
}

@property(nonatomic) unsigned long long visibleParts; // @synthesize visibleParts=_visibleParts;
@property(nonatomic) __weak id <MPVideoControllerProtocol> videoViewController; // @synthesize videoViewController=_videoViewController;
@property(retain, nonatomic) MPAVController *player; // @synthesize player=_player;
@property(retain, nonatomic) MPAVItem *item; // @synthesize item=_item;
@property(nonatomic) unsigned long long disabledParts; // @synthesize disabledParts=_disabledParts;
@property(nonatomic) unsigned long long desiredParts; // @synthesize desiredParts=_desiredParts;
@property(nonatomic) __weak id <MPVideoOverlayDelegate> delegate; // @synthesize delegate=_delegate;
- (void).cxx_destruct;
- (double)_playableDuration;
- (double)_duration;
- (void)cancelPreviousPerformTickEventsForSelector:(SEL)arg1;
- (void)performSelector:(SEL)arg1 whenTickingPastTime:(double)arg2;
- (_Bool)updateTimeBasedValues;
@property(readonly, retain, nonatomic) UINavigationBar *navigationBar;
- (void)hideAlternateTracks;
- (void)showAlternateTracks;
- (void)stopTicking;
- (void)startTicking;
- (void)setVisibleParts:(unsigned long long)arg1 animate:(_Bool)arg2;
@property(nonatomic) _Bool navigationBarHidden;
- (void)setDesiredParts:(unsigned long long)arg1 animate:(_Bool)arg2;
@property(nonatomic) _Bool allowsWirelessPlayback;
- (void)_itemDurationDidChangeNotification:(id)arg1;
- (void)_tickNotification:(id)arg1;
- (void)_endSliderTracking;
- (void)detailSlider:(id)arg1 didChangeValue:(float)arg2;
- (void)detailSliderTrackingDidCancel:(id)arg1;
- (void)detailSliderTrackingDidEnd:(id)arg1;
- (void)detailSliderTrackingDidBegin:(id)arg1;
- (id)hitTest:(struct CGPoint)arg1 withEvent:(id)arg2;
- (void)didMoveToSuperview;
- (void)layoutSubviews;
- (void)unregisterForPlayerNotifications;
- (void)registerForPlayerNotifications;
- (void)dealloc;
- (id)initWithFrame:(struct CGRect)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface MPPSearchStringPredicate : PBCodable <NSCopying>
{
    NSMutableArray *_properties;
    NSString *_searchString;
}

@property(retain, nonatomic) NSMutableArray *properties; // @synthesize properties=_properties;
@property(retain, nonatomic) NSString *searchString; // @synthesize searchString=_searchString;
- (void).cxx_destruct;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)copyTo:(id)arg1;
- (void)writeTo:(id)arg1;
- (_Bool)readFrom:(id)arg1;
- (id)dictionaryRepresentation;
- (id)description;
- (id)propertiesAtIndex:(unsigned long long)arg1;
- (unsigned long long)propertiesCount;
- (void)addProperties:(id)arg1;
- (void)clearProperties;
@property(readonly, nonatomic) _Bool hasSearchString;
- (void)dealloc;

@end

@interface MPMediaLibraryDataProviderSystemML3 : MPMediaLibraryDataProviderML3
{
    id <MPArtworkDataSource> _completeMyCollectionArtworkDataSource;
    long long _currentRevision;
    NSObject<OS_dispatch_queue> *_queue;
}

+ (id)_localizedGeniusErrorForError:(id)arg1;
+ (id)_localizedCloudGeniusErrorForError:(id)arg1;
+ (_Bool)_isGeniusEnabled;
- (void).cxx_destruct;
- (_Bool)supportsEntityChangeTrackingForMediaEntityType:(unsigned long long)arg1 collectionGroupingType:(long long)arg2 dataProviderClass:(out Class *)arg3;
- (void)updateEntitesToCurrentRevision;
- (id)errorResolverForMediaItem:(id)arg1;
- (id)completeMyCollectionArtworkDataSource;
- (void)_seedCloudPlaylistWithTrack:(id)arg1 container:(id)arg2 completionBlock:(CDUnknownBlockType)arg3;
- (void)releaseGeniusClusterPlaylist:(void *)arg1;
- (long long *)generateItemIdentifiersForGeniusClusterPlaylist:(void *)arg1 count:(unsigned long long *)arg2 error:(id *)arg3;
- (void *)createGeniusClusterPlaylistWithSeedItemIdentifiers:(long long *)arg1 count:(unsigned long long)arg2 error:(id *)arg3;
- (void)seedPlaylistWithIdentifier:(long long)arg1 withItemWithIdentifier:(long long)arg2 completionBlock:(CDUnknownBlockType)arg3;
- (_Bool)isGeniusEnabled;
- (long long)_currentRevision;
- (void)_initInstanceVariableOnce;
- (id)initWithLibrary:(id)arg1;

@end

@interface MPMediaQueryShuffledItems : NSObject <NSSecureCoding, NSCopying>
{
    unsigned long long _activeShuffleType;
    _Bool _dirty;
    NSMutableArray *_orderedArray;
    MPMediaQuery *_sourceMediaQuery;
    NSArray *_sourceMediaQueryItems;
    struct _NSRange _focusedRange;
}

+ (_Bool)supportsSecureCoding;
@property(nonatomic) struct _NSRange focusedRange; // @synthesize focusedRange=_focusedRange;
@property(readonly, nonatomic) MPMediaQuery *sourceMediaQuery; // @synthesize sourceMediaQuery=_sourceMediaQuery;
- (void).cxx_destruct;
- (void)_shuffleMutableOrderedArrayWithInitialIndex:(unsigned long long)arg1;
- (void)_resetCaches;
- (void)_rebuildItemCachesWithInitialSourceItemIndex:(unsigned long long)arg1;
- (void)_rebuildGroupedCachesWithInitialSourceItemIndex:(unsigned long long)arg1;
- (void)_rebuildCachesWithInitialSourceIndex:(unsigned long long)arg1;
- (void)_rebuildCaches;
- (id)_includeInShuffleItemsForQuery:(id)arg1;
- (void)unshuffle;
- (void)shuffleItemsWithInitialIndex:(unsigned long long)arg1;
- (void)shuffleAlbumsWithInitialIndex:(unsigned long long)arg1;
- (id)objectAtIndex:(unsigned long long)arg1;
@property(readonly, copy, nonatomic) NSArray *items;
- (void)invalidateSourceMediaQueryAndLoadItems;
- (unsigned long long)indexOfObject:(id)arg1;
- (unsigned long long)indexOfObject:(id)arg1 greaterThanOrEqualToIndex:(unsigned long long)arg2;
- (unsigned long long)indexOfItemWithPersistentID:(unsigned long long)arg1;
- (unsigned long long)indexOfItemWithPersistentID:(unsigned long long)arg1 greaterThanOrEqualToIndex:(unsigned long long)arg2;
- (unsigned long long)count;
@property(readonly, nonatomic) unsigned long long realShuffleType;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithSourceMediaQuery:(id)arg1;
- (id)initWithSourceMediaQuery:(id)arg1 orderedItems:(id)arg2 shuffleType:(unsigned long long)arg3;

@end

@interface MPShuffledItemGroup : NSObject <NSSecureCoding>
{
    long long _groupPersistentID;
    NSMutableArray *_mutableItems;
}

+ (_Bool)supportsSecureCoding;
- (void).cxx_destruct;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)description;
- (id)initWithGroupPersistentID:(long long)arg1;

@end

@interface MPVolumeHUDController : NSObject
{
    NSMutableArray *_contexts;
    NSMutableSet *_categories;
}

+ (id)sharedInstance;
- (void).cxx_destruct;
- (void)_updateVisibility;
- (void)setNeedsUpdate;
- (void)unregisterView:(id)arg1 inContext:(id)arg2;
- (void)registerView:(id)arg1 inContext:(id)arg2;
- (void)popContext;
- (id)pushContext;
@property(readonly, nonatomic) id mainContext;
- (id)init;

@end

@interface MPAVPlaylistManager : NSObject <MPAVQueuePlayerFeederSource>
{
    NSString *_audioSessionModeOverride;
    MPAVItem *_currentItem;
    MPAVQueuePlayerFeeder *_feeder;
    _Bool _goToTargetIndex;
    long long _isChangingPlaylistFeeder;
    long long _lastSelectionDirection;
    MPQueuePlayer *_player;
    id <MPAVPlaylistFeeder> _playlistFeeder;
    int _repeatMode;
    long long _targetIndex;
    _Bool _updatedAudioSessionMode;
}

@property(readonly) long long lastSelectionDirection; // @synthesize lastSelectionDirection=_lastSelectionDirection;
@property(retain, nonatomic) id <MPAVPlaylistFeeder> playlistFeeder; // @synthesize playlistFeeder=_playlistFeeder;
@property(readonly) MPQueuePlayer *player; // @synthesize player=_player;
@property(readonly) MPAVItem *currentItem; // @synthesize currentItem=_currentItem;
@property(retain, nonatomic) NSString *audioSessionModeOverride; // @synthesize audioSessionModeOverride=_audioSessionModeOverride;
- (void).cxx_destruct;
- (void)_updateAudioSessionMode;
- (id)_audioSessionModeForMediaItem:(id)arg1;
- (id)_feeder;
- (void)queuePlayerFeederFailedToQueueAnyItems:(id)arg1;
- (void)queuePlayerFeederDidUpdateQueue:(id)arg1 queuedItems:(id)arg2 dequeuedItems:(id)arg3;
- (_Bool)queuePlayerFeeder:(id)arg1 willInsertItem:(id)arg2;
- (void)queuePlayerFeeder:(id)arg1 willRemoveItem:(id)arg2;
- (id)queuePlayerFeeder:(id)arg1 itemToFollowItem:(id)arg2;
- (id)_itemToFollowItemIndex:(long long)arg1 skipUnavailableContent:(_Bool)arg2;
- (long long)_nextItemIndex:(long long)arg1 repeatMode:(int)arg2;
- (void)contentInvalidatedWithNewIndex:(unsigned long long)arg1;
- (void)contentInvalidated;
- (void)contentInvalidatedWithCurrentItemMovedToIndex:(unsigned long long)arg1;
- (void)contentsDidChangeByRemovingRange:(struct _NSRange)arg1;
- (void)_reloadQueuedItemsIfPathBecameAvailable;
- (_Bool)setPlaylistFeeder:(id)arg1 startIndex:(long long)arg2;
@property(readonly, nonatomic) _Bool canChangePlaylistFeeder;
@property(readonly, nonatomic) _Bool isChangingPlaylistFeeder;
@property int repeatMode;
@property(readonly) long long currentIndex;
- (void)setCurrentIndex:(long long)arg1 selectionDirection:(long long)arg2;
- (long long)_prepareToQueuePlaybackIndex:(long long)arg1 selectionDirection:(long long)arg2;
- (id)_feederItemForIndex:(long long)arg1;
- (void)updateForSoundCheckDefaultsChange;
@property(nonatomic) unsigned long long minQueueDepth;
@property(nonatomic) unsigned long long maxQueueDepth;
@property(nonatomic) _Bool managesSystemDownloads;
@property(nonatomic) _Bool forceSynchronousQueueFilling;
- (void)_mediaLibraryDisplayValuesDidChangeNotification:(id)arg1;
- (void)_downloadCancelledNotification:(id)arg1;
- (void)_assetCancelNotification:(id)arg1;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (void)dealloc;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface MPAVQueuePlayerFeeder : NSObject <SSDownloadManagerObserver>
{
    unsigned long long _desiredQueueDepth;
    MPDownloadManager *_downloadManager;
    _Bool _forceSynchronousQueueFilling;
    _Bool _fillQueueActive;
    NSMutableArray *_items;
    _Bool _managesSystemDownloads;
    unsigned long long _maxQueueDepth;
    unsigned long long _minQueueDepth;
    long long _nextFillQueueToken;
    NSMutableSet *_pausedDownloads;
    NSObject<OS_dispatch_queue> *_pausedDownloadsQueue;
    MPQueuePlayer *_player;
    NSObject<OS_dispatch_queue> *_playerQueue;
    id <MPAVQueuePlayerFeederSource> _playlistItemSource;
    NSMutableSet *_reusableItems;
}

@property(nonatomic) _Bool managesSystemDownloads; // @synthesize managesSystemDownloads=_managesSystemDownloads;
@property(nonatomic) unsigned long long minQueueDepth; // @synthesize minQueueDepth=_minQueueDepth;
@property(nonatomic) unsigned long long maxQueueDepth; // @synthesize maxQueueDepth=_maxQueueDepth;
@property(nonatomic) _Bool forceSynchronousQueueFilling; // @synthesize forceSynchronousQueueFilling=_forceSynchronousQueueFilling;
- (void).cxx_destruct;
- (void)_updateQueueDepthForRateChange;
- (void)_updatePlayerQueueWithRemovedItems:(id)arg1 addedItems:(id)arg2 removeCurrentItem:(_Bool)arg3;
- (void)_removeInvalidItems:(id)arg1;
- (void)_reloadQueueKeepingCurrentItem:(_Bool)arg1 allowReusingItems:(_Bool)arg2;
- (void)_pauseOrResumeDownloads:(id)arg1 currentDownloadID:(long long)arg2;
- (void)_markIsReusable:(_Bool)arg1 item:(id)arg2;
- (void)reloadQueueKeepingCurrentItem:(_Bool)arg1;
- (void)invalidate;
- (void)cancelReusableItemsPassingTest:(CDUnknownBlockType)arg1;
- (void)advanceToNextItem;
- (id)acquireReusableItemsUsingBlock:(CDUnknownBlockType)arg1;
@property(readonly, nonatomic) NSArray *items;
@property(readonly, nonatomic) MPAVItem *currentItem;
- (void)downloadManager:(id)arg1 downloadStatesDidChange:(id)arg2;
- (void)_removeCurrentItemAndFillQueue:(_Bool)arg1;
- (id)_fillInQueueWithExtraSpace:(int)arg1 ignoreExistingItems:(_Bool)arg2 removeCurrentItem:(_Bool)arg3;
- (id)_fillInQueueWithExtraSpace:(int)arg1 ignoreExistingItems:(_Bool)arg2;
- (id)_fillInQueueWithExtraSpace:(int)arg1;
- (void)_fillInQueue;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
@property(readonly, copy) NSString *description;
- (void)dealloc;
- (id)initWithMPQueuePlayer:(id)arg1 itemSource:(id)arg2;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface MPPMediaQuery : PBCodable <NSCopying>
{
    int _entityOrder;
    NSMutableArray *_filterPredicates;
    int _groupingType;
    NSMutableArray *_staticEntityIdentifiers;
    int _staticEntityType;
    _Bool _filteringDisabled;
    struct {
        unsigned int entityOrder:1;
        unsigned int groupingType:1;
        unsigned int staticEntityType:1;
        unsigned int filteringDisabled:1;
    } _has;
}

@property(nonatomic) int staticEntityType; // @synthesize staticEntityType=_staticEntityType;
@property(retain, nonatomic) NSMutableArray *staticEntityIdentifiers; // @synthesize staticEntityIdentifiers=_staticEntityIdentifiers;
@property(nonatomic) int entityOrder; // @synthesize entityOrder=_entityOrder;
@property(nonatomic) _Bool filteringDisabled; // @synthesize filteringDisabled=_filteringDisabled;
@property(nonatomic) int groupingType; // @synthesize groupingType=_groupingType;
@property(retain, nonatomic) NSMutableArray *filterPredicates; // @synthesize filterPredicates=_filterPredicates;
- (void).cxx_destruct;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)copyTo:(id)arg1;
- (void)writeTo:(id)arg1;
- (_Bool)readFrom:(id)arg1;
- (id)dictionaryRepresentation;
- (id)description;
@property(nonatomic) _Bool hasStaticEntityType;
- (id)staticEntityIdentifiersAtIndex:(unsigned long long)arg1;
- (unsigned long long)staticEntityIdentifiersCount;
- (void)addStaticEntityIdentifiers:(id)arg1;
- (void)clearStaticEntityIdentifiers;
@property(nonatomic) _Bool hasEntityOrder;
@property(nonatomic) _Bool hasFilteringDisabled;
@property(nonatomic) _Bool hasGroupingType;
- (id)filterPredicatesAtIndex:(unsigned long long)arg1;
- (unsigned long long)filterPredicatesCount;
- (void)addFilterPredicates:(id)arg1;
- (void)clearFilterPredicates;
- (void)dealloc;

@end

@interface MPMediaQueryCriteria : NSObject <NSCopying>
{
    NSMutableSet *_filterPredicates;
    unsigned long long _entityOrder;
    long long _groupingType;
    NSArray *_orderingProperties;
    NSArray *_itemPropertiesToFetchArray;
    NSArray *_collectionPropertiesToFetchArray;
    _Bool _useSections;
    _Bool _ignoreSystemFilterPredicates;
    NSDictionary *_orderingDirectionMappings;
}

@property(nonatomic) unsigned long long entityOrder; // @synthesize entityOrder=_entityOrder;
@property(readonly, nonatomic) NSArray *collectionPropertiesToFetchArray; // @synthesize collectionPropertiesToFetchArray=_collectionPropertiesToFetchArray;
@property(readonly, nonatomic) NSArray *itemPropertiesToFetchArray; // @synthesize itemPropertiesToFetchArray=_itemPropertiesToFetchArray;
@property(copy, nonatomic) NSDictionary *orderingDirectionMappings; // @synthesize orderingDirectionMappings=_orderingDirectionMappings;
@property(nonatomic) _Bool ignoreSystemFilterPredicates; // @synthesize ignoreSystemFilterPredicates=_ignoreSystemFilterPredicates;
@property(copy, nonatomic) NSSet *filterPredicates; // @synthesize filterPredicates=_filterPredicates;
@property(copy, nonatomic) NSArray *orderingProperties; // @synthesize orderingProperties=_orderingProperties;
@property(nonatomic) long long groupingType; // @synthesize groupingType=_groupingType;
- (void).cxx_destruct;
@property(readonly, nonatomic) _Bool specifiesPlaylistItems;
- (void)removePredicatesForProperty:(id)arg1;
- (id)predicateForProperty:(id)arg1;
- (void)removeFilterPredicate:(id)arg1;
- (void)addFilterPredicates:(id)arg1;
- (void)addFilterPredicate:(id)arg1;
@property(readonly, nonatomic) _Bool excludesEntitiesWithBlankNames;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (id)description;
- (id)init;
@property(copy, nonatomic) NSSet *collectionPropertiesToFetch;
@property(copy, nonatomic) NSSet *itemPropertiesToFetch;
- (id)ML3CollectionsQueryInLibrary:(id)arg1;
- (id)ML3ItemsQueryInLibrary:(id)arg1 orderingTerms:(id)arg2 nameBlankProperty:(id)arg3;
- (id)ML3ItemsQueryInLibrary:(id)arg1;
- (id)ML3OrderingTermsForGroupingType:(long long)arg1 isFastCountable:(_Bool *)arg2;
- (id)ML3OrderingTermsForMPOrderingProperties:(id)arg1;
- (id)ML3OrderingTermForMPOrderingProperty:(id)arg1;

@end

@interface UIMovieClosedCaptionData : NSObject
{
    NSString *_language;
    NSMutableArray *_data;
}

@property(retain, nonatomic) NSString *language; // @synthesize language=_language;
- (void).cxx_destruct;
- (id)description;
- (id)timeMarkers;
- (void)addCaptionText:(id)arg1 startTime:(double)arg2 endTime:(double)arg3;

@end

@interface MPNowPlayingInfoCenter : NSObject
{
    NSDictionary *_nowPlayingInfo;
    NSDictionary *_queuedNowPlayingInfo;
    NSDate *_pushDate;
    NSObject<OS_dispatch_queue> *_queue;
}

+ (id)defaultCenter;
- (void).cxx_destruct;
@property(copy) NSDictionary *nowPlayingInfo;
- (void)_pushNowPlayingInfoAndRetry:(_Bool)arg1;
- (id)init;
- (id)_init;

@end

@interface MPHomeSharingML3DataProvider : MPMediaLibraryDataProviderML3
{
    HSHomeSharingLibrary *_homeSharingLibrary;
    NSMutableDictionary *_tokenDataForDSIDs;
    NSMutableSet *_loadedContainerPIDs;
    NSMutableDictionary *_blocksForLoadingContainerPIDs;
    NSObject<OS_dispatch_queue> *_containerFillQueue;
    id <MPArtworkDataSource> _artworkDataSource;
}

+ (void)_determineHomeSharingGroupIDWithCompletionHandler:(CDUnknownBlockType)arg1;
+ (id)homeSharingGroupID;
+ (_Bool)isConnecting;
+ (void)endScanningForLibraries;
+ (void)beginScanningForLibraries;
+ (_Bool)isScanningForLibraries;
@property(readonly, nonatomic) HSHomeSharingLibrary *homeSharingLibrary; // @synthesize homeSharingLibrary=_homeSharingLibrary;
- (id)artworkDataSource;
- (void).cxx_destruct;
- (void)_fillContainerForQueryCriteria:(id)arg1 completionBlock:(CDUnknownBlockType)arg2;
- (id)_tokenDataForMediaItem:(id)arg1;
- (void)_fetchTokensForAuthorizedDSIDs;
- (void)setTokenData:(id)arg1 forAuthorizedDSID:(unsigned long long)arg2;
@property(readonly, nonatomic) _Bool isSupportedSharingVersion;
- (void)_homeSharingLibraryDidBecomeUnavailable:(id)arg1;
- (void)_homeSharingLibraryDidUpdateRevisionNumber:(id)arg1;
- (void)_homeSharingGroupIDDidChangeNotification:(id)arg1;
- (id)protectedContentSupportStorageURL;
- (void)setRentalPlaybackStartDateForItemID:(unsigned long long)arg1;
- (id)errorResolverForMediaItem:(id)arg1;
- (id)adjustedValueForMPProperty:(id)arg1 ofEntity:(id)arg2 withDefaultValue:(id)arg3;
- (void)setValue:(id)arg1 forProperty:(id)arg2 ofItemWithIdentifier:(long long)arg3 completionBlock:(CDUnknownBlockType)arg4;
- (_Bool)hasGeniusMixes;
- (id)itemResultSetForQueryCriteria:(id)arg1;
- (void)loadQueryCriteria:(id)arg1 countOfCollectionsWithCompletionBlock:(CDUnknownBlockType)arg2;
- (void)loadQueryCriteria:(id)arg1 countOfItemsWithCompletionBlock:(CDUnknownBlockType)arg2;
- (void)loadQueryCriteria:(id)arg1 hasCollectionsWithCompletionBlock:(CDUnknownBlockType)arg2;
- (void)loadQueryCriteria:(id)arg1 hasItemsWithCompletionBlock:(CDUnknownBlockType)arg2;
- (_Bool)hasArtworkImageForItemWithIdentifier:(long long)arg1;
- (void)disconnect;
- (void)connectWithAuthenticationData:(id)arg1 completionBlock:(CDUnknownBlockType)arg2 progressHandler:(CDUnknownBlockType)arg3;
- (_Bool)requiresAuthentication;
- (id)uniqueIdentifier;
- (id)name;
- (void)dealloc;
- (id)initWithHomeSharingLibrary:(id)arg1;

@end

@interface MPStoreItemContext : NSObject <NSCopying>
{
    MPMediaItem *_mediaItem;
    long long _storeID;
    NSString *_buyParametersString;
    unsigned long long _mediaType;
    NSString *_downloadIdentifier;
    NSDictionary *_buyParametersDictionary;
}

+ (id)contextWithStoreID:(long long)arg1 buyParameters:(id)arg2 mediaType:(unsigned long long)arg3;
+ (id)contextsWithMediaItems:(id)arg1;
+ (id)contextWithMediaItem:(id)arg1;
@property(readonly, copy, nonatomic) NSDictionary *buyParametersDictionary; // @synthesize buyParametersDictionary=_buyParametersDictionary;
@property(copy, nonatomic) NSString *downloadIdentifier; // @synthesize downloadIdentifier=_downloadIdentifier;
@property(readonly, nonatomic) unsigned long long mediaType; // @synthesize mediaType=_mediaType;
@property(readonly, copy, nonatomic) NSString *buyParametersString; // @synthesize buyParametersString=_buyParametersString;
@property(readonly, nonatomic) long long storeID; // @synthesize storeID=_storeID;
- (void).cxx_destruct;
- (id)description;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)_ITunesStoreContentInfo:(_Bool)arg1;
- (id)URLFromPath:(id)arg1;
- (void)_setBuyParameters:(id)arg1;
- (void)_fetchMediaItemPropertyValues;
@property(copy, nonatomic) NSString *localFilePath;
@property(readonly, nonatomic) float volumeNormalization;
@property(readonly, nonatomic) _Bool isDownloadInProgress;
- (id)buyOfferForVariant:(long long)arg1;
@property(readonly, nonatomic) _Bool isDownloadableStoreOffer;
@property(readonly, nonatomic) _Bool isPurchasableStoreOffer;
@property(readonly, nonatomic) _Bool isDownloadable;
@property(readonly, nonatomic) unsigned long long persistentStorageIdentifier;
@property(readonly, copy, nonatomic) NSString *contentTitle;
@property(readonly, nonatomic) _Bool localFileIsTemporaryCloudDownload;
@property(readonly, nonatomic) _Bool localFileIsValidForPlayback;
@property(readonly, copy, nonatomic) NSString *localFileName;
@property(readonly, nonatomic) _Bool localFileIsStreamingQuality;
@property(readonly, copy, nonatomic) NSURL *protectedContentSupportStorageURL;
@property(readonly, copy, nonatomic) NSDictionary *ITunesStoreContentDownloadInfo;
@property(readonly, copy, nonatomic) NSDictionary *ITunesStoreContentStreamingInfo;
- (unsigned long long)itemType;
@property(readonly, nonatomic) long long purchaseHistoryID;
@property(readonly, nonatomic) long long matchID;
- (id)initWithStoreID:(long long)arg1 buyParameters:(id)arg2 mediaType:(unsigned long long)arg3;
- (id)initWithMediaItem:(id)arg1;

@end

@interface MPHomeSharingURLProtocol : NSURLProtocol
{
}

+ (id)canonicalRequestForRequest:(id)arg1;
+ (_Bool)canInitWithRequest:(id)arg1;
+ (void)initialize;
- (void)stopLoading;
- (void)startLoading;

@end

@interface MPMediaLibraryArtworkRequest : NSObject
{
    unsigned long long _mediaType;
    long long _artworkType;
    unsigned long long _libraryID;
    ML3MusicLibrary *_library;
    NSString *_cachedArtworkToken;
    NSNumber *_cachedArtworkSourceType;
    MPMediaLibraryArtwork *_libraryArtwork;
    double _retrievalTime;
    long long _artistType;
}

@property(nonatomic) long long artistType; // @synthesize artistType=_artistType;
@property(nonatomic) double retrievalTime; // @synthesize retrievalTime=_retrievalTime;
@property(retain, nonatomic) MPMediaLibraryArtwork *libraryArtwork; // @synthesize libraryArtwork=_libraryArtwork;
@property(copy, nonatomic) NSNumber *cachedArtworkSourceType; // @synthesize cachedArtworkSourceType=_cachedArtworkSourceType;
@property(copy, nonatomic) NSString *cachedArtworkToken; // @synthesize cachedArtworkToken=_cachedArtworkToken;
@property(readonly, nonatomic) ML3MusicLibrary *library; // @synthesize library=_library;
@property(readonly, nonatomic) unsigned long long libraryID; // @synthesize libraryID=_libraryID;
@property(readonly, nonatomic) long long artworkType; // @synthesize artworkType=_artworkType;
- (void).cxx_destruct;
- (id)description;
- (_Bool)isEqual:(id)arg1;
- (unsigned long long)hash;
@property(readonly, nonatomic) unsigned long long mediaType;
- (id)initWithML3Library:(id)arg1 identifier:(unsigned long long)arg2 artworkType:(long long)arg3;
- (id)initWithLibrary:(id)arg1 identifier:(unsigned long long)arg2 artworkType:(long long)arg3;
- (id)init;

@end

@interface MPMediaLibraryArtwork : NSObject
{
    NSArray *_validSizes;
    MPMediaLibraryArtworkRequest *_artworkRequest;
    ML3Artwork *_artwork;
}

+ (void)cancelLoadingArtworkForRequest:(id)arg1;
+ (void)loadArtworkForRequest:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
+ (id)existingArtworkWithRequest:(id)arg1;
+ (_Bool)artworkExistsForRequest:(id)arg1;
@property(retain, nonatomic) ML3Artwork *artwork; // @synthesize artwork=_artwork;
@property(nonatomic) __weak MPMediaLibraryArtworkRequest *artworkRequest; // @synthesize artworkRequest=_artworkRequest;
@property(retain, nonatomic) NSArray *validSizes; // @synthesize validSizes=_validSizes;
- (void).cxx_destruct;
- (id)imageFileURLForSize:(struct CGSize)arg1;
@property(readonly, nonatomic) NSURL *originalFileURL;
- (_Bool)isEqual:(id)arg1;
- (unsigned long long)hash;

@end

@interface MPHomeSharingRentalTracker : NSObject
{
    NSObject<OS_dispatch_queue> *_rentalTrackerQueue;
    NSMutableDictionary *_rentals;
}

+ (id)sharedInstance;
- (void).cxx_destruct;
- (void)_saveRentals;
- (void)removeAllRentalsForDatabaseID:(id)arg1;
- (void)removeRentalWithItemID:(unsigned long long)arg1;
- (void)addRentalWithItemID:(unsigned long long)arg1 databaseID:(id)arg2;
- (id)_init;
- (id)init;

@end

@interface MPHomeSharingErrorResolver : MPAVErrorResolver <SSAuthorizationRequestDelegate>
{
    unsigned long long _accountID;
    MPHomeSharingML3DataProvider *_dataProvider;
    NSError *_error;
    NSURL *_keybagURL;
    SSAuthorizationRequest *_request;
    NSData *_tokenData;
}

@property(retain, nonatomic) MPHomeSharingML3DataProvider *dataProvider; // @synthesize dataProvider=_dataProvider;
- (void).cxx_destruct;
- (_Bool)_errorIsFairPlayError:(id)arg1;
- (void)requestDidFinish:(id)arg1;
- (void)request:(id)arg1 didFailWithError:(id)arg2;
- (void)authorizationRequest:(id)arg1 didReceiveResponse:(id)arg2;
- (void)resolveError:(id)arg1;
- (void)dealloc;
- (id)initWithTokenData:(id)arg1 forAccountID:(unsigned long long)arg2 keybagURL:(id)arg3;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface MPRemoteCommandCenter : NSObject <MPRemoteCommandDelegate>
{
    NSMutableArray *_activeCommands;
    NSObject<OS_dispatch_queue> *_serialQueue;
    void *_mediaRemoteCommandHandler;
    _Bool _scheduledSupportedCommandsChangedNotification;
    _Bool _canBeNowPlayingApplication;
    MPRemoteCommand *_pauseCommand;
    MPRemoteCommand *_playCommand;
    MPRemoteCommand *_stopCommand;
    MPRemoteCommand *_togglePlayPauseCommand;
    MPRemoteCommand *_nextTrackCommand;
    MPRemoteCommand *_previousTrackCommand;
    MPSkipIntervalCommand *_skipForwardCommand;
    MPSkipIntervalCommand *_skipBackwardCommand;
    MPRemoteCommand *_seekForwardCommand;
    MPRemoteCommand *_seekBackwardCommand;
    MPRatingCommand *_ratingCommand;
    MPChangePlaybackRateCommand *_changePlaybackRateCommand;
    MPFeedbackCommand *_likeCommand;
    MPFeedbackCommand *_dislikeCommand;
    MPFeedbackCommand *_bookmarkCommand;
    MPRemoteCommand *_changePlaybackPositionCommand;
    MPChangeRepeatModeCommand *_changeRepeatModeCommand;
    MPChangeShuffleModeCommand *_changeShuffleModeCommand;
    MPRemoteCommand *_specialSeekForwardCommand;
    MPRemoteCommand *_specialSeekBackwardCommand;
    MPPurchaseCommand *_buyTrackCommand;
    MPPurchaseCommand *_buyAlbumCommand;
    MPPurchaseCommand *_preOrderAlbumCommand;
    MPPurchaseCommand *_cancelDownloadCommand;
    MPRemoteCommand *_advanceShuffleModeCommand;
    MPRemoteCommand *_advanceRepeatModeCommand;
    MPRemoteCommand *_createRadioStationCommand;
    MPRemoteCommand *_setPlaybackQueueCommand;
}

+ (id)sharedCommandCenter;
- (void).cxx_destruct;
- (void)_commandTargetsDidChangeNotification:(id)arg1;
- (void)_scheduleSupportedCommandsChangedNotify;
- (void)_teardownNotifications;
- (void)_setupNotifications;
- (void)_teardownMediaRemoteControlClient;
- (void)_setupMediaRemoteControlClient;
- (id)_createRemoteCommandWithConcreteClass:(Class)arg1 mediaRemoteType:(unsigned int)arg2;
- (id)_activeCommands;
- (void)_teardownMediaRemoteCommandHandler;
- (void)_setupMediaRemoteCommandHandler;
- (id)setPlaybackQueueCommand;
- (id)createRadioStationCommand;
- (id)advanceRepeatModeCommand;
- (id)advanceShuffleModeCommand;
- (id)cancelDownloadCommand;
- (id)preOrderAlbumCommand;
- (id)buyAlbumCommand;
- (id)buyTrackCommand;
- (id)specialSeekBackwardCommand;
- (id)specialSeekForwardCommand;
- (id)changeShuffleModeCommand;
- (id)changeRepeatModeCommand;
- (id)changePlaybackPositionCommand;
@property(readonly, nonatomic) MPFeedbackCommand *bookmarkCommand;
@property(readonly, nonatomic) MPFeedbackCommand *dislikeCommand;
@property(readonly, nonatomic) MPFeedbackCommand *likeCommand;
@property(readonly, nonatomic) MPChangePlaybackRateCommand *changePlaybackRateCommand;
@property(readonly, nonatomic) MPRatingCommand *ratingCommand;
@property(readonly, nonatomic) MPRemoteCommand *seekBackwardCommand;
@property(readonly, nonatomic) MPRemoteCommand *seekForwardCommand;
@property(readonly, nonatomic) MPSkipIntervalCommand *skipBackwardCommand;
@property(readonly, nonatomic) MPSkipIntervalCommand *skipForwardCommand;
@property(readonly, nonatomic) MPRemoteCommand *previousTrackCommand;
@property(readonly, nonatomic) MPRemoteCommand *nextTrackCommand;
@property(readonly, nonatomic) MPRemoteCommand *togglePlayPauseCommand;
@property(readonly, nonatomic) MPRemoteCommand *stopCommand;
@property(readonly, nonatomic) MPRemoteCommand *playCommand;
@property(readonly, nonatomic) MPRemoteCommand *pauseCommand;
- (void)_pushMediaRemoteCommand:(unsigned int)arg1 withOptions:(struct __CFDictionary *)arg2 completion:(CDUnknownBlockType)arg3;
- (id)_pushMediaRemoteCommand:(unsigned int)arg1 withOptions:(struct __CFDictionary *)arg2;
- (struct __CFArray *)_copySupportedCommands;
- (void)remoteCommandDidMutatePropagatableProperty:(id)arg1;
- (void)dealloc;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface MPHomeSharingRentalErrorResolver : MPAVErrorResolver <SSRequestDelegate>
{
    unsigned long long _accountID;
    MPHomeSharingML3DataProvider *_dataProvider;
    NSError *_error;
    unsigned long long _itemID;
    unsigned long long _homeSharingID;
    unsigned long long _rentalID;
    SSRentalCheckoutRequest *_request;
}

@property(readonly, nonatomic) unsigned long long itemID; // @synthesize itemID=_itemID;
@property(retain, nonatomic) MPHomeSharingML3DataProvider *dataProvider; // @synthesize dataProvider=_dataProvider;
- (void).cxx_destruct;
- (_Bool)_errorIsFairPlayError:(id)arg1;
- (void)requestDidFinish:(id)arg1;
- (void)request:(id)arg1 didFailWithError:(id)arg2;
- (void)resolveError:(id)arg1;
- (void)dealloc;
- (id)initWithItemID:(unsigned long long)arg1 homeSharingID:(unsigned long long)arg2 rentalID:(unsigned long long)arg3 accountID:(unsigned long long)arg4;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface MPCloudAssetDownloadSessionIdentifier : NSObject <NSCopying>
{
    NSNumber *_storeID;
    NSNumber *_persistentID;
}

+ (id)identifierForContext:(id)arg1;
@property(copy, nonatomic) NSNumber *persistentID; // @synthesize persistentID=_persistentID;
@property(copy, nonatomic) NSNumber *storeID; // @synthesize storeID=_storeID;
- (void).cxx_destruct;
- (id)description;
- (_Bool)isEqual:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)initWithContext:(id)arg1;

@end

@interface MPAudioAndSubtitlesController : UIViewController <UITableViewDataSource, UITableViewDelegate>
{
    MPAVItem *_avItem;
    id <MPAudioAndSubtitlesControllerDelegate> _delegate;
    UITableView *_tableView;
    _Bool _hasAudio;
    _Bool _hasSubtitles;
    MPAlternateTrack *_originalAudioTrack;
    MPAlternateTrack *_originalSubtitleTrack;
    MPAlternateTrack *_newAudioTrack;
    MPAlternateTrack *_newSubtitleTrack;
}

@property(nonatomic) __weak id <MPAudioAndSubtitlesControllerDelegate> delegate; // @synthesize delegate=_delegate;
- (void).cxx_destruct;
- (id)_trackAtIndexPath:(id)arg1;
- (void)_applyChanges;
- (void)_doneButtonTapped:(id)arg1;
- (void)tableView:(id)arg1 willDisplayHeaderView:(id)arg2 forSection:(long long)arg3;
- (void)tableView:(id)arg1 willDisplayCell:(id)arg2 forRowAtIndexPath:(id)arg3;
- (void)tableView:(id)arg1 didSelectRowAtIndexPath:(id)arg2;
- (id)tableView:(id)arg1 cellForRowAtIndexPath:(id)arg2;
- (id)tableView:(id)arg1 titleForHeaderInSection:(long long)arg2;
- (long long)tableView:(id)arg1 numberOfRowsInSection:(long long)arg2;
- (long long)numberOfSectionsInTableView:(id)arg1;
- (void)loadView;
- (void)dealloc;
- (id)initWithAVItem:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface MPAudioVideoRoutingTableViewCellLayoutManager : UITableViewCellLayoutManager
{
    struct UIEdgeInsets imageViewEdgeInsets;
}

@property(nonatomic) struct UIEdgeInsets imageViewEdgeInsets; // @synthesize imageViewEdgeInsets;
- (void)layoutSubviewsOfCell:(id)arg1;

@end

@interface MPAudioVideoRoutingTableViewController : UITableViewController <MPAVRoutingControllerDelegate>
{
    int _airPlayPasswordAlertDidAppearToken;
    _Bool _airPlayPasswordAlertDidAppearTokenIsValid;
    int _airPlayPasswordAlertDidCancelToken;
    MPAVRoutingController *_routingController;
    unsigned long long _avItemType;
    _Bool _displayMirroringRoutes;
    NSArray *_displayedRoutes;
    _Bool _wirelessDisplayCapableRouteIsPicked;
    _Bool _wirelessDisplayRouteIsPendingAsPicked;
}

+ (id)routesPreferringMirroring;
@property(readonly, nonatomic) MPAVRoutingController *routingController; // @synthesize routingController=_routingController;
- (void).cxx_destruct;
- (_Bool)_wirelessDisplayCapableRouteIsPicked;
- (id)_pickedRoute;
- (id)_effectivePickedRouteReturningActualPickedRouteType:(long long *)arg1;
- (id)_displayedRoutes;
- (id)_availableRoutes;
- (void)_mirroringSwitchValueDidChange:(id)arg1;
- (void)_debugButtonAction:(id)arg1;
- (void)tableView:(id)arg1 didSelectRowAtIndexPath:(id)arg2;
- (id)tableView:(id)arg1 willSelectRowAtIndexPath:(id)arg2;
- (id)tableView:(id)arg1 cellForRowAtIndexPath:(id)arg2;
- (long long)tableView:(id)arg1 numberOfRowsInSection:(long long)arg2;
- (void)viewDidAppear:(_Bool)arg1;
- (void)routingControllerAvailableRoutesDidChange:(id)arg1;
- (void)dealloc;
- (id)initWithType:(unsigned long long)arg1 displayMirroringRoutes:(_Bool)arg2;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface MPPlaceholderAVItem : MPAVItem
{
}

- (_Bool)supportsSkip;
- (void)loadAssetAndPlayerItem;
- (_Bool)isValidPlayerSubstituteForItem:(id)arg1;

@end

@interface MPAudioVideoRoutingViewController : UIViewController
{
    UINavigationController *_navigationController;
    MPAudioVideoRoutingTableViewController *_tableViewController;
    id <MPAudioVideoRoutingViewControllerDelegate> _delegate;
}

+ (_Bool)hasWirelessDisplayRoutes;
@property(nonatomic) __weak id <MPAudioVideoRoutingViewControllerDelegate> delegate; // @synthesize delegate=_delegate;
- (void).cxx_destruct;
- (void)_doneAction:(id)arg1;
- (void)viewDidLoad;
- (id)init;

@end

@interface MPCloudController : NSObject
{
    NSObject<HSCloudAvailability> *_cloudAvailabilityController;
    _Bool _isUpdateInProgress;
    int _preferencesChangedNotifyToken;
    _Bool _preferencesChangedNotifyTokenIsValid;
    NSObject<OS_dispatch_queue> *_queue;
    _Bool _isInitialImport;
    _Bool _isCloudEnabled;
    _Bool _jaliscoGeniusEnabled;
    HSCloudClient *_cloudClient;
}

+ (void)migrateCellularDataPreferencesIfNeeded;
+ (_Bool)isMediaApplication;
+ (id)sharedCloudController;
@property(readonly, nonatomic, getter=isJaliscoGeniusEnabled) _Bool jaliscoGeniusEnabled; // @synthesize jaliscoGeniusEnabled=_jaliscoGeniusEnabled;
@property(readonly, nonatomic) HSCloudClient *cloudClient; // @synthesize cloudClient=_cloudClient;
@property(readonly, nonatomic) _Bool isCloudEnabled; // @synthesize isCloudEnabled=_isCloudEnabled;
- (void).cxx_destruct;
- (void)_initializeUpdateInProgressState;
- (void)acceptJaliscGeniusTermsAndConditionsVersion:(long long)arg1 withCompletionHandler:(CDUnknownBlockType)arg2;
- (void)loadJaliscoGeniusTermsAndConditionsWithCompletionHandler:(CDUnknownBlockType)arg1;
@property(readonly, nonatomic) _Bool enablingJaliscoGeniusRequiresTerms;
- (void)uploadItemProperties;
- (void)setItemProperties:(id)arg1 forPurchaseHistoryID:(unsigned long long)arg2;
- (void)resignActive;
- (void)loadUpdateProgressWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)loadGeniusItemsForSagaID:(unsigned long long)arg1 completionHandler:(CDUnknownBlockType)arg2;
@property(readonly, nonatomic) _Bool isUpdateInProgress; // @synthesize isUpdateInProgress=_isUpdateInProgress;
@property(readonly, nonatomic) _Bool isInitialImport; // @synthesize isInitialImport=_isInitialImport;
@property(readonly, nonatomic) _Bool isGeniusEnabled;
@property(readonly, nonatomic) _Bool hasCloudLockerAccount;
@property(readonly, nonatomic) _Bool hasPurchaseHistoryAccount;
- (void)becomeActiveAndWaitUntilDone:(_Bool)arg1;
- (void)becomeActive;
- (void)incrementItemProperty:(id)arg1 forSagaID:(unsigned long long)arg2;
- (void)setItemProperties:(id)arg1 forSagaID:(unsigned long long)arg2;
- (void)removePlaylistWithSagaID:(unsigned long long)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)savePlaylist:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)addGeniusPlaylistWithPersistentID:(unsigned long long)arg1 name:(id)arg2 seedItemSagaIDs:(id)arg3 itemSagaIDs:(id)arg4 completionHandler:(CDUnknownBlockType)arg5;
- (void)addPlaylistWithPersistentID:(unsigned long long)arg1 name:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;
@property(readonly, nonatomic) _Bool canShowCloudVideo;
@property(readonly, nonatomic) _Bool canShowCloudMusic;
@property(readonly, nonatomic) _Bool canDefaultMediaLibraryShowCloudContent;
@property(readonly, nonatomic) _Bool canShowCloudDownloadButtons;
- (_Bool)shouldProhibitActionsForCurrentNetworkConditions;
- (_Bool)isCellularDataRestricted;
- (_Bool)hasProperNetworkConditionsToPlayMedia;
- (void)isCellularDataRestrictedDidChangeNotification:(id)arg1;
- (void)canShowCloudTracksDidChangeNotification:(id)arg1;
- (void)canShowCloudDownloadButtonsDidChangeNotification:(id)arg1;
- (void)dealloc;
- (id)init;

@end

@interface MPItemDownloadSession : NSObject
{
    AVAsset *_AVAsset;
    float _percentComplete;
    int _sessionState;
    MPItemDownloadProperties *_downloadProperties;
    SSDownloadHandlerSession *_downloadSession;
    NSError *_sessionError;
}

@property(nonatomic) int sessionState; // @synthesize sessionState=_sessionState;
@property(retain, nonatomic) NSError *sessionError; // @synthesize sessionError=_sessionError;
@property(nonatomic) float percentComplete; // @synthesize percentComplete=_percentComplete;
@property(retain, nonatomic) SSDownloadHandlerSession *downloadSession; // @synthesize downloadSession=_downloadSession;
@property(nonatomic) AVAsset *AVAsset; // @synthesize AVAsset=_AVAsset;
@property(retain, nonatomic) MPItemDownloadProperties *downloadProperties; // @synthesize downloadProperties=_downloadProperties;
- (void).cxx_destruct;
- (id)description;
- (void)snapshotProgressForItem:(id)arg1;
- (void)reloadNetworkConstraints;
- (_Bool)isNetworkConstrainedForNetworkType:(long long)arg1;
- (id)initWithItemDownloadProperties:(id)arg1;

@end

@interface MPItemDownloadProperties : NSObject <MPStoreDownloadManagerObserver, NSCopying>
{
    long long _assetFileSize;
    NSURL *_destinationURL;
    SSDownload *_download;
    _Bool _downloadExists;
    NSString *_downloadIdentifier;
    long long _downloadSizeLimit;
    unsigned long long _downloadToken;
    NSMutableSet *_downloadTokenCompletionHandlers;
    NSArray *_sinfs;
    NSURL *_sourceURL;
}

@property(readonly, nonatomic) NSURL *sourceURL; // @synthesize sourceURL=_sourceURL;
@property(nonatomic) unsigned long long downloadToken; // @synthesize downloadToken=_downloadToken;
@property(readonly, nonatomic) long long downloadSizeLimit; // @synthesize downloadSizeLimit=_downloadSizeLimit;
@property(readonly, nonatomic) NSString *downloadIdentifier; // @synthesize downloadIdentifier=_downloadIdentifier;
@property(readonly, nonatomic) _Bool downloadExists; // @synthesize downloadExists=_downloadExists;
@property(readonly, nonatomic) NSURL *destinationURL; // @synthesize destinationURL=_destinationURL;
@property(readonly, nonatomic) long long assetFileSize; // @synthesize assetFileSize=_assetFileSize;
- (void).cxx_destruct;
- (void)_reloadNetworkConstraints;
- (void)_attemptToFindDownloadTokenForPossibleDownloads:(id)arg1;
- (id)newAVAssetOptionsWithDownloadStyle:(long long)arg1;
- (void)acquireDownloadTokenWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)downloadManager:(id)arg1 downloadDidProgress:(id)arg2;
- (void)downloadManager:(id)arg1 didAddDownloads:(id)arg2 removeDownloads:(id)arg3;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (_Bool)isEqual:(id)arg1;
@property(readonly) unsigned long long hash;
@property(readonly, copy) NSString *description;
- (void)dealloc;
- (id)initWithContext:(id)arg1;
- (id)initWithDownloadIdentifier:(long long)arg1;
- (id)initWithDownload:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly) Class superclass;

@end

@interface MPQueuePlayer : NSObject <MPAVRoutingControllerDelegate>
{
    NSObject<OS_dispatch_queue> *_accessQueue;
    MPAVRoutingController *_routingController;
    AVPlayerItem *_currentItem;
    CDStruct_1b6d18a9 _currentTime;
    _Bool _isExternalPlaybackActive;
    _Bool _pausedForPlaybackQueueTransaction;
    MPAVRoute *_lastPickedRoute;
    CDUnknownBlockType _playbackQueueCommitHandler;
    long long _playbackQueueTransactionCount;
    AVQueuePlayer *_player;
    NSMutableArray *_queuedOperations;
    float _rate;
    float _rateBeforePlaybackQueueTransaction;
    _Bool _routeDidChangeDuringPlaybackQueueTransaction;
    long long _status;
    long long _defaultItemEQPresetType;
    _Bool _outputObscuredDueToInsufficientExternalProtection;
}

@property(nonatomic) long long defaultItemEQPresetType; // @synthesize defaultItemEQPresetType=_defaultItemEQPresetType;
@property(copy, nonatomic) CDUnknownBlockType playbackQueueCommitHandler; // @synthesize playbackQueueCommitHandler=_playbackQueueCommitHandler;
- (void).cxx_destruct;
- (void)routingControllerAvailableRoutesDidChange:(id)arg1;
- (float)_userVolume;
- (void)_setWantsVolumeChangesWhenPausedOrInactive:(_Bool)arg1;
- (void)_setUserVolume:(float)arg1;
- (void)_setStoppingFadeOutDuration:(float)arg1;
- (void)_setPreferredLanguageList:(id)arg1;
- (void)_setPreparesItemsForPlaybackAsynchronously:(_Bool)arg1;
- (void)_setExpectedAssetTypes:(id)arg1;
@property(copy, nonatomic) NSString *externalPlaybackVideoGravity;
- (void)_setEQPreset:(int)arg1;
@property(nonatomic) _Bool disallowsAMRAudio;
- (void)_setClientName:(id)arg1;
- (void)_setCALayerDestinationIsTVOut:(_Bool)arg1;
- (_Bool)_resumePlayback:(double)arg1 error:(id *)arg2;
- (_Bool)_CALayerDestinationIsTVOut;
@property(readonly, nonatomic) _Bool outputObscuredDueToInsufficientExternalProtection;
@property(readonly, nonatomic) id playerAVAudioSession;
@property(nonatomic) _Bool usesExternalPlaybackWhileExternalScreenIsActive;
@property(nonatomic) _Bool usesAudioOnlyModeForExternalPlayback;
@property(readonly, nonatomic) long long status;
@property(nonatomic) float rate;
- (void)setMediaSelectionCriteria:(id)arg1 forMediaCharacteristic:(id)arg2;
@property(nonatomic) _Bool allowsExternalPlayback;
@property(nonatomic) long long actionAtItemEnd;
- (void)seekToTime:(CDStruct_1b6d18a9)arg1 toleranceBefore:(CDStruct_1b6d18a9)arg2 toleranceAfter:(CDStruct_1b6d18a9)arg3;
- (void)seekToTime:(CDStruct_1b6d18a9)arg1;
- (void)setCurrentPlaybackQueueTransactionDisplayTime:(CDStruct_1b6d18a9)arg1;
@property(nonatomic, getter=isClosedCaptionDisplayEnabled) _Bool closedCaptionDisplayEnabled;
- (void)removeTimeObserver:(id)arg1;
- (void)removeItem:(id)arg1;
- (void)prepareItem:(id)arg1 withCompletionHandler:(CDUnknownBlockType)arg2;
@property(readonly, nonatomic) AVPlayer *_player;
- (void)play;
- (void)pause;
@property(readonly, nonatomic) NSArray *items;
@property(readonly, nonatomic, getter=isExternalPlaybackActive) _Bool externalPlaybackActive;
- (void)insertItem:(id)arg1 afterItem:(id)arg2;
@property(readonly, nonatomic) long long _externalProtectionStatus;
@property(readonly, nonatomic) NSError *error;
@property(readonly, nonatomic) long long externalPlaybackType;
- (CDStruct_1b6d18a9)currentTime;
@property(readonly, nonatomic) AVPlayerItem *currentItem;
- (void)commitPlaybackQueueTransaction;
@property(readonly, nonatomic) _Bool isPlaybackQueueTransactionActive;
- (void)beginPlaybackQueueTransactionAndPause:(_Bool)arg1;
- (void)advanceToNextItem;
- (id)addPeriodicTimeObserverForInterval:(CDStruct_1b6d18a9)arg1 queue:(id)arg2 usingBlock:(CDUnknownBlockType)arg3;
- (id)addBoundaryTimeObserverForTimes:(id)arg1 queue:(id)arg2 usingBlock:(CDUnknownBlockType)arg3;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (void)dealloc;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface MPDownloadManager : NSObject <SSDownloadManagerObserverPrivate>
{
    NSObject<OS_dispatch_queue> *_dispatchQueue;
    NSObject<OS_dispatch_queue> *_observerQueue;
    SSDownloadManager *_downloadManager;
    NSMutableDictionary *_downloadsByID;
    NSMutableDictionary *_downloadsByStoreItemID;
    struct __CFArray *_observers;
}

+ (id)mediaPlayerDownloadManager;
- (void).cxx_destruct;
- (void)_rebuildCacheIfNecessary;
- (void)_clearCache;
- (id)_copyObservers;
- (void)_applyBlockToObservers:(CDUnknownBlockType)arg1;
- (void)downloadManagerNetworkUsageDidChange:(id)arg1;
- (void)downloadManagerDownloadsDidChange:(id)arg1;
- (void)downloadManager:(id)arg1 downloadStatesDidChange:(id)arg2;
- (void)downloadManager:(id)arg1 downloadsDidChange:(id)arg2;
- (void)removeObserver:(id)arg1;
- (id)inProgressDownloadWithStoreItemID:(long long)arg1;
- (id)downloadWithIdentifier:(long long)arg1;
@property(readonly, nonatomic) NSArray *downloads;
- (void)cancelDownloads:(id)arg1 completionBlock:(CDUnknownBlockType)arg2;
- (void)addObserver:(id)arg1;
- (void)dealloc;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface MPMediaQueryNowPlayingItem : MPStoreAVItem
{
    NSCache *_cache;
}

+ (void)applyVolumeNormalizationWithSoundCheckEnabled:(_Bool)arg1 forQueuedItems:(id)arg2 currentQuery:(id)arg3;
- (void).cxx_destruct;
- (void)_updateBookmarkTimeIfNecessary:(double)arg1 isCheckpoint:(_Bool)arg2;
- (id)_newTimeMarkersForChapterType:(long long)arg1;
- (void)_handlePlaybackFinishedTime:(double)arg1 finishedByHittingEnd:(_Bool)arg2;
- (id)_chapterTitleForTime:(double)arg1;
- (void)_applyLoudnessInfo;
- (float)userRating;
- (_Bool)useEmbeddedChapterData;
- (id)urlTimeMarkers;
- (unsigned long long)type;
- (id)titlesForTime:(double)arg1;
- (_Bool)supportsRewindAndFastForward15Seconds;
- (long long)storeID;
- (void)setRating:(float)arg1;
- (void)setPlaybackStoppedTime:(double)arg1;
- (void)setPlaybackFinishedTime:(double)arg1;
- (void)setPlaybackCheckpointCurrentTime:(double)arg1;
- (void)setLoudnessInfoVolumeNormalization:(float)arg1;
- (void)setAlternateAudioTrackID:(int)arg1;
- (void)reevaluateType;
- (double)playbackCheckpointCurrentTime;
- (unsigned long long)persistentID;
- (void)notePlaybackFinishedByHittingEnd;
- (id)mainTitle;
- (_Bool)hasAlternatesForTypes:(unsigned long long)arg1;
- (void)handlePlaybackFinishedTime:(double)arg1 finishedByHittingEnd:(_Bool)arg2;
- (id)genre;
- (_Bool)allowsEQ;
- (long long)customAVEQPreset;
- (_Bool)isStreamable;
- (_Bool)isSupportedDefaultPlaybackSpeed:(unsigned long long)arg1;
- (_Bool)isAssetURLValid;
- (_Bool)isValidPlayerSubstituteForItem:(id)arg1;
- (_Bool)isCloudItem;
- (_Bool)isExplicitTrack;
- (double)durationFromExternalMetadata;
- (id)displayableText;
- (unsigned long long)discCount;
- (unsigned long long)discNumber;
- (id)copyrightText;
- (id)composer;
- (id)chapterTimeMarkers;
- (_Bool)canSeedGenius;
- (id)artworkTimeMarkers;
- (unsigned long long)albumTrackCount;
- (unsigned long long)albumTrackNumber;
- (id)albumArtist;
- (id)artist;
- (id)album;
- (id)description;
- (id)initWithMediaItem:(id)arg1 allowCloudDialogue:(_Bool)arg2;

@end

@interface MPNetworkPlayabilityMonitor : NSObject
{
    long long _effectiveNetworkTypeForCloudPlayback;
    double _lastAverageBitrate;
    long long _networkType;
    NSObject<OS_dispatch_queue> *_queue;
}

+ (id)sharedNetworkPlayabilityMonitor;
- (void).cxx_destruct;
- (void)_onQueueUpdateEffectiveNetworkTypesForPlayback;
- (long long)_onQueueEffectiveNetworkTypeForAverageBitrate:(double)arg1;
@property(readonly, nonatomic) long long networkType;
@property(readonly, nonatomic) double lastAverageBitrate;
@property(readonly, nonatomic) long long effectiveNetworkTypeForPlayback;
- (void)adjustEffectiveNetworkTypeUsingPreviouslyPlayedItem:(id)arg1;
- (void)_networkTypeDidChangeNotification:(id)arg1;
- (void)dealloc;
- (id)init;

@end

@interface MPStoreCompletionOffering : NSObject <NSCopying>
{
    long long _preferredStoreOfferVariant;
    MPStoreCompletionOfferResponse *_storeOfferResponse;
    MPMediaQuery *_localItemsQuery;
    MPStoreCollectionCompletionOffering *_collectionWithCompletionItemsOffering;
    long long _presentationStyle;
    NSURL *_storeURL;
}

+ (id)offeringWithResponse:(id)arg1 localItemsQuery:(id)arg2;
+ (long long)defaultOfferVariant;
+ (void)setDefaultOfferVariant:(long long)arg1;
@property(readonly, copy, nonatomic) NSURL *storeURL; // @synthesize storeURL=_storeURL;
@property(readonly, nonatomic) long long presentationStyle; // @synthesize presentationStyle=_presentationStyle;
- (void).cxx_destruct;
@property(readonly, nonatomic) MPStoreOfferMediaItemCollection *collectionWithCompletionItems;
@property(nonatomic) long long preferredStoreOfferVariant;
- (void)_loadOfferingData;
- (id)copyByInvalidatingCalculatedContent;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)initWithResponse:(id)arg1 localItemsQuery:(id)arg2;

@end

@interface MPStoreCollectionCompletionOffering : NSObject
{
    MPMediaQuery *_localItemsQuery;
    long long _preferredStoreOfferVariant;
    MPStoreOfferMediaItemCollection *_offeredCollection;
    MPStoreOfferMediaItemCollection *_mergedCollection;
}

@property(readonly, nonatomic) MPStoreOfferMediaItemCollection *mergedCollection; // @synthesize mergedCollection=_mergedCollection;
@property(readonly, nonatomic) MPStoreOfferMediaItemCollection *offeredCollection; // @synthesize offeredCollection=_offeredCollection;
@property(readonly, nonatomic) long long preferredStoreOfferVariant; // @synthesize preferredStoreOfferVariant=_preferredStoreOfferVariant;
- (void).cxx_destruct;
@property(readonly, nonatomic) NSArray *localItems;
@property(readonly, nonatomic) MPStoreOfferMediaItemCollection *itemsWithCompletionsCollection;
- (id)initWithOfferedCollection:(id)arg1 localItemsQuery:(id)arg2 preferredStoreOfferVariant:(long long)arg3;

@end

@interface MPStoreCompletionOfferingLookupItem : NSObject
{
    _Bool _wantsArtwork;
    MPMediaQuery *_albumItemsQuery;
    unsigned long long _tokenID;
    CDUnknownBlockType _responseBlock;
    NSNumber *_storeLookupID;
}

+ (id)storeLookupIDForAlbumItemsQuery:(id)arg1;
@property(readonly, nonatomic) NSNumber *storeLookupID; // @synthesize storeLookupID=_storeLookupID;
@property(readonly, nonatomic) _Bool wantsArtwork; // @synthesize wantsArtwork=_wantsArtwork;
@property(readonly, copy, nonatomic) CDUnknownBlockType responseBlock; // @synthesize responseBlock=_responseBlock;
@property(readonly, nonatomic) unsigned long long tokenID; // @synthesize tokenID=_tokenID;
@property(readonly, nonatomic) MPMediaQuery *albumItemsQuery; // @synthesize albumItemsQuery=_albumItemsQuery;
- (void).cxx_destruct;
- (id)_specificationForArtworkSizesToRequest;
- (id)newLookupRequest;
- (id)lookupRequestForAlbumWithRepresentativeItem:(id)arg1;
- (id)lookupRequestForStorePlaylistIdentifier:(id)arg1;
@property(readonly, nonatomic) NSString *storeLookupIDString;
- (id)initWithAlbumItemsQuery:(id)arg1 tokenID:(long long)arg2 wantsArtwork:(_Bool)arg3 responseBlock:(CDUnknownBlockType)arg4;

@end

@interface MPStoreCompletionOfferingController : NSObject <MCProfileConnectionObserver>
{
    NSCache *_offeringCache;
    NSMutableDictionary *_lookupItemsByStoreLookupID;
    NSMutableDictionary *_lookupItemsByTokenID;
    unsigned long long _nextTokenID;
    NSObject<OS_dispatch_queue> *_queue;
}

+ (_Bool)_isCmcEnabled;
+ (void)_getIsCMCDisabled:(_Bool *)arg1 disabledReason:(id *)arg2;
+ (void)setWantsArtwork:(_Bool)arg1;
+ (id)storeOfferingController;
- (void).cxx_destruct;
- (void)_onQueueClearCache;
- (void)_onQueueSetCachedCompletionOffering:(id)arg1 forStoreLookupID:(id)arg2;
- (id)_onQueueCompletionOfferingForAlbumItemsQuery:(id)arg1;
- (id)_onQueueStartCompletionOfferingLookupForAlbumItemsQuery:(id)arg1 responseBlock:(CDUnknownBlockType)arg2;
- (void)_lookupCompletedWithResponse:(id)arg1 lookupItem:(id)arg2 error:(id)arg3;
- (void)_onQueuePostLookupCompletedForLookupItem:(id)arg1 offering:(id)arg2 error:(id)arg3;
- (void)_onQueueCancelCompletionOfferingLookupTokenID:(unsigned long long)arg1;
- (void)_onQueueRemoveLookupItemsForStoreLookupID:(id)arg1;
- (void)_onQueueRemoveLookupItem:(id)arg1;
- (id)_onQueueGetInsertedLookupItemForAlbumItemsQuery:(id)arg1 requestAlreadyIssued:(_Bool *)arg2 responseBlock:(CDUnknownBlockType)arg3;
- (void)_dumpCache;
- (unsigned long long)startCompletionOfferingLookupForAlbumItemsQuery:(id)arg1 responseBlock:(CDUnknownBlockType)arg2;
- (void)cancelCompletionOfferingLookup:(unsigned long long)arg1;
- (id)completionOfferingForAlbumItemsQuery:(id)arg1;
- (id)_sanitizedQuery:(id)arg1;
- (void)profileConnectionDidReceiveRestrictionChangedNotification:(id)arg1 userInfo:(id)arg2;
- (void)profileConnectionDidReceiveEffectiveSettingsChangedNotification:(id)arg1 userInfo:(id)arg2;
- (void)_storeAccountsDidChangeNotification:(id)arg1;
- (void)_defaultMediaLibraryDidChangeNotification:(id)arg1;
- (void)dealloc;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface MPStoreOfferMediaItem : MPNondurableMediaItem <NSSecureCoding, NSCopying>
{
    NSDictionary *_lookupCollectionPropertyValues;
    NSNumber *_itemID;
    long long _preferredStoreOfferVariant;
    MPStoreOfferContentRating *_contentRating;
    MPStoreOfferMediaItemArtworkDescriptor *_offerArtworkDescriptor;
    long long _offerArtworkDescriptorOnceToken;
    id _pid;
    id _discNumber;
    id _trackNumber;
    id _title;
}

+ (id)mediaItemsByRemovingRestrictedContentFromMediaItems:(id)arg1;
+ (id)mediaItemsByMergingStoreOfferMediaItems:(id)arg1 localItems:(id)arg2;
+ (_Bool)canRequestStoreOfferForLocalMediaItems:(id)arg1;
+ (_Bool)canMergeStoreOfferWithLocalMediaItems:(id)arg1;
+ (_Bool)canFilterByProperty:(id)arg1;
+ (_Bool)supportsSecureCoding;
+ (id)mediaItemsWithStoreLookupCollectionPropertyValues:(id)arg1 preferredStoreOfferVariant:(long long)arg2;
+ (id)defaultPropertyValues;
+ (id)preferredAssetDictionaryInOfferDictionary:(id)arg1;
+ (id)offerDictionaryWithPreferredAssetDictionaryInItemResponseDictionary:(id)arg1;
+ (id)offerDictionariesForLookupCollectionPropertyValues:(id)arg1 itemID:(id)arg2;
+ (id)offerArtworkDescriptorForLookupCollectionPropertyValues:(id)arg1 itemID:(id)arg2;
+ (id)mediaValueForStoreLookupCollectionPropertyValues:(id)arg1 itemID:(id)arg2 mediaProperty:(id)arg3;
+ (_Bool)hasMediaItemValuesForStoreLookupCollectionPropertyValues:(id)arg1 itemID:(id)arg2;
+ (id)contentRatingForCollectionPropertyValues:(id)arg1 itemID:(id)arg2;
+ (id)localRepresentativeItemPropertyForMediaProperty:(id)arg1;
+ (id)collectionLookupKeyForMediaProperty:(id)arg1;
+ (id)itemLookupKeyForMediaProperty:(id)arg1;
+ (id)offerLookupKeyForItemMediaProperty:(id)arg1;
+ (id)assetLookupKeyForItemMediaProperty:(id)arg1;
- (void).cxx_destruct;
- (id)_lookupOfferDictionaries;
- (id)offerArtworkDescriptor;
- (long long)preferredStoreOfferVariant;
- (id)buyOfferForVariant:(long long)arg1;
- (_Bool)isDownloadable;
- (_Bool)_offeredItemAlreadyExists;
- (id)valueForProperty:(id)arg1;
- (_Bool)setValue:(id)arg1 forProperty:(id)arg2;
- (unsigned long long)albumTrackNumber;
- (unsigned long long)discNumber;
- (id)title;
- (unsigned long long)persistentID;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (id)mediaLibrary;
- (id)description;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)initWithLookupLookupCollectionPropertyValues:(id)arg1 preferredStoreOfferVariant:(long long)arg2 itemID:(id)arg3;
- (id)screenshotArtworkCatalog;

@end

@interface MPStoreOfferMediaItemCollection : MPMediaItemCollection
{
    MPStoreCompletionOfferResponse *_storeOfferResponse;
    NSArray *_unmergedStoreMediaItems;
    MPMediaQuery *_localItemsQuery;
    MPMediaItemCollection *_localCollection;
    _Bool _hasHiddenRestrictedContent;
    long long _preferredStoreOfferVariant;
    MPStoreOfferContentRating *_collectionContentRating;
}

+ (id)defaultPropertyValues;
+ (id)albumOrderedChildItemIDsForLookupCollectionPropertyValues:(id)arg1;
+ (long long)offerPassTypeForLookupCollectionPropertyValues:(id)arg1;
+ (id)offerDictionariesForLookupCollectionPropertyValues:(id)arg1;
+ (id)contentRatingForCollectionPropertyValues:(id)arg1;
+ (id)mediaValueForStoreLookupCollectionPropertyValues:(id)arg1 mediaProperty:(id)arg2;
+ (id)collectionLookupKeyForMediaProperty:(id)arg1;
- (void).cxx_destruct;
- (void)_loadLocalCollection;
- (id)_lookupOfferDictionaries;
- (_Bool)hasPurchasableStoreOfferItemsForVariant:(long long)arg1;
- (_Bool)hasDownloadableStoreOfferItemsForVariant:(long long)arg1;
- (_Bool)_hasRestrictedContent;
@property(readonly, nonatomic) _Bool isCollectionOfferPresentable;
- (_Bool)isCheaperToPurchaseIndividualItems;
@property(readonly, nonatomic) NSArray *itemsByRemovingLocalItems;
- (long long)countOfItemsByRemovingLocalItems;
@property(readonly, nonatomic) NSArray *itemsByRemovingStoreOffers;
- (id)buyOfferForVariant:(long long)arg1;
- (_Bool)_offeredItemAlreadyExists;
- (id)title;
- (id)valuesForProperties:(id)arg1;
- (id)valueForProperty:(id)arg1;
- (unsigned long long)persistentID;
- (id)mediaLibrary;
- (long long)preferredStoreOfferVariant;
- (_Bool)isDownloadable;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (id)description;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)copyByOverlayingMediaItemsWithItemsQuery:(id)arg1 preferredStoreOfferVariant:(long long)arg2;
- (id)initWithStoreOfferResponse:(id)arg1 preferredStoreOfferVariant:(long long)arg2;
- (id)initWithStoreOfferResponse:(id)arg1 preferredStoreOfferVariant:(long long)arg2 offerMediaItems:(id)arg3 localItemsQuery:(id)arg4;
- (_Bool)_checkIsUsableOffer;

// Remaining properties
@property(readonly, nonatomic) NSArray *items;

@end

@interface MPAVBoundaryTimeObserverInfo : NSObject
{
    CDUnknownBlockType _block;
    NSObject<OS_dispatch_queue> *_queue;
    NSArray *_times;
}

@property(readonly, nonatomic) NSArray *times; // @synthesize times=_times;
@property(readonly, nonatomic) NSObject<OS_dispatch_queue> *queue; // @synthesize queue=_queue;
@property(readonly, copy, nonatomic) CDUnknownBlockType block; // @synthesize block=_block;
- (void).cxx_destruct;
- (id)initWithTimes:(id)arg1 queue:(id)arg2 block:(CDUnknownBlockType)arg3;

@end

@interface MPStoreOffer : NSObject
{
    NSDictionary *_offerDictionary;
    MPStoreOffer *_regularPriceOffer;
    NSDictionary *_mediaAssetDictionary;
    unsigned long long _entityPersistentID;
    unsigned long long _entityType;
    NSString *_entityTitle;
    long long _passType;
}

+ (long long)buyTypeForOfferDictionary:(id)arg1 regularPriceOffer:(id)arg2;
+ (id)_priceForOfferDictionary:(id)arg1;
+ (long long)bestOfferVariantInOfferDictionaries:(id)arg1 withPreferredVariant:(long long)arg2;
+ (void)getBuyOfferDictionary:(id *)arg1 regularPriceOfferDictionary:(id *)arg2 inOfferDictionaries:(id)arg3 variant:(long long)arg4;
+ (void)getBuyOfferDictionary:(id *)arg1 regularPriceOfferDictionary:(id *)arg2 inOfferDictionaries:(id)arg3 variantString:(id)arg4;
+ (id)offerVariantResponseKeyForOfferVariant:(long long)arg1;
@property(readonly, nonatomic) long long passType; // @synthesize passType=_passType;
@property(readonly, copy, nonatomic) NSString *entityTitle; // @synthesize entityTitle=_entityTitle;
@property(readonly, nonatomic) unsigned long long entityType; // @synthesize entityType=_entityType;
@property(readonly, nonatomic) unsigned long long entityPersistentID; // @synthesize entityPersistentID=_entityPersistentID;
- (void).cxx_destruct;
- (id)storeOfferDictionary;
@property(readonly, nonatomic) double previewDuration;
@property(readonly, copy, nonatomic) NSURL *previewURL;
@property(readonly, nonatomic) unsigned long long downloadSize;
@property(readonly, copy, nonatomic) NSString *regularPriceDisplayPrice;
@property(readonly, nonatomic) float price;
@property(readonly, copy, nonatomic) NSString *displayPrice;
@property(readonly, nonatomic) _Bool requiresConfirmation;
@property(readonly, copy, nonatomic) NSString *actionDisplayTitle;
@property(readonly, copy, nonatomic) NSString *displayTitle;
@property(readonly, copy, nonatomic) NSString *buyParameters;
- (id)buyURL;
- (_Bool)_isBuy;
@property(readonly, nonatomic) long long buyType;
- (id)initWithStoreOfferDictionary:(id)arg1 regularPriceOfferDictionary:(id)arg2 passType:(long long)arg3 entityType:(unsigned long long)arg4 persistentID:(unsigned long long)arg5 title:(id)arg6;

@end

@interface MPSSLookupResponseTransformContext : NSObject
{
    MPMediaItem *_collectionRepresentativeItem;
}

@property(retain, nonatomic) MPMediaItem *collectionRepresentativeItem; // @synthesize collectionRepresentativeItem=_collectionRepresentativeItem;
- (void).cxx_destruct;
- (id)initWithCollectionRepresentativeItem:(id)arg1;

@end

@interface MPML3ErrorResolver : MPAVErrorResolver <SSRequestDelegate>
{
    MPMediaItem *_mediaItem;
    SSKeybagRequest *_request;
    NSError *_error;
}

@property(retain, nonatomic) NSError *error; // @synthesize error=_error;
@property(retain, nonatomic) SSKeybagRequest *request; // @synthesize request=_request;
@property(retain, nonatomic) MPMediaItem *mediaItem; // @synthesize mediaItem=_mediaItem;
- (void).cxx_destruct;
- (void)requestDidFinish:(id)arg1;
- (void)request:(id)arg1 didFailWithError:(id)arg2;
- (void)resolveError:(id)arg1;
- (void)dealloc;
- (id)initWithMediaItem:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface MPUbiquitousPlaybackPositionController : NSObject
{
    _Bool _databaseHasBookmarkableContents;
    _Bool _isServiceActive;
    _Bool _externallyActive;
    _Bool _beganUsingPlaybackPositionMetadata;
    _Bool _applicationBecomingActive;
    NSObject<OS_dispatch_queue> *_queue;
    NSObject<OS_dispatch_queue> *_serviceQueue;
    SBCPlaybackPositionSyncService *_uppServiceProxy;
    SBCPlaybackPositionDomain *_uppDomain;
}

+ (id)sharedUbiquitousPlaybackPositionController;
@property(readonly, nonatomic) _Bool applicationBecomingActive; // @synthesize applicationBecomingActive=_applicationBecomingActive;
@property(nonatomic, getter=isServiceActive) _Bool beganUsingPlaybackPositionMetadata; // @synthesize beganUsingPlaybackPositionMetadata=_beganUsingPlaybackPositionMetadata;
@property(retain, nonatomic) SBCPlaybackPositionDomain *uppDomain; // @synthesize uppDomain=_uppDomain;
@property(retain, nonatomic) SBCPlaybackPositionSyncService *uppServiceProxy; // @synthesize uppServiceProxy=_uppServiceProxy;
@property(readonly, retain, nonatomic) NSObject<OS_dispatch_queue> *serviceQueue; // @synthesize serviceQueue=_serviceQueue;
@property(readonly, retain, nonatomic) NSObject<OS_dispatch_queue> *queue; // @synthesize queue=_queue;
@property(nonatomic, getter=isServiceActive) _Bool serviceActive; // @synthesize serviceActive=_isServiceActive;
- (void).cxx_destruct;
- (void)_onServiceQueue_updateBoomkarkabilityState;
- (void)_onServiceQueue_setDatabaseHasBookmarkableContents:(_Bool)arg1;
- (void)_onServiceQueue_updateActiveServiceIfNeeded;
- (void)_onServiceQueue_becomeActiveService;
- (void)_onServiceQueue_resignActiveService;
- (id)_onServiceQueue_connectedUPPServiceProxy;
- (_Bool)_onQueue_isEnabled;
- (_Bool)_onQueue_shouldBeActive;
- (id)_playbackPositionEntityWithValuesFromMusicLibraryTrackPersistentID:(long long)arg1;
@property(nonatomic) _Bool databaseHasBookmarkableContents; // @synthesize databaseHasBookmarkableContents=_databaseHasBookmarkableContents;
@property(nonatomic) _Bool externallyActive; // @synthesize externallyActive=_externallyActive;
- (void)noteChangedPlaybackPositionMetadataForTrackPersistentID:(long long)arg1 isCheckpoint:(_Bool)arg2;
- (void)_mediaLibraryDidChangeNotification:(id)arg1;
- (void)_defaultMediaLibraryDidChangeNotification:(id)arg1;
- (void)_applicationDidEnterForegroundNotification:(id)arg1;
- (void)_applicationWillEnterForegroundNotification:(id)arg1;
- (void)_applicationDidEnterBackgroundNotification:(id)arg1;
- (void)dealloc;
- (void)beginUsingPlaybackPositionMetadata;
- (id)init;

@end

@interface MPStoreOfferContentRating : NSObject <NSCoding>
{
    NSDictionary *_dictionary;
    long long _ratingLevel;
    NSString *_ratingDescription;
    NSString *_ratingLabel;
    unsigned long long _ratingSystem;
}

+ (unsigned long long)ratingSystemFromString:(id)arg1;
+ (_Bool)supportsSecureCoding;
@property(nonatomic) unsigned long long ratingSystem; // @synthesize ratingSystem=_ratingSystem;
@property(copy, nonatomic) NSString *ratingLabel; // @synthesize ratingLabel=_ratingLabel;
@property(copy, nonatomic) NSString *ratingDescription; // @synthesize ratingDescription=_ratingDescription;
@property(nonatomic) long long ratingLevel; // @synthesize ratingLevel=_ratingLevel;
- (void).cxx_destruct;
@property(readonly, nonatomic) id mediaPropertyContentRatingValue;
- (_Bool)_isRatingSystemForTV:(unsigned long long)arg1;
- (_Bool)_isRatingSystemForMusic:(unsigned long long)arg1;
- (_Bool)_isRatingSystemForMovies:(unsigned long long)arg1;
- (_Bool)_isRatingSystemForApps:(unsigned long long)arg1;
- (id)valueForProperty:(id)arg1;
@property(readonly, nonatomic, getter=isRestrictedPurchase) _Bool restrictedPurchase;
@property(readonly, nonatomic, getter=isRestrictedContent) _Bool restrictedContent;
@property(readonly, nonatomic, getter=isExplicitContent) _Bool explicitContent;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithDictionary:(id)arg1;

@end

@interface MPContentItem : NSObject
{
    struct _MRContentItem *_mrContentItem;
    MPMediaItemArtwork *_artwork;
}

- (void).cxx_destruct;
- (void)_postItemChangedNotification;
- (struct _MRContentItem *)_mediaRemoteContentItem;
@property(nonatomic) float playbackProgress;
@property(nonatomic, getter=isPlayable) _Bool playable;
@property(nonatomic, getter=isContainer) _Bool container;
@property(retain, nonatomic) MPMediaItemArtwork *artwork;
@property(copy, nonatomic) NSString *subtitle;
@property(copy, nonatomic) NSString *title;
@property(readonly, copy, nonatomic) NSString *identifier;
- (id)description;
- (void)dealloc;
- (id)_initWithMediaRemoteContentItem:(struct _MRContentItem *)arg1;
- (id)initWithIdentifier:(id)arg1;

@end

@interface MPStoreOfferMediaItemArtwork : MPConcreteMediaItemArtwork
{
}

- (id)_artworkDescriptor;
- (_Bool)isEqual:(id)arg1;
- (unsigned long long)hash;

@end

@interface MPMediaItemArray : NSObject <NSSecureCoding>
{
    Class _itemArrayCoderPIDDataCodingClass;
    NSArray *_items;
}

+ (_Bool)supportsSecureCoding;
@property(readonly, retain, nonatomic) NSArray *items; // @synthesize items=_items;
- (void).cxx_destruct;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithItems:(id)arg1;

@end

@interface MPRadioLibrary : NSObject
{
}

+ (id)defaultRadioLibrary;
- (id)_radioModel;
- (void)_radioModelDidChangeNotification:(id)arg1;
- (void)addStationBasedOnTrackIDs:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (id)stationWithIdentifier:(long long)arg1;
@property(readonly, nonatomic) NSArray *stations;
@property(readonly, nonatomic) unsigned long long stationCount;
@property(readonly, nonatomic) _Bool isEnabled;
- (void)dealloc;
- (id)init;

@end

@interface MPHomeSharingArtworkDataSource : MPAbstractNetworkArtworkDataSource
{
    HSHomeSharingLibrary *_library;
}

@property(retain, nonatomic) HSHomeSharingLibrary *library; // @synthesize library=_library;
- (void).cxx_destruct;
- (void)loadRepresentationForArtworkCatalog:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (id)requestForCatalog:(id)arg1 size:(struct CGSize)arg2;
- (id)supportedSizesForCatalog:(id)arg1;
- (_Bool)shouldLookForLargerRepresentationsWhenBestRepresentationIsUnavailable;
- (id)cacheKeyForCatalog:(id)arg1 size:(struct CGSize)arg2;
- (_Bool)areRepresentationsAvailableForCatalog:(id)arg1;

@end

@interface _MPHomeSharingArtworkCacheKey : NSObject
{
    unsigned long long _persistentID;
    struct CGSize _size;
}

@property(readonly, nonatomic) struct CGSize size; // @synthesize size=_size;
@property(readonly, nonatomic) unsigned long long persistentID; // @synthesize persistentID=_persistentID;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (id)initWithPersistentID:(unsigned long long)arg1 size:(struct CGSize)arg2;

@end

@interface MPRadioStation : NSObject <NSCopying>
{
    RadioStation *_station;
}

+ (_Bool)supportsSecureCoding;
- (void).cxx_destruct;
@property(readonly, nonatomic, getter=_station) RadioStation *_station;
@property(readonly, nonatomic) long long uniqueIdentifier;
@property(readonly, nonatomic) NSString *localizedName;
@property(readonly, nonatomic) NSString *localizedDescription;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (_Bool)isEqual:(id)arg1;
- (id)initWithStation:(id)arg1;

@end

@interface MPRemoteCommand : NSObject
{
    id <MPRemoteCommandDelegate> _delegate;
    NSObject<OS_dispatch_queue> *_serialQueue;
    NSMutableArray *_targetInvocations;
    unsigned int _mediaRemoteCommandType;
    _Bool _enabled;
}

@property(nonatomic, getter=isEnabled) _Bool enabled; // @synthesize enabled=_enabled;
- (void).cxx_destruct;
- (void)_addTarget:(id)arg1 action:(SEL)arg2 retainTarget:(_Bool)arg3;
- (id)_mediaRemoteCommandInfoOptions;
- (void)notifyPropagatablePropertyChanged;
- (struct _MRMediaRemoteCommandInfo *)createCommandInfoRepresentation;
- (void)invokeCommandWithEvent:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (_Bool)hasTargets;
- (unsigned int)mediaRemoteCommandType;
- (_Bool)isSupported;
- (void)setDelegate:(id)arg1;
- (id)delegate;
- (id)addTargetWithHandler:(CDUnknownBlockType)arg1;
- (void)removeTarget:(id)arg1;
- (void)removeTarget:(id)arg1 action:(SEL)arg2;
- (void)addTarget:(id)arg1 action:(SEL)arg2;
- (id)initWithMediaRemoteCommandType:(unsigned int)arg1;
- (id)init;

@end

@interface MPSkipIntervalCommand : MPRemoteCommand
{
    NSArray *_preferredIntervals;
}

@property(copy, nonatomic) NSArray *preferredIntervals; // @synthesize preferredIntervals=_preferredIntervals;
- (void).cxx_destruct;
- (id)_mediaRemoteCommandInfoOptions;

@end

@interface MPFeedbackCommand : MPRemoteCommand
{
    NSString *_localizedShortTitle;
    _Bool _active;
    NSString *_localizedTitle;
}

@property(copy, nonatomic) NSString *localizedTitle; // @synthesize localizedTitle=_localizedTitle;
@property(nonatomic, getter=isActive) _Bool active; // @synthesize active=_active;
- (void).cxx_destruct;
- (id)_mediaRemoteCommandInfoOptions;
@property(copy, nonatomic) NSString *localizedShortTitle;

@end

@interface MPRatingCommand : MPRemoteCommand
{
    float _minimumRating;
    float _maximumRating;
}

@property(nonatomic) float maximumRating; // @synthesize maximumRating=_maximumRating;
@property(nonatomic) float minimumRating; // @synthesize minimumRating=_minimumRating;
- (id)_mediaRemoteCommandInfoOptions;

@end

@interface MPChangePlaybackRateCommand : MPRemoteCommand
{
    NSArray *_supportedPlaybackRates;
}

@property(copy, nonatomic) NSArray *supportedPlaybackRates; // @synthesize supportedPlaybackRates=_supportedPlaybackRates;
- (void).cxx_destruct;
- (id)_mediaRemoteCommandInfoOptions;

@end

@interface MPPurchaseCommand : MPRemoteCommand
{
    long long _state;
}

@property(nonatomic) long long state; // @synthesize state=_state;
- (id)_mediaRemoteCommandInfoOptions;

@end

@interface MPChangeRepeatModeCommand : MPRemoteCommand
{
    unsigned long long _currentRepeatType;
}

@property(nonatomic) unsigned long long currentRepeatType; // @synthesize currentRepeatType=_currentRepeatType;
- (id)_mediaRemoteCommandInfoOptions;

@end

@interface MPChangeShuffleModeCommand : MPRemoteCommand
{
    unsigned long long _currentShuffleType;
}

@property(nonatomic) unsigned long long currentShuffleType; // @synthesize currentShuffleType=_currentShuffleType;
- (id)_mediaRemoteCommandInfoOptions;

@end

@interface MPSkipTrackCommand : MPRemoteCommand
{
    _Bool _adPreventsDisplay;
    CDStruct_dcf4dde6 _skipLimit;
}

@property(nonatomic) CDStruct_dcf4dde6 skipLimit; // @synthesize skipLimit=_skipLimit;
@property(nonatomic) _Bool adPreventsDisplay; // @synthesize adPreventsDisplay=_adPreventsDisplay;
- (id)_mediaRemoteCommandInfoOptions;

@end

@interface _MPWeakInvocationTarget : MPWeakRef
{
}

- (id)methodSignatureForSelector:(SEL)arg1;
- (void)forwardInvocation:(id)arg1;

@end

@interface _MPRemoteCommandTarget : NSObject
{
    CDUnknownBlockType _block;
}

@property(copy, nonatomic) CDUnknownBlockType block; // @synthesize block=_block;
- (void).cxx_destruct;
- (long long)invokeWithRemoteCommandEvent:(id)arg1;
- (id)initWithTargetBlock:(CDUnknownBlockType)arg1;

@end

@interface MPCloudAssetDownloadController : NSObject
{
    NSObject<OS_dispatch_queue> *_accessQueue;
    NSMutableDictionary *_downloadSessions;
    _Bool _downloadSessionsPaused;
    MPCloudAssetDownloadSessionIdentifier *_prioritizedDownloadSessionIdentifier;
}

+ (id)sharedAssetDownloadController;
- (void).cxx_destruct;
- (id)_urlConnectionRequestForContext:(id)arg1;
- (void)_stopDownloadsBasedOnCurrentNetworkIfNeeded;
- (void)_resumedPausedDownloadSessionsForCompletedSessionWithIdentifier:(id)arg1;
- (void)_removeNotificationObserversForDownloadSession:(id)arg1;
- (void)_prioritizeDownloadSession:(id)arg1;
- (id)_newAVAssetForPurchaseResponseDictionary:(id)arg1 context:(id)arg2 preferredAssetFlavor:(id)arg3;
- (id)_newAVAssetForContext:(id)arg1;
- (id)_newAssetForExistingDownloadSession:(id)arg1 context:(id)arg2;
- (_Bool)_downloadExistsWithSessionIdentifier:(id)arg1;
- (id)_lowBitrateCachedAssetDestinationDirectory;
- (id)_downloadKeyCookieWithValue:(id)arg1 URL:(id)arg2;
- (_Bool)_canPlayCachedAssetAtPath:(id)arg1;
- (void)_cancelDownloadSessionWithIdentifier:(id)arg1;
- (id)_cachedAssetDestinationDirectory;
- (void)_cancelDownloadSessionIfInappropriateForCurrentNetwork:(id)arg1;
- (void)cancelSessionForContext:(id)arg1;
- (void)resumeAllDownloadSessions;
- (void)prioritizeDownloadSessionForContext:(id)arg1;
- (void)pauseAllDownloadSessions;
- (id)_assetForExistingDownloadSession:(id)arg1 context:(id)arg2 downloadSessionID:(id)arg3 wantingHighQuality:(_Bool)arg4 returningShouldAttemptFurtherLoad:(out _Bool *)arg5;
- (id)assetForContext:(id)arg1;
- (void)_networkTypeChangedNotification:(id)arg1;
- (void)_matchCellularDataRestrictedDidChangeNotification:(id)arg1;
- (void)_downloadSucceededNotification:(id)arg1;
- (void)_downloadFileSizeAvailableNotification:(id)arg1;
- (void)_downloadFailedNotification:(id)arg1;
- (void)dealloc;
- (id)init;

@end

@interface MPUsageStatistics : NSObject
{
    NSObject<OS_dispatch_queue> *_queue;
    NSString *_domain;
    NSString *_lastAggregateStatisticsDisplayCountKey;
    double _lastAggregateStatisticsDisplayCountTime;
}

+ (id)sharedStatistics;
- (void).cxx_destruct;
- (void)incrementViewDisplayCountForKey:(id)arg1;
- (void)incrementViewDisplayCountForViewController:(id)arg1;
- (id)domain;
- (void)setAggregateStatisticsDomain:(id)arg1;
- (id)init;

@end

@interface MPStoreCompletionOfferResponse : NSObject
{
    NSObject<OS_dispatch_queue> *_queue;
    NSMutableDictionary *_itemsByVariant;
    NSDictionary *_responseDictionary;
}

@property(readonly, nonatomic) NSDictionary *responseDictionary; // @synthesize responseDictionary=_responseDictionary;
- (void).cxx_destruct;
- (id)mediaItemsWithStoreOfferVariant:(long long)arg1;
- (id)initWithResponseDictionary:(id)arg1;

@end

@interface MPPPropertyPredicate : PBCodable <NSCopying>
{
    int _comparisonType;
    NSString *_property;
    MPPMediaPredicateValue *_value;
    struct {
        unsigned int comparisonType:1;
    } _has;
}

@property(nonatomic) int comparisonType; // @synthesize comparisonType=_comparisonType;
@property(retain, nonatomic) MPPMediaPredicateValue *value; // @synthesize value=_value;
@property(retain, nonatomic) NSString *property; // @synthesize property=_property;
- (void).cxx_destruct;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)copyTo:(id)arg1;
- (void)writeTo:(id)arg1;
- (_Bool)readFrom:(id)arg1;
- (id)dictionaryRepresentation;
- (id)description;
@property(nonatomic) _Bool hasComparisonType;
@property(readonly, nonatomic) _Bool hasValue;
@property(readonly, nonatomic) _Bool hasProperty;
- (void)dealloc;

@end

@interface MPAVRoutingSheet : UIView <MPAVRoutingViewControllerDelegate>
{
    UIWindow *_presentationWindow;
    UIView *_backgroundView;
    UIView *_controlsView;
    UIButton *_cancelButton;
    MPAVRoutingViewController *_routingViewController;
    CDUnknownBlockType _completionHandler;
}

- (void).cxx_destruct;
- (struct CGSize)_maxRoutingViewSize;
- (struct CGRect)_controlsViewFrame;
- (struct CGRect)_cancelButtonFrame;
- (struct CGRect)_routingViewFrame;
- (void)_updateRoutingSheetFrame;
- (void)_animateControls:(_Bool)arg1 withCompletionHandler:(CDUnknownBlockType)arg2;
- (void)_cancelButtonAction:(id)arg1;
- (void)routingViewControllerDidShowAirPlayDebugScreen:(id)arg1;
- (void)routingViewControllerDidUpdateContents:(id)arg1;
- (void)routingViewController:(id)arg1 didPickRoute:(id)arg2;
- (void)dismiss;
- (void)showInView:(id)arg1 withCompletionHandler:(CDUnknownBlockType)arg2;
- (void)tintColorDidChange;
- (void)layoutSubviews;
@property(nonatomic, setter=setAVItemType:) unsigned long long avItemType;
- (void)dealloc;
- (id)initWithFrame:(struct CGRect)arg1;
- (id)initWithAVItemType:(unsigned long long)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface _MPAVRoutingSheetSecureWindow : UIWindow
{
}

+ (_Bool)_isSecure;

@end

@interface MPInlineVideoController : NSObject <MPVolumeControllerDelegate, MPVideoControllerProtocol, MPSwipableViewDelegate, MPVideoOverlayDelegate, MPTransportControlsTarget, UIAlertViewDelegate, UIPopoverControllerDelegate>
{
    id _delegate;
    MPAVItem *_item;
    MPAVController *_player;
    long long _activeOverlayUserEvents;
    _Bool _automaticallyHandleTransportControls;
    _Bool _allowsDetailScrubbing;
    _Bool _allowsWirelessPlayback;
    _Bool _alwaysAllowHidingControlsOverlay;
    int _artworkImageStyle;
    _Bool _attemptAutoPlayWhenControlsHidden;
    MPVideoBackgroundView *_backgroundView;
    UIColor *_backstopColor;
    _Bool _canAnimateControlsOverlay;
    _Bool _canShowControlsOverlay;
    _Bool _controlsOverlayVisible;
    unsigned long long _desiredParts;
    unsigned long long _disabledParts;
    _Bool _disableAutoRotation;
    _Bool _disableControlsAutohide;
    _Bool _displayPlaybackErrorAlerts;
    _Bool _inlinePlaybackUsesTVOut;
    unsigned long long _itemTypeOverride;
    UIImage *_posterImage;
    unsigned long long _scaleMode;
    _Bool _TVOutEnabled;
    _Bool _TVOutEnabledMaster;
    _Bool _useHostedWindowWhenFullscreen;
    MPSwipableView *_view;
    MPVideoPlaybackOverlayView *_videoOverlayView;
    unsigned long long _visibleParts;
    long long _audioOverlayStyle;
    _Bool _navigationBarHidden;
    NSString *_playbackErrorDescription;
    long long _videoOverlayStyle;
    UIView *_advertisementView;
    UIAlertView *_alertSheet;
    UIWindow *_alternateTracksWindow;
    MPInlineAudioOverlay *_audioOverlayView;
    unsigned long long _backgroundTaskId;
    _Bool _batteryMonitoringWasEnabled;
    UINavigationController *_chaptersContainerController;
    MPVideoContainerView *_containerView;
    UITapGestureRecognizer *_doubleTapGestureRecognizer;
    MPInlineVideoFullscreenViewController *_fullscreenViewController;
    _Bool _fullscreenViewSizeIsExternallyManaged;
    UIWindow *_fullscreenWindow;
    _Bool _hasShownFirstVideoFrame;
    MPWeakTimer *_idleTimer;
    _Bool _inCloneMirrorMode;
    _Bool _isAnimatingOverlay;
    _Bool _isTransitioningFromFullscreen;
    _Bool _isTransitioningToFullscreen;
    UIActivityIndicatorView *_loadingIndicator;
    UIPinchGestureRecognizer *_pinchGestureRecognizer;
    MPAudioVideoRoutingPopoverController *_routePopoverController;
    unsigned long long _scaleModeOverride;
    _Bool _scheduledLoadingIndicator;
    UIView *_subtitlesView;
    _Bool _swallowNextTapGesture;
    UITapGestureRecognizer *_tapGestureRecognizer;
    MPTVOutWindow *_tvOutWindow;
    UIView *_videoBackgroundView;
    NSSet *_viewsToFade;
    _Bool _wantsOverlayVisibleWhenItemIsAvailable;
    _Bool _wasPlaying;
    UIWindow *_windowForDisablingAutorotation;
    UIWindow *_windowForFullscreenTransition;
    _Bool _shouldDestroyVideoSnapshot;
    MPVolumeController *_volumeController;
}

@property(nonatomic) long long audioOverlayStyle; // @synthesize audioOverlayStyle=_audioOverlayStyle;
@property(readonly, nonatomic) UIView *subtitlesView; // @synthesize subtitlesView=_subtitlesView;
@property(copy, nonatomic) NSString *playbackErrorDescription; // @synthesize playbackErrorDescription=_playbackErrorDescription;
@property(nonatomic) _Bool navigationBarHidden; // @synthesize navigationBarHidden=_navigationBarHidden;
@property(nonatomic) long long videoOverlayStyle; // @synthesize videoOverlayStyle=_videoOverlayStyle;
@property(readonly, nonatomic) UIView *advertisementView; // @synthesize advertisementView=_advertisementView;
@property(nonatomic) unsigned long long visibleParts; // @synthesize visibleParts=_visibleParts;
@property(nonatomic) _Bool TVOutEnabled; // @synthesize TVOutEnabled=_TVOutEnabled;
@property(retain, nonatomic) UIImage *posterImage; // @synthesize posterImage=_posterImage;
@property(nonatomic) unsigned long long itemTypeOverride; // @synthesize itemTypeOverride=_itemTypeOverride;
@property(nonatomic) _Bool inlinePlaybackUsesTVOut; // @synthesize inlinePlaybackUsesTVOut=_inlinePlaybackUsesTVOut;
@property(nonatomic) _Bool displayPlaybackErrorAlerts; // @synthesize displayPlaybackErrorAlerts=_displayPlaybackErrorAlerts;
@property(nonatomic) unsigned long long disabledParts; // @synthesize disabledParts=_disabledParts;
@property(nonatomic) _Bool disableAutoRotation; // @synthesize disableAutoRotation=_disableAutoRotation;
@property(nonatomic) unsigned long long desiredParts; // @synthesize desiredParts=_desiredParts;
@property(nonatomic) _Bool controlsOverlayVisible; // @synthesize controlsOverlayVisible=_controlsOverlayVisible;
@property(nonatomic) _Bool canShowControlsOverlay; // @synthesize canShowControlsOverlay=_canShowControlsOverlay;
@property(nonatomic) _Bool canAnimateControlsOverlay; // @synthesize canAnimateControlsOverlay=_canAnimateControlsOverlay;
@property(retain, nonatomic) UIColor *backstopColor; // @synthesize backstopColor=_backstopColor;
@property(readonly, nonatomic) UIView *backgroundView; // @synthesize backgroundView=_backgroundView;
@property(nonatomic) _Bool attemptAutoPlayWhenControlsHidden; // @synthesize attemptAutoPlayWhenControlsHidden=_attemptAutoPlayWhenControlsHidden;
@property(nonatomic) int artworkImageStyle; // @synthesize artworkImageStyle=_artworkImageStyle;
@property(nonatomic) _Bool alwaysAllowHidingControlsOverlay; // @synthesize alwaysAllowHidingControlsOverlay=_alwaysAllowHidingControlsOverlay;
@property(nonatomic) _Bool allowsWirelessPlayback; // @synthesize allowsWirelessPlayback=_allowsWirelessPlayback;
@property(nonatomic) _Bool allowsDetailScrubbing; // @synthesize allowsDetailScrubbing=_allowsDetailScrubbing;
@property(retain, nonatomic) MPAVItem *item; // @synthesize item=_item;
@property(retain, nonatomic) MPAVController *player; // @synthesize player=_player;
@property(nonatomic) _Bool automaticallyHandleTransportControls; // @synthesize automaticallyHandleTransportControls=_automaticallyHandleTransportControls;
@property(nonatomic) __weak id delegate; // @synthesize delegate=_delegate;
- (void).cxx_destruct;
- (void)volumeController:(id)arg1 volumeValueDidChange:(float)arg2;
- (void)_viewWasPinched:(id)arg1;
- (void)_viewWasTapped:(id)arg1;
- (_Bool)_useInlineControls;
- (void)_updateTVOutEnabled;
- (void)_updateProgressControlForItem:(id)arg1;
- (void)_updateIdleTimerDisabledFromPlaybackState:(unsigned long long)arg1;
- (void)_updateDoubleTapGestureRecognizer;
- (void)_updateDisableAirPlayMirroringDuringPlayback;
- (void)_updateBackgroundViewInformation;
- (void)_updateBackgroundViewConfiguration:(_Bool)arg1;
- (void)_updateAlwaysPlayWheneverPossible;
- (void)_unregisterForPlayerNotifications;
- (void)_transitionToFullscreenDidEnd;
- (void)_transitionToFullscreenAnimated:(_Bool)arg1;
- (void)_transitionFromFullscreenDidEnd;
- (void)_transitionFromFullscreenAnimated:(_Bool)arg1 fromDoneButton:(_Bool)arg2;
- (void)_transitionFromFullscreenAnimated:(_Bool)arg1;
- (void)_tearDownTVOutWindow;
- (void)_showVideoSnapshotView;
- (void)_showStillFrameIfNotAlreadyPlaying;
- (void)_showOverlayDidEnd:(_Bool)arg1;
- (void)_showOverlayAnimated:(_Bool)arg1 quickHide:(_Bool)arg2;
- (void)_showOverlayAnimated:(_Bool)arg1;
- (_Bool)_shouldShowDestinationPlaceholder;
- (void)_setupTVOutWindow;
- (void)_setupSubviews;
- (void)_scheduleLoadingIndicatorIfNeeded;
- (void)_resetOverlayIdleTimer:(double)arg1;
- (void)_resetOverlayIdleTimer;
- (void)_registerForPlayerNotifications;
- (void)_postViewControllerRequestsExitWithReason:(long long)arg1;
- (void)_postScaleModeDidChange;
- (_Bool)_overlayViewIsVisible;
- (void)_overlayIdleTimerFired:(id)arg1;
- (unsigned long long)_itemTypeWithActualTypePreference;
- (_Bool)_isAnimatingFullscreenTransition;
- (void)_hideOverlayDidEnd;
- (void)_hideOverlayAnimated:(_Bool)arg1;
- (void)_hideLoadingIndicator;
- (void)_flipToChaptersDidStop:(id)arg1 finished:(id)arg2 context:(void *)arg3;
- (void)_flipFromChaptersDidStop:(id)arg1 finished:(id)arg2 context:(void *)arg3;
- (void)_enableAirPlayVideoRoutesIfNecessary;
- (unsigned long long)_effectiveItemType;
- (void)_doneWithChapters:(id)arg1;
- (void)_destroyVideoSnapshotView;
- (void)_destroyVideoOverlayView;
- (void)_destroyAudioOverlayView;
- (void)_delayedUpdateBackgroundView;
- (void)_delayedShowLoadingIndicator;
- (_Bool)canShowQTAudioOnlyUI;
- (_Bool)_canEnableAirPlayVideoRoutes;
- (void)_cancelOverlayIdleTimer;
- (void)_validityChanged:(id)arg1;
- (void)_timedImageMetadataAvailable:(id)arg1;
- (void)_sizeDidChange:(id)arg1;
- (void)_screenDidDisconnect:(id)arg1;
- (void)_screenDidConnect:(id)arg1;
- (void)_scaleModeDidChange:(id)arg1;
- (void)_playbackStateChanged:(id)arg1;
- (void)_playbackError:(id)arg1;
- (void)_itemTypeAvailable:(id)arg1;
- (void)_isExternalPlaybackActiveDidChange:(id)arg1;
- (void)_effectiveScaleModeDidChange:(id)arg1;
- (void)_firstVideoFrameDisplayed:(id)arg1;
- (void)_durationAvailable:(id)arg1;
- (void)_bufferingStateChanged:(id)arg1;
- (void)_batteryStateDidChange:(id)arg1;
- (void)_availableRoutesChanged:(id)arg1;
- (void)_applicationDidBecomeActive:(id)arg1;
- (void)_applicationDidFinishSuspensionSnapshot:(id)arg1;
- (void)_applicationWillResignActive:(id)arg1;
- (void)_applicationWillEnterForeground:(id)arg1;
- (void)_applicationSuspended:(id)arg1;
- (void)_applicationResumedEventsOnly:(id)arg1;
- (void)popoverControllerDidDismissPopover:(id)arg1;
- (void)alertView:(id)arg1 clickedButtonAtIndex:(long long)arg2;
- (void)overlayTappedFullscreenButton:(id)arg1;
- (void)overlayTappedBackButton:(id)arg1;
- (void)overlay:(id)arg1 didEndUserEvent:(long long)arg2;
- (void)overlay:(id)arg1 didCancelUserEvent:(long long)arg2;
- (void)overlay:(id)arg1 didBeginUserEvent:(long long)arg2;
- (_Bool)transportControls:(id)arg1 tappedButtonPart:(unsigned long long)arg2;
- (void)swipableViewHadActivity:(id)arg1;
- (void)swipableView:(id)arg1 willMoveToWindow:(id)arg2;
- (void)swipableView:(id)arg1 didMoveToSuperview:(id)arg2;
- (void)setVideoSnapshotEnabled:(_Bool)arg1;
@property(readonly, nonatomic) UIView *fullscreenView;
- (void)fullscreenOverlayDidShow;
- (void)fullscreenOverlayDidHide;
- (void)fullscreenOverlayWillShowAnimated:(_Bool)arg1;
- (void)fullscreenOverlayWillHideAnimated:(_Bool)arg1;
@property(readonly, nonatomic) _Bool viewControllerWillRequestExit;
@property(readonly, retain, nonatomic) MPVideoView *videoView;
@property(readonly, retain, nonatomic) UIView<MPVideoOverlay> *videoOverlayView;
- (void)showAlternateTracksController:(id)arg1;
- (void)setVisibleParts:(unsigned long long)arg1 animate:(_Bool)arg2;
- (void)setUseHostedWindowWhenFullscreen:(_Bool)arg1;
- (void)setScaleModeOverride:(unsigned long long)arg1 animated:(_Bool)arg2;
@property(nonatomic) unsigned long long scaleMode; // @synthesize scaleMode=_scaleMode;
- (void)setFullscreen:(_Bool)arg1 animated:(_Bool)arg2;
@property(nonatomic, getter=isFullscreen) _Bool fullscreen;
@property(nonatomic) _Bool disableControlsAutohide;
- (void)setDesiredParts:(unsigned long long)arg1 animate:(_Bool)arg2;
- (void)setControlsOverlayVisible:(_Bool)arg1 animate:(_Bool)arg2 force:(_Bool)arg3;
- (void)setControlsOverlayVisible:(_Bool)arg1 animate:(_Bool)arg2;
- (void)setControlsNeedLayout;
- (void)setClosedCaptions:(id)arg1;
@property(nonatomic) _Bool autoPlayWhenLikelyToKeepUp;
- (void)prepareToDisplayVideo;
@property(readonly, nonatomic) unsigned int hostedWindowContextID;
@property(readonly, nonatomic) _UIHostedWindow *hostedWindow;
- (void)exitFullscreen;
- (void)displayVideoView;
- (_Bool)canHideOverlay:(_Bool)arg1;
@property(readonly, nonatomic) _Bool canChangeScaleMode;
- (void)setOwnsStatusBar:(_Bool)arg1;
@property(readonly, retain, nonatomic) UIView *view;
- (void)setOrientation:(long long)arg1 animate:(_Bool)arg2;
@property(nonatomic) long long orientation;
- (void)noteIgnoredChangeTypes:(unsigned long long)arg1;
- (void)clearWeakReferencesToObject:(id)arg1;
- (void)dealloc;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface MPFullScreenTransitionViewController : UIViewController
{
}

- (unsigned long long)supportedInterfaceOrientations;
- (_Bool)shouldAutorotate;

@end

@interface MPAlternateTracksContainerViewController : UIViewController
{
}

- (unsigned long long)supportedInterfaceOrientations;
- (_Bool)shouldAutorotate;

@end

@interface MPVideoContainerView : UIView
{
}

- (void)mpAddSubviewAndArrange:(id)arg1;

@end

@interface MPAdvertisementContainerView : UIView
{
}

- (id)hitTest:(struct CGPoint)arg1 withEvent:(id)arg2;

@end

@interface MPSubtitlesContainerView : UIView
{
}

- (id)hitTest:(struct CGPoint)arg1 withEvent:(id)arg2;

@end

@interface MPFullscreenWindow : UIWindow
{
}

- (_Bool)_canAffectStatusBarAppearance;

@end

@interface MPMediaLibraryArtworkDataSource : NSObject <MPArtworkDataSource>
{
    _Bool _canUseSurfaceBackedImages;
    NSCache *_fallbackCache;
    MPArtworkResizeUtility *_artworkResizeUtility;
}

@property(retain, nonatomic) MPArtworkResizeUtility *artworkResizeUtility; // @synthesize artworkResizeUtility=_artworkResizeUtility;
@property(retain, nonatomic) NSCache *fallbackCache; // @synthesize fallbackCache=_fallbackCache;
@property(nonatomic) _Bool canUseSurfaceBackedImages; // @synthesize canUseSurfaceBackedImages=_canUseSurfaceBackedImages;
- (void).cxx_destruct;
- (id)_resizeArtwork:(id)arg1 toSize:(struct CGSize)arg2 completionHandler:(CDUnknownBlockType)arg3;
- (id)_representationAtSize:(struct CGSize)arg1 forCatalog:(id)arg2;
- (_Bool)_isRepresentationSize:(struct CGSize)arg1 validForFittingSize:(struct CGSize)arg2;
- (_Bool)_isRepresentation:(id)arg1 validForCatalog:(id)arg2;
- (id)_cachedRepresentationForCatalog:(id)arg1;
- (void)_cacheRepresentation:(id)arg1 forCatalog:(id)arg2;
- (struct CGSize)_bestSizeForArtworkCatalog:(id)arg1;
- (void)cancelLoadingRepresentationForArtworkCatalog:(id)arg1;
- (void)loadRepresentationForArtworkCatalog:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (_Bool)isRepresentation:(id)arg1 bestRepresentationForArtworkCatalog:(id)arg2;
- (id)existingRepresentationForArtworkCatalog:(id)arg1;
- (_Bool)areRepresentationsForCatalog:(id)arg1 visuallyIdenticalToRepresentationsForCatalog:(id)arg2;
- (_Bool)areRepresentationsAvailableForCatalog:(id)arg1;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface _MPMediaLibraryArtworkDataSourceCacheKey : NSObject
{
    MPArtworkCatalog *_catalog;
    struct CGSize _representationSize;
}

@property(nonatomic) struct CGSize representationSize; // @synthesize representationSize=_representationSize;
@property(retain, nonatomic) MPArtworkCatalog *catalog; // @synthesize catalog=_catalog;
- (void).cxx_destruct;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (id)initWithArtworkCatalog:(id)arg1 representativeSize:(struct CGSize)arg2;

@end

@interface MPInlineVideoFullscreenViewController : UIViewController <MPSwipableViewDelegate, MPVolumeControllerDelegate, MPVideoOverlayDelegate, MPTransportControlsTarget>
{
    _Bool _disableTaps;
    UITapGestureRecognizer *_doubleTapGestureRecognizer;
    MPWeakTimer *_idleTimer;
    _Bool _isAnimatingOverlay;
    MPAVItem *_item;
    UIActivityIndicatorView *_loadingIndicator;
    MPInlineVideoController *_masterController;
    MPVideoPlaybackOverlayView *_overlayView;
    UIPinchGestureRecognizer *_pinchGestureRecognizer;
    _Bool _shouldForwardRotationEvents;
    MPSwipableView *_swipableView;
    UITapGestureRecognizer *_tapGestureRecognizer;
    long long _activeOverlayUserEvents;
    _Bool _statusBarWasHidden;
    MPVolumeController *_volumeController;
}

@property(retain, nonatomic) MPAVItem *item; // @synthesize item=_item;
@property(nonatomic) __weak MPInlineVideoController *masterController; // @synthesize masterController=_masterController;
- (void).cxx_destruct;
- (void)_viewWasPinched:(id)arg1;
- (void)_viewWasTapped:(id)arg1;
- (void)_showOverlayDidEnd;
- (void)_overlayIdleTimerFired;
- (void)_hideOverlayDidEnd;
- (void)_hideOverlayAnimated:(_Bool)arg1;
- (void)updateOverlayView;
- (void)showOverlayAnimated:(_Bool)arg1;
- (void)showLoadingIndicator;
- (void)showAlternateTracks;
- (void)resetOverlayIdleTimer;
- (void)prepareForTransitionFromFullscreen;
- (void)hideLoadingIndicator;
- (void)cancelOverlayIdleTimer;
- (void)volumeController:(id)arg1 volumeValueDidChange:(float)arg2;
- (void)overlayTappedFullscreenButton:(id)arg1;
- (void)overlayTappedBackButton:(id)arg1;
- (void)overlay:(id)arg1 didEndUserEvent:(long long)arg2;
- (void)overlay:(id)arg1 didCancelUserEvent:(long long)arg2;
- (void)overlay:(id)arg1 didBeginUserEvent:(long long)arg2;
- (_Bool)transportControls:(id)arg1 tappedButtonPart:(unsigned long long)arg2;
- (void)swipableViewHadActivity:(id)arg1;
- (void)viewWillDisappear:(_Bool)arg1;
- (void)viewWillAppear:(_Bool)arg1;
- (_Bool)prefersStatusBarHidden;
- (unsigned long long)supportedInterfaceOrientations;
- (_Bool)shouldAutorotate;
- (void)loadView;
- (void)viewWillTransitionToSize:(struct CGSize)arg1 withTransitionCoordinator:(id)arg2;
- (void)willRotateToInterfaceOrientation:(long long)arg1 duration:(double)arg2;
- (void)willAnimateRotationToInterfaceOrientation:(long long)arg1 duration:(double)arg2;
- (void)didRotateFromInterfaceOrientation:(long long)arg1;
- (void)dealloc;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface MPDetailScrubController : NSObject
{
    _Bool _didBeginTracking;
    _Bool _needsCommit;
    float _accumulatedDelta;
    struct CGPoint _previousLocationInView;
    struct CGPoint _beginLocationInView;
    struct CGPoint _lastCommittedLocationInView;
    float _currentValue;
    _Bool _detailedScrubbingEnabled;
    _Bool _isTracking;
    UIControl<MPDetailedScrubbing> *_scrubbingControl;
    id <MPDetailScrubControllerDelegate> _delegate;
    double _duration;
    double _scrubbingVerticalRange;
    long long _currentScrubSpeed;
}

@property(readonly, nonatomic) long long currentScrubSpeed; // @synthesize currentScrubSpeed=_currentScrubSpeed;
@property(readonly, nonatomic) _Bool isTracking; // @synthesize isTracking=_isTracking;
@property(nonatomic) _Bool detailedScrubbingEnabled; // @synthesize detailedScrubbingEnabled=_detailedScrubbingEnabled;
@property(nonatomic) double scrubbingVerticalRange; // @synthesize scrubbingVerticalRange=_scrubbingVerticalRange;
@property(nonatomic) double duration; // @synthesize duration=_duration;
@property(nonatomic) __weak id <MPDetailScrubControllerDelegate> delegate; // @synthesize delegate=_delegate;
@property(nonatomic) __weak UIControl<MPDetailedScrubbing> *scrubbingControl; // @synthesize scrubbingControl=_scrubbingControl;
- (void).cxx_destruct;
- (void)_commitValue:(float)arg1;
- (void)_endScrubbing;
- (void)_beginScrubbing;
- (float)_scaleForIdealValueForVerticalPosition:(double)arg1;
- (float)_minimumScale;
- (float)scaleForVerticalPosition:(double)arg1;
@property(readonly, nonatomic) _Bool durationAllowsForDetailedScrubbing;
- (void)cancelTrackingWithEvent:(id)arg1;
- (void)endTrackingWithTouch:(id)arg1 withEvent:(id)arg2;
- (_Bool)continueTrackingWithTouch:(id)arg1 withEvent:(id)arg2;
- (_Bool)beginTrackingWithTouch:(id)arg1 withEvent:(id)arg2;
- (id)init;
- (id)initWithScrubbingControl:(id)arg1;

@end

@interface MPUserNotification : NSObject
{
    NSObject<OS_dispatch_queue> *_accessQueue;
    NSObject<OS_dispatch_queue> *_callbackInvocationQueue;
    CDUnknownBlockType _willShowNotificationHandler;
    id strongSelf;
    _Bool _isShowing;
    struct __CFRunLoopSource *_runLoopSource;
    NSMutableArray *_showingCompletionHandlers;
    struct __CFUserNotification *_cfUserNotification;
}

+ (id)_userNotificationForCFUserNotification:(struct __CFUserNotification *)arg1;
+ (void)_setUserNotification:(id)arg1 forCFUserNotification:(struct __CFUserNotification *)arg2;
+ (id)_userNotificationConversionAccessQueue;
@property(readonly, nonatomic) struct __CFUserNotification *cfUserNotification; // @synthesize cfUserNotification=_cfUserNotification;
- (void).cxx_destruct;
- (void)_didReceiveResponseWithFlags:(unsigned long long)arg1;
- (void)_cancelSynchronously:(_Bool)arg1;
- (void)showWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)cancel;
@property(copy, nonatomic) CDUnknownBlockType willShowNotificationHandler;
- (void)dealloc;
- (id)initWithCFUserNotification:(struct __CFUserNotification *)arg1;
- (id)init;

@end

@interface MPLoggingUtility : NSObject
{
}

+ (void)debugLogForRadioPlaybackPerformanceWithFormat:(id)arg1;
+ (void)debugLogForMusicPlayerControllerWithFormat:(id)arg1;
+ (void)debugLogForDefaultsKey:(id)arg1 format:(id)arg2;
+ (void)debugLog:(id)arg1;

@end

@interface MPMediaEntityCache : NSObject
{
    id <MPMediaLibraryDataProviderPrivate> _mediaLibraryDataProvider;
    _Bool _mediaLibraryDataProviderRespondsToSupportsEntityChangeTrackingMethod;
    struct _opaque_pthread_rwlock_t {
        long long __sig;
        char __opaque[192];
    } _rwlock;
    NSObject<OS_dispatch_queue> *_queue;
    struct __CFDictionary *_concreteEntitiesByDataProviderEntityClass;
    NSMutableArray *_entityTemporaryReferences;
}

- (id).cxx_construct;
- (void).cxx_destruct;
- (void)_performWithSharedAccess:(CDUnknownBlockType)arg1;
- (void)_performWithExclusiveAccess:(CDUnknownBlockType)arg1;
- (void)_clearSomeGlobalEntityTemporaryReferences;
- (map_8037feab *)_entityMapForDataProviderEntityClass:(Class)arg1;
- (id)_entityWithIdentifier:(long long)arg1 mediaEntityType:(unsigned long long)arg2 collectionGroupingType:(long long)arg3 loadEntityBlock:(CDUnknownBlockType)arg4;
- (void)removeEntityWithIdentifier:(long long)arg1 dataProviderEntityClass:(Class)arg2;
- (void)updatePropertyValuesInEntityWithIdentifier:(long long)arg1 dataProviderEntityClass:(Class)arg2 deleted:(_Bool)arg3;
- (id)collectionWithIdentifier:(long long)arg1 grouping:(long long)arg2 loadEntityBlock:(CDUnknownBlockType)arg3;
- (id)itemWithIdentifier:(long long)arg1 loadEntityBlock:(CDUnknownBlockType)arg2;
- (id)initWithMediaLibraryDataProvider:(id)arg1;
- (id)init;

@end

@interface MPAbstractFullScreenVideoViewController : MPVideoViewController <MPSwipableViewDelegate>
{
    unsigned int _requestExitAfterHidingControls:1;
    unsigned int _rotateAfterHidingControls:1;
    unsigned int _showControlsAfterRotate:1;
    unsigned int _autoHidingForItemChange:1;
    unsigned int _scheduledAutoHide:1;
}

- (long long)_validInterfaceOrientation;
- (void)_hideOverlayWithAnimation:(_Bool)arg1 shouldUpdateAutohideFlag:(_Bool)arg2;
- (void)_hideOverlayWithAnimation:(_Bool)arg1;
- (void)_autohideControlsOverlay;
- (void)scheduleControlsOverlayAutohideAfterDelay:(double)arg1;
- (void)cancelControlsOverlayAutohide;
- (void)hideOverlayAnimated:(_Bool)arg1;
- (void)showOverlayAnimated:(_Bool)arg1;
- (void)transformVideoForInterfaceOrientation:(long long)arg1 animate:(_Bool)arg2;
- (void)_applicationDidBecomeActive:(id)arg1;
- (void)_resumedEventsOnlyNotification:(id)arg1;
- (void)videoView_playbackStateChangedNotification:(id)arg1;
- (void)videoView_bufferingStateChangedNotification:(id)arg1;
- (_Bool)transportControls:(id)arg1 releasedHeldButtonPart:(unsigned long long)arg2;
- (_Bool)transportControls:(id)arg1 heldButtonPart:(unsigned long long)arg2;
- (void)overlayDidEndScrubbing:(id)arg1;
- (void)overlayDidBeginScrubbing:(id)arg1;
- (void)swipableViewHadActivity:(id)arg1;
- (void)swipableView:(id)arg1 tappedWithCount:(unsigned long long)arg2 atLocation:(struct CGPoint)arg3;
- (_Bool)_shouldUseFullScreenLayoutInWindow:(id)arg1 parentViewController:(id)arg2;
- (void)viewWillDisappear:(_Bool)arg1;
- (void)viewDidAppear:(_Bool)arg1;
- (void)viewWillAppear:(_Bool)arg1;
- (void)loadView;
- (_Bool)transportControls:(id)arg1 tappedButtonPart:(unsigned long long)arg2;
- (void)setDisableControlsAutohide:(_Bool)arg1;
- (_Bool)canShowControlsOverlay;
- (void)setCanShowControlsOverlay:(_Bool)arg1;
- (void)setVisibleParts:(unsigned long long)arg1 animate:(_Bool)arg2;
- (void)setDisabledParts:(unsigned long long)arg1;
- (void)setDesiredParts:(unsigned long long)arg1 animate:(_Bool)arg2;
- (void)setControlsOverlayVisible:(_Bool)arg1 animate:(_Bool)arg2 force:(_Bool)arg3;
- (_Bool)controlsOverlayVisible;
- (_Bool)canHideOverlay:(_Bool)arg1;
- (void)displayVideoViewOnScreen;
- (id)newAlternateTracksTransition;
- (void)setPlayer:(id)arg1;
- (void)setOrientation:(long long)arg1 animate:(_Bool)arg2;
- (void)setItem:(id)arg1;
- (_Bool)canDisplayItem:(id)arg1 withInterfaceOrientation:(long long)arg2;
- (_Bool)forceScaleToFitInPortrait;
- (void)setInhibitOverlay:(_Bool)arg1;
- (_Bool)inhibitOverlay;
- (void)showOverlayIfNecessary;
- (void)dealloc;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface MPStoreOfferMediaItemArtworkDescriptor : NSObject
{
    long long _itemPersistentID;
    NSDictionary *_screenshotURLs;
    NSDictionary *_itemArtworkURLs;
    NSDictionary *_containerArtworkURLs;
    NSArray *_screenshotSizes;
    NSArray *_itemArtworkSizes;
    NSArray *_containerArtworkSizes;
    unsigned long long _hash;
    NSString *_cacheID;
}

@property(readonly, nonatomic) NSString *cacheID; // @synthesize cacheID=_cacheID;
- (void).cxx_destruct;
- (id)_sizeToURLDictionaryFromStoreDictionariesArray:(id)arg1;
- (id)_availableSizesForArtworkURLs:(id)arg1;
- (id)_preferredArtworkURLsForType:(long long)arg1;
- (id)availableSizesForArtworkOfType:(long long)arg1;
- (id)artworkURLForSize:(struct CGSize)arg1 type:(long long)arg2;
- (_Bool)isEqual:(id)arg1;
- (unsigned long long)hash;
- (id)initWithItemPersistentID:(long long)arg1 screenshotDictionaries:(id)arg2 itemArtworkDictionaries:(id)arg3 containerArtworkDictionaries:(id)arg4;

@end

@interface MPPPersistentIDsPredicate : PBCodable <NSCopying>
{
    struct {
        long long *list;
        unsigned long long count;
        unsigned long long size;
    } _persistentIDs;
    _Bool _shouldContain;
    struct {
        unsigned int shouldContain:1;
    } _has;
}

@property(nonatomic) _Bool shouldContain; // @synthesize shouldContain=_shouldContain;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)copyTo:(id)arg1;
- (void)writeTo:(id)arg1;
- (_Bool)readFrom:(id)arg1;
- (id)dictionaryRepresentation;
- (id)description;
- (void)setPersistentIDs:(long long *)arg1 count:(unsigned long long)arg2;
- (long long)persistentIDsAtIndex:(unsigned long long)arg1;
- (void)addPersistentIDs:(long long)arg1;
- (void)clearPersistentIDs;
@property(readonly, nonatomic) long long *persistentIDs;
@property(readonly, nonatomic) unsigned long long persistentIDsCount;
@property(nonatomic) _Bool hasShouldContain;
- (void)dealloc;

@end

@interface MPPMediaPredicateValue : PBCodable <NSCopying>
{
    double _doublePredicateValue;
    long long _integerPredicateValue;
    NSData *_bytesPredicateValue;
    float _floatPredicateValue;
    NSString *_stringPredicateValue;
    int _type;
    _Bool _boolPredicateValue;
    struct {
        unsigned int doublePredicateValue:1;
        unsigned int integerPredicateValue:1;
        unsigned int floatPredicateValue:1;
        unsigned int boolPredicateValue:1;
    } _has;
}

@property(retain, nonatomic) NSData *bytesPredicateValue; // @synthesize bytesPredicateValue=_bytesPredicateValue;
@property(retain, nonatomic) NSString *stringPredicateValue; // @synthesize stringPredicateValue=_stringPredicateValue;
@property(nonatomic) _Bool boolPredicateValue; // @synthesize boolPredicateValue=_boolPredicateValue;
@property(nonatomic) float floatPredicateValue; // @synthesize floatPredicateValue=_floatPredicateValue;
@property(nonatomic) double doublePredicateValue; // @synthesize doublePredicateValue=_doublePredicateValue;
@property(nonatomic) long long integerPredicateValue; // @synthesize integerPredicateValue=_integerPredicateValue;
@property(nonatomic) int type; // @synthesize type=_type;
- (void).cxx_destruct;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)copyTo:(id)arg1;
- (void)writeTo:(id)arg1;
- (_Bool)readFrom:(id)arg1;
- (id)dictionaryRepresentation;
- (id)description;
@property(readonly, nonatomic) _Bool hasBytesPredicateValue;
@property(readonly, nonatomic) _Bool hasStringPredicateValue;
@property(nonatomic) _Bool hasBoolPredicateValue;
@property(nonatomic) _Bool hasFloatPredicateValue;
@property(nonatomic) _Bool hasDoublePredicateValue;
@property(nonatomic) _Bool hasIntegerPredicateValue;
- (void)dealloc;

@end

@interface MPNowPlayingObserver : NSObject <MPStoreDownloadManagerObserver>
{
    NSObject<OS_dispatch_queue> *_accessQueue;
    UIImage *_currentArtworkImage;
    NSData *_currentArtworkData;
    _Bool _hasSeenAnyItem;
    NSMutableDictionary *_mediaItemCoalescedUpdateDateAccessedTimers;
    MPStoreDownload *_activeDownload;
    NSObject<OS_dispatch_queue> *_statusBarQueue;
    _Bool _scheduledNowPlayingInfoUpdate;
    _Bool _enabled;
    MPImageCache *_imageCache;
    MPAVController *_player;
}

@property(retain, nonatomic) MPAVController *player; // @synthesize player=_player;
@property(readonly, nonatomic) MPImageCache *imageCache; // @synthesize imageCache=_imageCache;
- (void).cxx_destruct;
- (void)_unregisterForNotificationsForPlayer:(id)arg1;
- (void)_setNowPlayingInfo:(id)arg1 forItem:(id)arg2;
- (_Bool)_reloadArtworkIfPossible;
- (void)_registerForNotificationsForPlayer:(id)arg1;
- (void)_prefetchArtworkForNextItem;
- (void)_postNowPlayingInfoForItem:(id)arg1;
- (void)_updateProgressForDownload:(id)arg1;
- (id)_storeDownloadForNowPlayingItemInArray:(id)arg1;
- (id)_activeDownloadForItemWithStoreID:(long long)arg1;
- (long long)_MPNowPlayingDownloadStateForDownload:(id)arg1;
- (_Bool)_itemNotificationIsRelevantToObservedPlayer:(id)arg1;
- (_Bool)_hasProperConditionsToLoadArtwork;
- (void)_coalescedUpdateLastUsedDateForCurrentItem;
- (void)_postNowPlayingInfo;
- (void)_setNeedsNowPlayingInfoUpdate;
- (void)_createNowPlayingInfoForItem:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)_timeDidJumpNotification:(id)arg1;
- (void)_repeatTypeDidChangeNotification:(id)arg1;
- (void)_rateDidChangeNotification:(id)arg1;
- (void)_playbackStateDidChangeNotification:(id)arg1;
- (void)_playbackErrorNotification:(id)arg1;
- (void)_mediaLibraryDisplayValuesDidChangeNotification:(id)arg1;
- (void)_itemDidFinishLoadingNotification:(id)arg1;
- (void)_itemDidChangeNotification:(id)arg1;
- (void)_crossedTimeMarkerNotification:(id)arg1;
- (void)_contentsDidChangeNotification:(id)arg1;
- (void)_bufferingStateDidChangeNotification:(id)arg1;
- (void)_avItemTitlesDidChangeNotification:(id)arg1;
- (void)_avItemIsExplicitDidChangeNotification:(id)arg1;
- (void)_avItemDurationDidChangeNotification:(id)arg1;
- (void)_avItemArtworkDidChangeNotification:(id)arg1;
- (void)downloadManager:(id)arg1 downloadPurchaseDidFinish:(id)arg2;
- (void)downloadManager:(id)arg1 downloadDidFinish:(id)arg2;
- (void)downloadManager:(id)arg1 downloadDidProgress:(id)arg2;
- (void)downloadManager:(id)arg1 didAddDownloads:(id)arg2 removeDownloads:(id)arg3;
@property(nonatomic, getter=isEnabled) _Bool enabled; // @synthesize enabled=_enabled;
- (void)dealloc;
- (id)initWithPlayer:(id)arg1;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface MPVideoPlaybackBackgroundView : UIView
{
    UIImageView *_imageView;
    UILabel *_titleLabel;
    UILabel *_subtitleLabel;
    struct UIEdgeInsets _edgeInsets;
    MPAVController *_player;
}

@property(retain, nonatomic) MPAVController *player; // @synthesize player=_player;
@property(nonatomic) struct UIEdgeInsets edgeInsets; // @synthesize edgeInsets=_edgeInsets;
- (void).cxx_destruct;
- (void)_updateDisplay;
- (id)_imageNamed:(id)arg1;
- (void)_videoViewDidMoveToWindow:(id)arg1;
- (void)_isExternalPlaybackActiveDidChange:(id)arg1;
- (void)_activeAudioRouteDidChange:(id)arg1;
- (void)layoutSubviews;
- (void)dealloc;
- (id)initWithFrame:(struct CGRect)arg1;

@end

@interface MPMediaQueryQueueFeeder : MPQueueFeeder <MPAVRoutingControllerDelegate>
{
    long long _ignoreShuffleTypeChangesCount;
    MPMediaQueryShuffledItems *_items;
    unsigned int _itemsChanged:1;
    MPMediaLibraryConnectionAssertion *_connectionAssertion;
    MPMediaQuery *_query;
    NSArray *_prefixMediaItems;
    MPMediaItem *_focusedItem;
    unsigned int _hasPendingLibraryChanges:1;
    MPMediaItem *_cloudDialogAllowedMediaItem;
}

@property(retain, nonatomic) MPMediaItem *cloudDialogAllowedMediaItem; // @synthesize cloudDialogAllowedMediaItem=_cloudDialogAllowedMediaItem;
@property(retain, nonatomic) MPMediaItem *focusedItem; // @synthesize focusedItem=_focusedItem;
@property(retain, nonatomic) NSArray *prefixMediaItems; // @synthesize prefixMediaItems=_prefixMediaItems;
@property(copy, nonatomic) MPMediaQuery *query; // @synthesize query=_query;
- (void).cxx_destruct;
- (void)_performWhileIgnoringShuffleChanges:(CDUnknownBlockType)arg1;
- (unsigned long long)_shuffleItemsInFeederQueryWithShuffleType:(unsigned long long)arg1 initialIndex:(unsigned long long)arg2 canInvalidateFeederContents:(_Bool)arg3;
- (unsigned long long)unshuffledIndexOfAVItem:(id)arg1;
- (_Bool)reloadWithDataSource:(id)arg1 keepPlayingCurrentItemIfPossible:(_Bool)arg2;
- (id)mediaItemAtIndex:(unsigned long long)arg1;
- (unsigned long long)indexOfMediaItem:(id)arg1;
- (void)_handleMediaLibraryDidChange;
- (void)_libraryDidChangeNotification:(id)arg1;
- (void)_itemWillChangeNotification:(id)arg1;
- (void)_applicationWillEnterForegroundNotification:(id)arg1;
- (unsigned long long)initialPlaybackQueueDepthForStartingIndex:(unsigned long long)arg1;
- (void)getContainerType:(unsigned long long *)arg1 mediaLibraryContainerPersistentID:(long long *)arg2 storeContainerID:(id *)arg3 storePersonalizedContainerID:(id *)arg4;
- (_Bool)wantsAirPlayVideo;
- (id)playbackInfoAtIndex:(unsigned long long)arg1;
- (void)archiveAVControllerPlaybackQueue:(id)arg1 toArchiver:(id)arg2;
- (void)restoreAVControllerPlaybackQueue:(id)arg1 fromUnarchiver:(id)arg2;
- (_Bool)trackChangesCanEndPlayback;
- (void)shuffleItemsWithAnchor:(unsigned long long *)arg1;
- (void)setAVController:(id)arg1;
- (id)preferredLanguages;
- (id)pathAtIndex:(unsigned long long)arg1;
- (unsigned long long)itemTypeForIndex:(unsigned long long)arg1;
- (Class)itemClass;
- (_Bool)hasValidItemAtIndex:(unsigned long long)arg1;
- (id)copyRawItemAtIndex:(unsigned long long)arg1;
- (unsigned long long)itemCount;
- (void)dealloc;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface MPAlternateTrackCellBackgroundView : UIView
{
    int _sectionLocation;
    UIBezierPath *_fillPath;
    UIBezierPath *_strokePath;
}

@property(nonatomic) int sectionLocation; // @synthesize sectionLocation=_sectionLocation;
- (void).cxx_destruct;
- (void)layoutSubviews;
- (void)drawRect:(struct CGRect)arg1;
- (void)_createBezierPathWithCornerRadius:(double)arg1 bottomRadius:(double)arg2 animating:(_Bool)arg3;
- (void)setSectionLocation:(int)arg1 animated:(_Bool)arg2;
- (void)setFrame:(struct CGRect)arg1;
- (void)_invalidatePaths;
- (id)initWithFrame:(struct CGRect)arg1;

@end

@interface MPAlternateTextTrack : MPAlternateTrack
{
    long long _type;
    NSString *_name;
    NSLocale *_locale;
    long long _tag;
}

+ (id)autoTrack;
+ (id)offTrack;
@property(nonatomic) long long tag; // @synthesize tag=_tag;
- (void).cxx_destruct;
- (id)_displayNameForName:(id)arg1;
- (id)displayName;
@property(readonly, nonatomic) long long type;
@property(readonly, nonatomic) NSLocale *locale;
@property(readonly, nonatomic) _Bool isInBand;
- (long long)compare:(id)arg1;
- (id)initWithType:(long long)arg1 name:(id)arg2 locale:(id)arg3;

@end

@interface MPArtworkConfiguration : NSObject
{
    ML3ArtworkConfiguration *_artworkConfiguration;
}

+ (id)systemConfiguration;
@property(retain, nonatomic) ML3ArtworkConfiguration *artworkConfiguration; // @synthesize artworkConfiguration=_artworkConfiguration;
- (void).cxx_destruct;
- (id)description;
- (id)sizesToAutogenerateForMediaType:(unsigned long long)arg1 artworkType:(long long)arg2;
- (id)supportedSizesForMediaType:(unsigned long long)arg1 artworkType:(long long)arg2;
- (id)initWithConfigurationDictionaries:(id)arg1;

@end

@interface MPRestrictionsMonitor : NSObject <MCProfileConnectionObserver>
{
    NSObject<OS_dispatch_queue> *_accessQueue;
    NSMutableDictionary *_cachedSettings;
    MCProfileConnection *_connection;
    _Bool _allowsAccountModification;
    _Bool _allowsDeletion;
    _Bool _allowsExplicitContent;
    _Bool _allowsStorePurchases;
    _Bool _allowsRadioPurchases;
}

+ (id)sharedRestrictionsMonitor;
@property(readonly, nonatomic) _Bool allowsRadioPurchases; // @synthesize allowsRadioPurchases=_allowsRadioPurchases;
@property(readonly, nonatomic) _Bool allowsStorePurchases; // @synthesize allowsStorePurchases=_allowsStorePurchases;
@property(readonly, nonatomic) _Bool allowsExplicitContent; // @synthesize allowsExplicitContent=_allowsExplicitContent;
@property(readonly, nonatomic) _Bool allowsDeletion; // @synthesize allowsDeletion=_allowsDeletion;
@property(readonly, nonatomic) _Bool allowsAccountModification; // @synthesize allowsAccountModification=_allowsAccountModification;
- (void).cxx_destruct;
- (void)_updateWithCanPostNotifications:(_Bool)arg1;
- (void)_cacheValue:(id)arg1 forSetting:(id)arg2;
- (_Bool)_isRunningInStoreDemoMode;
- (void)profileConnectionDidReceiveEffectiveSettingsChangedNotification:(id)arg1 userInfo:(id)arg2;
- (id)effectiveValueForSetting:(id)arg1;
- (void)dealloc;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface MPStoreDownload : NSObject
{
    NSObject<OS_dispatch_queue> *_accessQueue;
    NSDictionary *_attributes;
    _Bool _canceled;
    NSMutableArray *_overridePhaseIdentifiers;
    SSDownload *_SSDownload;
    SSPurchase *_SSPurchase;
    SSPurchaseResponse *_SSPurchaseResponse;
    long long _type;
}

+ (id)_storeDownloadForContext:(id)arg1 type:(long long)arg2 attributes:(id)arg3;
+ (id)_storeDownloadForCompletionOffer:(id)arg1 type:(long long)arg2 attributes:(id)arg3;
+ (id)_SSPurchaseForType:(long long)arg1 attributes:(id)arg2 buyParameters:(id)arg3 purchaseValuesForDownloadProperties:(id)arg4 URLBagKeyOverride:(id)arg5;
+ (id)storeDownloadForCompletionOffering:(id)arg1 type:(long long)arg2 attributes:(id)arg3;
+ (id)storeDownloadForStoreItemOffer:(id)arg1 attributes:(id)arg2;
+ (id)storeDownloadsForContexts:(id)arg1 type:(long long)arg2 attributes:(id)arg3;
@property(readonly, nonatomic) long long type; // @synthesize type=_type;
@property(readonly, nonatomic) NSDictionary *attributes; // @synthesize attributes=_attributes;
- (void).cxx_destruct;
- (id)_valueForDownloadProperty:(id)arg1;
- (id)_currentOverridePhaseIdentifier;
- (void)_removeOverridePhaseIdentifier:(id)arg1;
- (void)_addOverridePhaseIdentifier:(id)arg1;
- (id)_SSPurchaseResponse;
- (id)_SSPurchase;
- (id)_SSDownload;
- (void)_setSSPurchase:(id)arg1 SSPurchaseResponse:(id)arg2;
- (void)_setSSDownload:(id)arg1;
- (void)_setCanceled:(_Bool)arg1;
- (_Bool)_isCanceled;
- (id)assetsForType:(id)arg1;
@property(readonly, nonatomic) long long storeItemIdentifier;
@property(readonly, nonatomic) NSError *purchaseError;
@property(readonly, nonatomic) NSString *phaseIdentifier;
@property(readonly, nonatomic) double percentComplete;
@property(readonly, nonatomic) unsigned long long libraryItemIdentifier;
@property(readonly, nonatomic, getter=isPaused) _Bool paused;
@property(readonly, nonatomic, getter=isRestore) _Bool restore;
@property(readonly, nonatomic, getter=isPurchasing) _Bool purchasing;
@property(readonly, nonatomic, getter=isFinished) _Bool finished;
@property(readonly, nonatomic, getter=isCanceled) _Bool canceled;
@property(readonly, nonatomic) NSError *failureError;
@property(readonly, nonatomic) long long downloadSizeLimit;
@property(readonly, nonatomic) long long downloadIdentifier;
@property(readonly, nonatomic) long long bytesTotal;
@property(readonly, nonatomic) long long bytesDownloaded;
- (id)description;
- (id)initWithType:(long long)arg1 attributes:(id)arg2;

@end

@interface MPStoreDownloadManager : NSObject <SSDownloadManagerObserver, SSPurchaseManagerDelegate, UIAlertViewDelegate>
{
    NSObject<OS_dispatch_queue> *_accessQueue;
    NSMutableArray *_blockObservers;
    UIAlertView *_cellularDownloadAlertView;
    NSMutableArray *_cellularDownloadRequestCompletionHandlers;
    SSDownloadManager *_downloadManager;
    NSMutableArray *_downloads;
    NSMapTable *_downloadIdentifiersToDownloads;
    NSMapTable *_downloadsToObservers;
    NSMapTable *_libraryIdentifiersToDownloads;
    NSHashTable *_observersForAllDownloads;
    SSPurchaseManager *_purchaseManager;
    NSMapTable *_storeIdentifiersToDownloads;
}

+ (id)sharedManager;
- (void).cxx_destruct;
- (void)_updateMediaItemPropertiesForFinishedStoreDownload:(id)arg1 SSDownload:(id)arg2;
- (void)_updateDownloadsWithAdditions:(id)arg1 removals:(id)arg2;
- (void)_unregisterBlockObserver:(id)arg1;
- (void)_sendDownloadsDidProgressToObserversForDownloads:(id)arg1;
- (void)_sendDownloadsDidFinishToObserversForDownloads:(id)arg1 notifyDownloadManager:(_Bool)arg2 completionHandler:(CDUnknownBlockType)arg3;
- (void)_sendDownloadsDidFinishPurchasesToObserversForDownloads:(id)arg1;
- (void)_sendDownloadsDidChangeToObserversWithAddedDownloads:(id)arg1 removedDownloads:(id)arg2;
- (void)_registerBlockObserver:(id)arg1;
- (void)_onQueue_removeDownloadFromMapTables:(id)arg1;
- (_Bool)_onQueue_hasExistingDownloadForStoreDownload:(id)arg1;
- (id)_onQueue_findStoreDownloadWithSSDownload:(id)arg1 SSPurchase:(id)arg2;
- (void)_onQueue_addDownloadToMapTables:(id)arg1;
- (id)_observersForDownload:(id)arg1;
- (id)_observersForAllDownloads;
- (id)_existingDownloadForSSDownload:(id)arg1;
- (void)_dismissAndCleanupCellularDownloadAlertViewWithResult:(long long)arg1;
- (void)_networkTypeDidChangeNotification:(id)arg1;
- (void)_matchCellularRestrictedDidChangeNotification:(id)arg1;
- (void)_addPurchaseFinishedHandler:(CDUnknownBlockType)arg1 forDownloads:(id)arg2;
- (void)alertView:(id)arg1 didDismissWithButtonIndex:(long long)arg2;
- (void)downloadManager:(id)arg1 downloadStatesDidChange:(id)arg2;
- (void)purchaseManager:(id)arg1 didFinishPurchasesWithResponses:(id)arg2;
- (void)requestPermissionToDownloadWithType:(long long)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)removeObserver:(id)arg1 forDownloads:(id)arg2;
- (void)prioritizeDownloads:(id)arg1;
- (id)downloadForStoreID:(long long)arg1;
- (id)downloadForMediaItemPersistentID:(unsigned long long)arg1;
- (id)downloadForMediaItem:(id)arg1;
- (id)downloadForDownloadPersistentIdentifier:(long long)arg1;
- (void)resumeDownloads:(id)arg1;
- (void)pauseDownloads:(id)arg1;
- (void)cancelDownloads:(id)arg1;
- (void)addObserver:(id)arg1 forDownloads:(id)arg2;
- (void)addFinishHandler:(CDUnknownBlockType)arg1 forDownloads:(id)arg2;
- (void)addDownloads:(id)arg1;
@property(readonly, nonatomic) NSArray *downloads;
- (void)dealloc;
- (id)_init;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface _MPStoreDownloadBlockObserver : NSObject <MPStoreDownloadManagerObserver>
{
    CDUnknownBlockType _didFinishDownloadHandler;
    CDUnknownBlockType _didFinishPurchaseHandler;
    MPStoreDownload *_download;
}

@property(readonly, nonatomic) MPStoreDownload *download; // @synthesize download=_download;
@property(copy, nonatomic) CDUnknownBlockType didFinishPurchaseHandler; // @synthesize didFinishPurchaseHandler=_didFinishPurchaseHandler;
@property(copy, nonatomic) CDUnknownBlockType didFinishDownloadHandler; // @synthesize didFinishDownloadHandler=_didFinishDownloadHandler;
- (void).cxx_destruct;
- (void)downloadManager:(id)arg1 downloadPurchaseDidFinish:(id)arg2;
- (void)downloadManager:(id)arg1 downloadDidFinish:(id)arg2;
- (id)initWithDownload:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface MPCloudAVAssetDownloadSession : AVAssetDownloadSession
{
    _Bool _isStreamingQuality;
    MPStoreItemContext *_context;
    MPCloudAssetDownloadSessionIdentifier *_downloadSessionIdentifier;
}

+ (id)assetDownloadSessionWithURL:(id)arg1 destinationURL:(id)arg2 options:(id)arg3 context:(id)arg4;
@property(nonatomic) _Bool isStreamingQuality; // @synthesize isStreamingQuality=_isStreamingQuality;
@property(retain, nonatomic) MPCloudAssetDownloadSessionIdentifier *downloadSessionIdentifier; // @synthesize downloadSessionIdentifier=_downloadSessionIdentifier;
@property(retain, nonatomic) MPStoreItemContext *context; // @synthesize context=_context;
- (void).cxx_destruct;

@end

@interface MPStorePlayWhileDownloadController : NSObject <SSDownloadHandlerDelegate, UIAlertViewDelegate>
{
    NSMutableSet *_cellularRestrictedAlertViews;
    SSDownloadHandler *_downloadHandler;
    SSDownloadManager *_downloadManager;
    NSObject<OS_dispatch_queue> *_downloadSessionQueue;
    NSMutableArray *_downloadSessions;
}

+ (id)sharedController;
- (void).cxx_destruct;
- (_Bool)_showNoNetworkDialogForContext:(id)arg1;
- (_Bool)_showCellularRestrictedDialogForContext:(id)arg1;
- (id)_openSessionWithProperties:(id)arg1 style:(long long *)arg2;
- (id)_openSessionWithProperties:(id)arg1 assetOptions:(id)arg2;
- (id)_downloadSessionWithID:(id)arg1;
- (void)_closeSessionForAsset:(id)arg1;
- (void)alertView:(id)arg1 didDismissWithButtonIndex:(long long)arg2;
- (void)downloadHandler:(id)arg1 handleSession:(id)arg2;
- (void)downloadHandler:(id)arg1 cancelSession:(id)arg2;
- (_Bool)showNetworkConstraintDialogForContext:(id)arg1;
- (id)openSessionWithContext:(id)arg1 attributes:(id)arg2;
- (_Bool)isSessionRequiredToPlayContext:(id)arg1;
- (_Bool)canOpenSessionWithContext:(id)arg1;
- (void)dealloc;
- (id)_init;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface _MPStorePlayWhileDownloadAVURLAsset : AVURLAsset
{
}

- (void)dealloc;

@end

@interface MPPMediaPredicate : PBCodable <NSCopying>
{
    MPPCompoundPredicate *_compoundPredicate;
    MPPConditionalPredicate *_conditionalPredicate;
    MPPPersistentIDsPredicate *_persistentIDsPredicate;
    MPPPropertyPredicate *_propertyPredicate;
    MPPSearchStringPredicate *_searchStringPredicate;
    int _type;
    struct {
        unsigned int type:1;
    } _has;
}

@property(retain, nonatomic) MPPSearchStringPredicate *searchStringPredicate; // @synthesize searchStringPredicate=_searchStringPredicate;
@property(retain, nonatomic) MPPPersistentIDsPredicate *persistentIDsPredicate; // @synthesize persistentIDsPredicate=_persistentIDsPredicate;
@property(retain, nonatomic) MPPConditionalPredicate *conditionalPredicate; // @synthesize conditionalPredicate=_conditionalPredicate;
@property(retain, nonatomic) MPPCompoundPredicate *compoundPredicate; // @synthesize compoundPredicate=_compoundPredicate;
@property(retain, nonatomic) MPPPropertyPredicate *propertyPredicate; // @synthesize propertyPredicate=_propertyPredicate;
@property(nonatomic) int type; // @synthesize type=_type;
- (void).cxx_destruct;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)copyTo:(id)arg1;
- (void)writeTo:(id)arg1;
- (_Bool)readFrom:(id)arg1;
- (id)dictionaryRepresentation;
- (id)description;
@property(readonly, nonatomic) _Bool hasSearchStringPredicate;
@property(readonly, nonatomic) _Bool hasPersistentIDsPredicate;
@property(readonly, nonatomic) _Bool hasConditionalPredicate;
@property(readonly, nonatomic) _Bool hasCompoundPredicate;
@property(readonly, nonatomic) _Bool hasPropertyPredicate;
@property(nonatomic) _Bool hasType;
- (void)dealloc;

@end

@interface UIImage (MPUtilities)
- (id)imageWithShadow:(id)arg1;
- (id)imageWithEtchedBorderOfColor:(id)arg1 radius:(double)arg2;
- (id)MP_imageByOverlayingColor:(id)arg1;
- (id)MP_flatImageWithLinearGradientFromTopColor:(id)arg1 toBottomColor:(id)arg2;
- (struct CGRect)bitmapRectFromImageRect:(struct CGRect)arg1;
@end

@interface NSObject (MPNonRetainingDelayedPerforms)
+ (void)cancelPreviousPerformRequestsWithNonRetainedTarget:(id)arg1;
+ (void)cancelPreviousPerformRequestsWithNonRetainedTarget:(id)arg1 selector:(SEL)arg2 object:(id)arg3;
+ (void)performSelectorWithNonRetainedTarget:(id)arg1 selector:(SEL)arg2 withObject:(id)arg3 afterDelay:(double)arg4;
- (void)dispatchAsyncWithCancellationIdentifier:(id)arg1 delay:(double)arg2 queue:(id)arg3 block:(CDUnknownBlockType)arg4;
- (_Bool)cancelPreviousDispatchAsyncWithCancellationIdentifier:(id)arg1;
- (id)_MPCancellableDispatchAccessQueue;
- (void)_nonRetainingPerformSelector:(SEL)arg1 withObject:(id)arg2 afterDelay:(double)arg3 inModes:(id)arg4;
@end

@interface NSIndexSet (MPAdditions)
+ (id)indexSetWithIndexes:(unsigned long long)arg1;
@end

@interface UIApplication (MPAdditions)
- (_Bool)isSuspendedForAnyReason;
@end

@interface UIWindow (MPAdditions)
- (id)copyIOSurfaceSnapshotView:(long long)arg1;
@end

@interface UIView (MPAdditions)
- (id)mpAncestorViewController;
- (void)mpPerformRecursiveBlock:(CDUnknownBlockType)arg1;
- (void)mpSetFrameSize:(struct CGSize)arg1;
- (void)mpSetFrameOrigin:(struct CGPoint)arg1;
@end

@interface AVPlayerItem (MPAVItemAdditions)
@property(retain, nonatomic) MPAVItem *MPAVItem;
@end

@interface NSObject (MPTimeMakerHelper)
- (void)unregisterForTimeMarkerNotifications;
- (void)registerForTimeMarkerNotificationsIfNecessaryForPlayer:(id)arg1;
- (void)__crossedTimeMarkerNotification:(id)arg1;
@end

@interface UIView (MPAlternateTracksAddition)
- (id)mpFirstLabelSubview;
@end

@interface UIViewController (MPMoviePlayerViewController)
- (void)dismissMoviePlayerViewControllerAnimated;
- (void)presentMoviePlayerViewControllerAnimated:(id)arg1;
@end

@interface NSArray (MPMediaQueryAdditions)
- (_Bool)MPIsEmpty;
@end

@interface NSMutableArray (MPMediaQueryAdditions)
- (void)moveItemFromIndex:(unsigned long long)arg1 toIndex:(unsigned long long)arg2;
- (void)removeItemAtIndex:(unsigned long long)arg1;
@end

@interface UIView (MPArtworkCatalog)
- (void)clearArtworkCatalogs;
@property(readonly, nonatomic) MPArtworkCatalog *artworkCatalog;
@end

@interface NSBundle (MPAdditions)
+ (id)mediaPlayerBundle;
@end

@interface NSOperation (Additions)
@property(nonatomic) unsigned long long tag;
@end

@interface NSOperationQueue (Additions)
- (void)executeAndWaitForBlock:(CDUnknownBlockType)arg1;
@end

@interface ML3Entity (MPMediaAdditions)
+ (id)spotlightPropertyForMPMediaEntityProperty:(id)arg1;
+ (id)propertyForMPMediaEntityProperty:(id)arg1;
@end

@interface ML3Collection (MPMediaAdditions)
+ (id)propertyForMPMediaEntityProperty:(id)arg1;
@end

@interface ML3Album (MPMediaAdditions)
+ (id)propertyForMPMediaEntityProperty:(id)arg1;
@end

@interface ML3Artist (MPMediaAdditions)
+ (id)propertyForMPMediaEntityProperty:(id)arg1;
@end

@interface ML3AlbumArtist (MPMediaAdditions)
+ (id)propertyForMPMediaEntityProperty:(id)arg1;
@end

@interface ML3Composer (MPMediaAdditions)
+ (id)propertyForMPMediaEntityProperty:(id)arg1;
@end

@interface ML3Genre (MPMediaAdditions)
+ (id)propertyForMPMediaEntityProperty:(id)arg1;
@end

@interface ML3Container (MPMediaAdditions)
+ (id)propertyForMPMediaEntityProperty:(id)arg1;
@end

@interface ML3Track (MPMediaAdditions)
+ (id)propertyForMPMediaEntityProperty:(id)arg1;
@end

@interface NSObject (MPMediaLibraryDataProviderSystemML3StringCoercion)
- (id)MPMediaLibraryDataProviderSystemML3CoercedString;
@end

@interface NSString (MPMediaLibraryDataProviderSystemML3StringCoercion)
- (id)MPMediaLibraryDataProviderSystemML3CoercedString;
@end

@interface NSNumber (MPMediaLibraryDataProviderSystemML3StringCoercion)
- (id)MPMediaLibraryDataProviderSystemML3CoercedString;
@end

@interface NSString (CommonPrefixAdditions)
- (id)commonNonWordBreakingPrefixWithString:(id)arg1 options:(unsigned long long)arg2;
@end

@interface NSString (MMPAdditions)
+ (double)widthFittingMaximumInteger:(long long)arg1 withFont:(id)arg2;
- (id)displayableStringByStrippingOffCommonPrefixWithString:(id)arg1;
- (id)displayableStringByTrimmingPrefixString:(id)arg1;
@end

@interface NSString (MPAdditions)
- (id)MP_attributedStringWithEmphasizedTextSeparator:(id)arg1 regularTextAttributes:(id)arg2 emphasizedTextAttributes:(id)arg3;
@end

@interface NSAttributedString (MPAdditions)
- (id)MP_attributedStringByAddingAttributes:(id)arg1 toOccurrencesOfSubstring:(id)arg2 options:(unsigned long long)arg3;
@end

@interface NSMutableAttributedString (MPAdditions)
- (void)MP_addAttributes:(id)arg1 toOccurrencesOfSubstring:(id)arg2 options:(unsigned long long)arg3;
@end

@interface AVAsset (MPAdditions)
- (void)mpLoadValuesAsynchronouslyForKeys:(id)arg1 completionQueue:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;
@end

@interface UIViewController (MPAdditions)
+ (void)_endAppearanceTransitionFromViewController:(id)arg1 toViewController:(id)arg2;
+ (void)_beginAppearanceTransitionFromViewController:(id)arg1 toViewController:(id)arg2 animated:(_Bool)arg3;
- (void)_removeFromParentViewAndViewController;
- (void)_addChildViewAndViewController:(id)arg1;
- (void)_addChildViewAndViewController:(id)arg1 asSubviewOfView:(id)arg2;
- (void)_addChildViewAndViewController:(id)arg1 asSubviewOfView:(id)arg2 addSubviewBlock:(CDUnknownBlockType)arg3;
- (_Bool)_hasAncestorViewController:(id)arg1;
@end

@interface AVAsset (MPNetworkPlayability)
@property(nonatomic, getter=MP_canAffectNetworkPlayability, setter=MP_setCanAffectNetworkPlayability:) _Bool MP_canAffectNetworkPlayability;
@end

@interface AVMediaSelectionOption (MediaPlayer)
@property(readonly, nonatomic) _Bool mpIsSDH;
@property(readonly, nonatomic) _Bool mpIsAC3;
@end

@interface SSLookupResponse (MPStoreOfferCMC)
+ (id)mpLoadDebugCompletionsResponseWithStoreLookupID:(id)arg1;
+ (_Bool)mpFakeCompletionDataForBuys;
+ (_Bool)mpShowBuysWithNoCompletionOffer;
+ (_Bool)mpVerboseCMCLogging;
- (void)mpSaveCompletionsResponseForDebuggingIfNecessaryWithExpectedStoreLookupID:(id)arg1;
- (id)mpCompletionOfferResponseDictionaryWithLocalAlbumsCollection:(id)arg1;
@property(readonly, nonatomic) _Bool mpIsPersonalizedOffer;
@end

@interface UIViewController (MPUsageStatistics)
@property(retain, nonatomic) NSString *aggregateStatisticsDisplayCountKey;
@end

@interface UIView (MPAdditions)
- (void)setFrameHeight:(double)arg1;
- (void)setFrameWidth:(double)arg1;
- (void)setFrameSize:(struct CGSize)arg1;
- (void)setFrameY:(double)arg1;
- (void)setFrameEndX:(double)arg1 y:(double)arg2;
- (void)setFrameX:(double)arg1;
- (void)setFrameOrigin:(struct CGPoint)arg1;
@end

