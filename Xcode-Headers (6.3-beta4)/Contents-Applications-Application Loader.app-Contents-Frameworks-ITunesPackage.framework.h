//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#pragma mark -

//
// File: /Applications/Xcode.app/Contents/Applications/Application Loader.app/Contents/Frameworks/ITunesPackage.framework/Versions/A/ITunesPackage
// UUID: DA75C827-DDA8-30E8-A641-639A653D7F5B
//
//                           Arch: x86_64
//                Current version: 1.0.0
//          Compatibility version: 1.0.0
//                 Source version: 300.20.0.0.0
//       Minimum Mac OS X version: 10.8.0
//                    SDK version: 10.8.0
//
// Objective-C Garbage Collection: Unsupported
//

@protocol ArtistableElement <NSObject>
- (NSArray *)artists;
- (void)setArtists:(NSMutableArray *)arg1;
@end

@protocol ITunesPackageLoaderProcessingDelegate <NSObject>
- (id)postprocessObjectAfterUnmarshalling:(id)arg1 document:(NSXMLDocument *)arg2;
- (NSXMLDocument *)preprocessDocumentPriorToUnmarshalling:(NSXMLDocument *)arg1;

@optional
- (id)preprocessObjectPriorToMarshalling:(id)arg1;
- (NSXMLDocument *)postprocessDocumentAfterMarshalling:(NSXMLDocument *)arg1 object:(id)arg2;
@end

@protocol LocalesOwnerProtocol <NSObject>
- (NSArray *)locales;
- (void)setLocales:(NSMutableArray *)arg1;
- (void)addLocale:(MusicLocaleElement *)arg1;
- (void)removeLocaleIfEmptyWithName:(NSString *)arg1;
- (void)removeLocaleWithName:(NSString *)arg1;
- (MusicLocaleElement *)localeWithLocaleNameInsertingIfNeeded:(NSString *)arg1;
- (MusicLocaleElement *)existingLocaleWithLocaleName:(NSString *)arg1;
@end

@protocol NSCopying
- (id)copyWithZone:(struct _NSZone *)arg1;
@end

@protocol NSObject
- (NSString *)description;
- (unsigned long long)retainCount;
- (id)autorelease;
- (oneway void)release;
- (id)retain;
- (BOOL)respondsToSelector:(SEL)arg1;
- (BOOL)conformsToProtocol:(Protocol *)arg1;
- (BOOL)isMemberOfClass:(Class)arg1;
- (BOOL)isKindOfClass:(Class)arg1;
- (BOOL)isProxy;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2 withObject:(id)arg3;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2;
- (id)performSelector:(SEL)arg1;
- (struct _NSZone *)zone;
- (id)self;
- (Class)class;
- (Class)superclass;
- (unsigned long long)hash;
- (BOOL)isEqual:(id)arg1;

@optional
- (NSString *)debugDescription;
@end

@protocol TitleableElement <NSObject>
- (NSArray *)titles;
- (void)setTitles:(NSMutableArray *)arg1;
@end

@protocol Track <NSObject, NSCopying>
- (BOOL)isBooklet;
- (BOOL)isITunesLP;
- (BOOL)isBonusMaterial;
- (double)duration;
- (void)setDuration:(double)arg1;
- (NSString *)durationStringWithSeconds;
- (NSString *)defaultTitle;
- (void)setFileElement:(AssetElement *)arg1;
- (AssetElement *)file;
@end

@protocol TrackNumberAndVolume <NSObject>
- (NSNumber *)volume;
- (void)setVolume:(NSNumber *)arg1;
- (NSNumber *)trackNumber;
- (void)setTrackNumber:(NSNumber *)arg1;
@end

@interface ITunesPackage : NSObject
{
    NSString *_path;
    NSXMLDocument *_metadataDocument;
}

+ (id)scrubString:(id)arg1 ofCharacters:(id)arg2 trimFromStart:(id)arg3;
+ (id)generateSafeVendorIdentifier:(id)arg1;
+ (id)fileSystemSafeAssetName:(id)arg1;
+ (BOOL)createDirectoryAtPath:(id)arg1 error:(id *)arg2;
- (BOOL)addInfoFromPackage:(id)arg1 error:(id *)arg2;
- (id)description;
- (id)renameToPath:(id)arg1 useUniqueName:(BOOL)arg2 overwrite:(BOOL)arg3;
- (id)duplicateToPath:(id)arg1;
- (id)saveToPath:(id)arg1;
- (id)save;
- (id)recylceAssetWithName:(id)arg1 error:(id *)arg2;
- (id)removeAssetWithName:(id)arg1;
- (id)existingAssetPathWithName:(id)arg1;
- (id)uniqueAssetPathWithName:(id)arg1;
- (id)assetPathWithName:(id)arg1;
- (id)linkAssetFromPath:(id)arg1 error:(id *)arg2;
- (id)linkAssetFromPath:(id)arg1 toName:(id)arg2 error:(id *)arg3;
- (id)moveAssetFromPath:(id)arg1 error:(id *)arg2;
- (id)moveAssetFromPath:(id)arg1 toName:(id)arg2 error:(id *)arg3;
- (id)addAssetFromPath:(id)arg1;
- (id)addAssetFromPath:(id)arg1 error:(id *)arg2;
- (BOOL)createPackageDirectory:(id *)arg1;
- (void)setMetadataDocument:(id)arg1;
- (id)metadataDocument;
- (id)metadataDocumentByLoadingIfNeeded:(id *)arg1;
- (id)loadMetadataDocument:(id *)arg1;
- (id)loadMetadata:(id *)arg1;
- (void)setPath:(id)arg1;
- (id)path;
- (void)dealloc;
- (id)init;
- (id)initWithPath:(id)arg1;
- (BOOL)setPackageElement:(id)arg1 error:(id *)arg2;
- (id)packageElementWithError:(id *)arg1;
- (id)initWithPackageElement:(id)arg1 error:(id *)arg2;
- (id)initWithPath:(id)arg1 packageElement:(id)arg2 error:(id *)arg3;

@end

@interface ITunesPackageLoader : NSObject
{
    MZXMLMarshaller *_marshaller;
    MZXMLMarshaller *_unmarshaller;
    NSMutableArray *_processingDelegates;
}

+ (void)flushDefaultLoader;
+ (id)defaultLoader;
+ (void)initialize;
+ (int)defaultPackageType;
+ (id)defaultPathWithPackageType:(int)arg1;
+ (id)defaultSoftwarePackagePath;
+ (id)defaultPublicationPackagePath;
+ (id)defaultTvPackagePath;
+ (id)defaultFilmPackagePath;
+ (id)defaultMusicPackagePath;
- (id)description;
- (id)pathForPackageOfType:(int)arg1 vendorId:(id)arg2;
- (id)packageNamesAtPath:(id)arg1;
- (id)uniquePackagePathWithPrototypePath:(id)arg1;
- (id)uniquePackagePathWithPrototypeName:(id)arg1;
- (id)uniquePackagePathWithPrototypeName:(id)arg1 packageType:(int)arg2;
- (id)defaultRecyclePathWithPackageType:(int)arg1;
- (id)defaultPackagePathWithPackageType:(int)arg1;
- (id)defaultRecyclePath;
- (id)defaultPackagePath;
- (BOOL)doesPackageExistAtPath:(id)arg1;
- (id)marshallDocument:(id)arg1 error:(id *)arg2;
- (id)loadAndUnmarshallPackage:(id *)arg1 atPath:(id)arg2 error:(id *)arg3;
- (id)unmarshallPackage:(id)arg1 error:(id *)arg2;
- (id)unmarshallDocument:(id)arg1 error:(id *)arg2;
- (id)preprocessObjectPriorToMarshalling:(id)arg1;
- (id)postprocessDocumentAfterMarshalling:(id)arg1 object:(id)arg2;
- (id)postprocessObjectAfterUnmarshalling:(id)arg1 document:(id)arg2;
- (id)preprocessDocumentPriorToUnmarshalling:(id)arg1;
- (void)removeProcessingDelegate:(id)arg1;
- (void)addProcessingDelegate:(id)arg1;
- (id)packageAtPath:(id)arg1 error:(id *)arg2;
- (void)dealloc;
- (id)init;
- (id)unmarshallerWithError:(id *)arg1;
- (id)marshallerWithError:(id *)arg1;

@end

@interface AbstractElement : MZGenericRecord
{
    NSMutableArray *_children;
    NSString *_id;
    id _nonretainedParent;
    BOOL _isInitialElement;
}

@property(nonatomic) BOOL isInitialElement; // @synthesize isInitialElement=_isInitialElement;
- (void)didChangeValueForKey:(id)arg1;
- (id)descriptionWithLocale:(id)arg1 indent:(unsigned long long)arg2;
- (id)rootObject;
- (void)setId:(id)arg1;
- (id)id;
- (id)undoManager;
- (void)setParent:(id)arg1;
- (id)parent;
- (id)children;
- (void)addChild:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;
- (id)init;

@end

@interface AbstractMusicElement : AbstractMusicElementBase <TitleableElement, LocalesOwnerProtocol>
{
}

+ (id)keyPathsForValuesAffectingDefaultArtistRole;
+ (id)keyPathsForValuesAffectingDefaultArtistName;
+ (id)keyPathsForValuesAffectingDefaultTitleVersion;
+ (id)keyPathsForValuesAffectingDefaultTitle;
+ (id)disabledKeyPathsForUndoRegistration;
+ (void)initialize;
- (void)setTitleVersions:(id)arg1;
- (void)setTitles:(id)arg1;
- (void)setPhoneticTitle:(id)arg1;
- (void)setLocales:(id)arg1;
- (void)addLocale:(id)arg1;
- (id)existingLocaleWithLocaleName:(id)arg1;
- (void)removeLocaleIfEmptyWithName:(id)arg1;
- (void)removeLocaleWithName:(id)arg1;
- (id)localeWithLocaleNameInsertingIfNeeded:(id)arg1;
- (void)setDefaultArtistRole:(id)arg1;
- (id)defaultArtistRole;
- (void)setDefaultArtistName:(id)arg1;
- (id)defaultArtistName;
- (id)defaultArtistElementCreatingIfNeeded;
- (id)defaultArtistElement;
- (void)setDefaultTitleVersion:(id)arg1;
- (id)defaultTitleVersion;
- (id)defaultTitleVersionElement;
- (void)setDefaultTitle:(id)arg1;
- (id)defaultTitle;
- (id)defaultTitleElement;
- (id)init;

@end

@interface AbstractTrackContainer : AbstractTrackContainerBase <Track>
{
}

- (BOOL)isBooklet;
- (BOOL)isITunesLP;
- (BOOL)isBonusMaterial;
- (double)duration;
- (void)setDuration:(double)arg1;
- (id)durationStringWithSeconds;
- (id)defaultTitle;
- (void)setFileElement:(id)arg1;
- (id)file;
- (id)name;

@end

@interface AlbumElement : AlbumElementBase
{
}

+ (id)findAudioTrack:(id)arg1 inTracks:(id)arg2;
+ (id)findTrackNumber:(id)arg1 discNumber:(id)arg2 inTracks:(id)arg3;
+ (BOOL)automaticallyNotifiesObserversForKey:(id)arg1;
- (void)sortNumberableTracksByVolumeAndTrack;
- (void)mergeExtraInfoToTrack:(id)arg1;
- (void)mergeExtraInfoToTracks;
- (void)mergeArtistsToTrack:(id)arg1;
- (void)mergeArtistsToTracks;
- (void)mergeCopyrightToTrack:(id)arg1;
- (void)mergeCopyrightToTracks;
- (void)mergeGenresToTrack:(id)arg1;
- (void)mergeGenresToTracks;
- (void)mergeLabelToTrack:(id)arg1;
- (void)mergeLabelToTracks;
- (void)mergeWithAlbum:(id)arg1;
- (void)mergeAlbumTracks:(id)arg1;
- (void)mergeTracks:(id)arg1;
- (void)mergeTracks:(id)arg1 nonAudioOrVideoTracks:(id)arg2;
- (id)maxDiscNumberOfNumberableTracks;
- (unsigned long long)maxTrackNumberOfNumberableTracksForDisc:(id)arg1;
- (unsigned long long)numberOfNumberableTracksForDisc:(id)arg1;
- (unsigned long long)numberOfAudioTracksForDisc:(id)arg1;
- (id)findAudioTrackNumber:(id)arg1 discNumber:(id)arg2;
- (id)findAudioTrack:(id)arg1;
- (void)mergeProducts:(id)arg1;
- (id)defaultSalesStartDate;
- (id)iTunesLPs;
- (id)booklets;
- (id)bonusMaterials;
- (id)nonNumberableTracks;
- (id)nonAudioTracks;
- (id)sortableTracks;
- (id)productTracks;
- (id)numberableTracks;
- (id)audioAndVideoTracks;
- (id)videoTracks;
- (id)audioTracks;
- (id)rawTracks;
- (void)setUnorderedTracks:(id)arg1;
- (void)setDisplayOrderedTracks:(id)arg1;
- (id)displayOrderedTracks;
- (id)unorderedTracks;
- (void)synchronizeAlbumProductClearanceToTracks;
- (void)synchronizeAlbumProductClearanceToMusicExtra:(id)arg1;
- (void)synchronizeAlbumProductClearanceToTrack:(id)arg1;
- (void)synchronizeAlbumProductsToTracks;
- (void)synchronizeAlbumProductsToTrack:(id)arg1;
- (void)updateTrackProductsWithOldTerritory:(id)arg1 newTerritory:(id)arg2;
- (id)productWithTerritory:(id)arg1;
- (BOOL)isBookletPresent;
- (BOOL)isITunesLPPresent;
- (BOOL)isBonusMaterialPresent;
- (void)setDefaultCoverArt:(id)arg1;
- (id)defaultCoverArt;

@end

@interface AlbumProductElement : AlbumProductElementBase
{
}

+ (id)territoriesAllowedToAlterPlusQuality;
+ (id)product;
+ (void)initialize;
- (id)init;

@end

@interface ArtistElement : ArtistElementBase <LocalesOwnerProtocol>
{
}

+ (id)keyPathsForValuesAffectingDefaultRole;
+ (id)keyPathsForValuesAffectingDefaultName;
+ (id)disabledKeyPathsForUndoRegistration;
- (void)setName:(id)arg1;
- (void)setPhoneticName:(id)arg1;
- (void)setLocales:(id)arg1;
- (void)addLocale:(id)arg1;
- (id)existingLocaleWithLocaleName:(id)arg1;
- (void)removeLocaleIfEmptyWithName:(id)arg1;
- (void)removeLocaleWithName:(id)arg1;
- (id)localeWithLocaleNameInsertingIfNeeded:(id)arg1;
- (id)nameForTranslation:(id)arg1;
- (void)setDefaultRole:(id)arg1;
- (id)defaultRole;
- (id)roleAtIndex:(unsigned long long)arg1;
- (void)setDefaultName:(id)arg1;
- (id)defaultName;
- (id)init;

@end

@interface AssetContainerElement : AssetContainerElementBase
{
}

+ (void)initialize;
- (unsigned long long)indexOfDataFile:(id)arg1;
- (void)setFile:(id)arg1;
- (id)fileCreatingIfNeeded;
- (id)file;
- (id)initWithFile:(id)arg1;
- (id)init;

@end

@interface AssetElement : AssetElementBase
{
}

+ (void)initialize;
- (id)order;
- (unsigned long long)indexInParentContainer;
- (void)setLocaleName:(id)arg1;
- (id)localeName;
- (void)setChecksumValue:(id)arg1;
- (id)checksumValue;
- (id)init;

@end

@interface BonusMaterialElement : BonusMaterialElementBase <Track>
{
}

- (BOOL)isBooklet;
- (BOOL)isITunesLP;
- (BOOL)isBonusMaterial;
- (double)duration;
- (void)setDuration:(double)arg1;
- (id)durationStringWithSeconds;
- (long long)compare:(id)arg1;
- (void)setNameWithAlbumTitle:(id)arg1;
- (void)setDefaultTitle:(id)arg1;
- (id)defaultTitle;
- (void)setProducts:(id)arg1;
- (id)products;
- (void)setFileElement:(id)arg1;
- (void)dealloc;
- (id)init;

@end

@interface ChapterElement : ChapterElementBase
{
}

- (id)init;

@end

@interface ChecksumElement : ChecksumElementBase
{
}

+ (void)initialize;
- (id)init;

@end

@interface LocalizedStringElement : LocalizedStringElementBase
{
}

+ (void)initialize;
- (void)dealloc;
- (id)init;

@end

@interface NameElement : NameElementBase
{
}

- (id)initWithName:(id)arg1;

@end

@interface PackageElement : PackageElementBase
{
}

+ (int)packageDeliveryTypeWithString:(id)arg1;
+ (id)stringWithPackageDeliveryType:(int)arg1;
+ (int)packageTypeWithString:(id)arg1;
+ (id)stringWithPackageType:(int)arg1;
+ (id)localizedString:(id)arg1 forTranslation:(id)arg2;
+ (id)defaultLocalizedString:(id)arg1;
+ (void)initialize;
- (void)removeInitialElements;
- (BOOL)addInfoFromElement:(id)arg1 error:(id *)arg2;
- (id)bestGuessVersionIfNotSpecified;
- (id)bestVendorId;
- (BOOL)isRingtone;
- (BOOL)isAssetOnly;
- (BOOL)isPublication;
- (BOOL)isSoftware;
- (BOOL)isMusic;
- (void)setPackageDeliveryType:(int)arg1;
- (int)packageDeliveryType;
- (int)packageType;
- (int)packageTypeThroughIntrospection;
- (int)packageTypeFromVideo:(id)arg1;
- (int)packageTypeFromMediaType:(id)arg1;
- (void)setVersion:(id)arg1;
- (id)init;

@end

@interface TrackElement : TrackElementBase <Track, TrackNumberAndVolume>
{
    double _duration;
}

+ (int)lyricsFormatCodeWithString:(id)arg1;
+ (id)stringWithLyricsFormatCode:(int)arg1;
- (BOOL)isBooklet;
- (BOOL)isITunesLP;
- (BOOL)isBonusMaterial;
- (int)lyricsFormatCode;
- (void)setLyricsFormatCode:(int)arg1;
- (double)duration;
- (void)setDuration:(double)arg1;
- (id)durationStringWithSeconds;
- (void)mergeWithTrack:(id)arg1;
- (void)mergeProducts:(id)arg1;
- (long long)compare:(id)arg1;
- (void)synchronizeProductsToTerritories:(id)arg1;
- (void)updateTrackProductsWithOldTerritory:(id)arg1 newTerritory:(id)arg2;
- (id)productWithTerritoryInsertingIfNeeded:(id)arg1 newTerritory:(id)arg2;
- (id)buildTrackProductElement:(id)arg1;
- (id)productWithTerritory:(id)arg1;
- (void)setFileElement:(id)arg1;
- (id)init;

@end

@interface TrackProductElement : TrackProductElementBase
{
}

@end

@interface AssetOnlyContainerElement : AssetOnlyContainerElementBase
{
}

+ (void)initialize;
- (id)init;

@end

@interface AttributeElement : AttributeElementBase
{
}

+ (id)attributeWithName:(id)arg1 andValue:(id)arg2;
+ (void)initialize;
- (id)init;
- (id)initWithName:(id)arg1 andValue:(id)arg2;

@end

@interface VideoChapterContainerElement : VideoChapterContainerElementBase
{
}

+ (void)initialize;
- (id)init;

@end

@interface VideoChapterElement : VideoChapterElementBase
{
}

+ (void)initialize;
- (id)init;

@end

@interface VideoCreditElement : VideoCreditElementBase
{
}

+ (void)initialize;
- (id)init;

@end

@interface VideoCueElement : VideoCueElementBase
{
}

+ (void)initialize;
- (id)init;

@end

@interface VideoCueTimeElement : VideoCueTimeElementBase
{
}

+ (void)initialize;
- (id)init;

@end

@interface VideoElement : VideoElementBase <Track, TrackNumberAndVolume>
{
}

- (BOOL)isBooklet;
- (BOOL)isITunesLP;
- (BOOL)isBonusMaterial;
- (double)duration;
- (void)setDuration:(double)arg1;
- (id)durationStringWithSeconds;
- (id)defaultSalesStartDate;
- (id)productWithTerritory:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;
- (void)setGenres:(id)arg1;
- (void)updateGenre:(id)arg1;
- (void)removeGenreObservations;
- (void)observeGenres;
- (void)setFileElement:(id)arg1;
- (id)file;
- (id)defaultTitle;

@end

@interface VideoPreviewElement : VideoPreviewElementBase
{
}

+ (void)initialize;
- (id)init;

@end

@interface VideoProductElement : VideoProductElementBase
{
}

+ (void)initialize;
- (id)init;

@end

@interface VideoRatingContainerElement : VideoRatingContainerElementBase
{
}

+ (void)initialize;
- (id)init;

@end

@interface VideoRatingElement : VideoRatingElementBase
{
}

+ (void)initialize;
- (id)init;

@end

@interface VideoRegionElement : VideoRegionElementBase
{
}

+ (void)initialize;
- (id)init;

@end

@interface SoftwareContainerElement : SoftwareContainerElementBase
{
}

+ (void)initialize;
- (BOOL)addSoftwareInfoFromElement:(id)arg1 error:(id *)arg2;
- (id)init;

@end

@interface AbstractVideoRatingElement : AbstractVideoRatingElementBase
{
}

+ (void)initialize;
- (id)init;

@end

@interface VideoElementBase : AbstractCopyrightableElement
{
    NSString *_type;
    NSString *_subtype;
    NSString *_containerId;
    NSString *_containerPosition;
    NSString *_isan;
    NSString *_episodeProductionNumber;
    NSString *_upc;
    NSString *_amgVideoId;
    NSString *_country;
    NSString *_originalSpokenLocale;
    NSString *_title;
    NSString *_shortDescription;
    NSString *_longDescription;
    NSString *_networkName;
    NSString *_synopsis;
    NSArray *_locales;
    NSString *_productionCompany;
    NSString *_theatricalReleaseDate;
    NSArray *_regions;
    NSNumber *_volume;
    NSString *_explicitContent;
    NSString *_isrc;
    NSString *_releaseDate;
    NSNumber *_trackNumber;
    VideoRatingContainerElement *_ratingsContainer;
    NSArray *_cast;
    NSArray *_crew;
    VideoChapterContainerElement *_chapterContainer;
    NSArray *_assets;
    VideoPreviewElement *_preview;
    NSArray *_products;
    NSArray *_cueSheet;
}

+ (id)allKnownKeyPaths;
- (id)descriptionWithLocale:(id)arg1 indent:(unsigned long long)arg2;
@property(retain, nonatomic) NSArray *cueSheet;
@property(retain, nonatomic) NSArray *products;
@property(retain, nonatomic) VideoPreviewElement *preview;
@property(retain, nonatomic) NSArray *assets;
@property(retain, nonatomic) VideoChapterContainerElement *chapterContainer;
@property(retain, nonatomic) NSArray *crew;
@property(retain, nonatomic) NSArray *cast;
@property(retain, nonatomic) VideoRatingContainerElement *ratingsContainer;
@property(retain, nonatomic) NSNumber *trackNumber;
@property(retain, nonatomic) NSString *releaseDate;
@property(retain, nonatomic) NSString *isrc;
@property(retain, nonatomic) NSString *explicitContent;
@property(retain, nonatomic) NSNumber *volume;
@property(retain, nonatomic) NSArray *regions;
@property(retain, nonatomic) NSString *theatricalReleaseDate;
@property(retain, nonatomic) NSString *productionCompany;
@property(retain, nonatomic) NSArray *locales;
@property(retain, nonatomic) NSString *synopsis;
@property(retain, nonatomic) NSString *networkName;
@property(retain, nonatomic) NSString *longDescription;
@property(retain, nonatomic) NSString *shortDescription;
@property(retain, nonatomic) NSString *title;
@property(retain, nonatomic) NSString *originalSpokenLocale;
@property(retain, nonatomic) NSString *country;
@property(retain, nonatomic) NSString *amgVideoId;
@property(retain, nonatomic) NSString *upc;
@property(retain, nonatomic) NSString *episodeProductionNumber;
@property(retain, nonatomic) NSString *isan;
@property(retain, nonatomic) NSString *containerPosition;
@property(retain, nonatomic) NSString *containerId;
@property(retain, nonatomic) NSString *subtype;
@property(retain, nonatomic) NSString *type;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;
- (id)init;

@end

@interface AccessoryPrototypeContainerElement : AccessoryPrototypeContainerElementBase
{
}

+ (void)initialize;
- (id)init;

@end

@interface AccessoryPrototypeContainerElementBase : AbstractElement
{
    NSString *_contractNumber;
    NSString *_applicationName;
    NSString *_accessoryName;
    NSString *_accessoryDescription;
    NSString *_notes;
    NSArray *_assets;
}

+ (id)allKnownKeyPaths;
- (id)descriptionWithLocale:(id)arg1 indent:(unsigned long long)arg2;
@property(retain, nonatomic) NSArray *assets;
@property(retain, nonatomic) NSString *notes;
@property(retain, nonatomic) NSString *accessoryDescription;
@property(retain, nonatomic) NSString *accessoryName;
@property(retain, nonatomic) NSString *applicationName;
@property(retain, nonatomic) NSString *contractNumber;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;
- (id)init;

@end

@interface SoftwareContainerElementBase : AbstractElement
{
    NSString *_vendorId;
    SoftwareMetadataElement *_metadata;
    NSArray *_softwareAssets;
}

+ (id)allKnownKeyPaths;
- (id)descriptionWithLocale:(id)arg1 indent:(unsigned long long)arg2;
@property(retain, nonatomic) NSArray *softwareAssets;
@property(retain, nonatomic) SoftwareMetadataElement *metadata;
@property(retain, nonatomic) NSString *vendorId;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;
- (id)init;

@end

@interface PackageElementBase : AbstractElement
{
    NSString *_version;
    NSString *_type;
    NSString *_metadataToken;
    NSString *_language;
    NSString *_provider;
    NSString *_teamId;
    NSString *_packageId;
    AlbumElement *_album;
    VideoElement *_video;
    AssetOnlyContainerElement *_assets;
    SoftwareAssetsContainerElement *_softwareAssets;
    SoftwareContainerElement *_software;
    AccessoryPrototypeContainerElement *_accessoryPrototypeApp;
    BulkContainerElement *_bulk;
    BookContainerElement *_book;
    ArtistPackageElement *_artist;
}

+ (id)allKnownKeyPaths;
- (id)descriptionWithLocale:(id)arg1 indent:(unsigned long long)arg2;
@property(retain, nonatomic) ArtistPackageElement *artist;
@property(retain, nonatomic) BookContainerElement *book;
@property(retain, nonatomic) BulkContainerElement *bulk;
@property(retain, nonatomic) AccessoryPrototypeContainerElement *accessoryPrototypeApp;
@property(retain, nonatomic) SoftwareContainerElement *software;
@property(retain, nonatomic) SoftwareAssetsContainerElement *softwareAssets;
@property(retain, nonatomic) AssetOnlyContainerElement *assets;
@property(retain, nonatomic) VideoElement *video;
@property(retain, nonatomic) AlbumElement *album;
@property(retain, nonatomic) NSString *packageId;
@property(retain, nonatomic) NSString *teamId;
@property(retain, nonatomic) NSString *provider;
@property(retain, nonatomic) NSString *language;
@property(retain, nonatomic) NSString *metadataToken;
@property(retain, nonatomic) NSString *type;
@property(retain, nonatomic) NSString *version;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;
- (id)init;

@end

@interface AbstractVideoRatingElementBase : AbstractElement
{
    NSString *_system;
    NSString *_reason;
    NSString *_rating;
}

+ (id)allKnownKeyPaths;
- (id)descriptionWithLocale:(id)arg1 indent:(unsigned long long)arg2;
@property(retain, nonatomic) NSString *rating;
@property(retain, nonatomic) NSString *reason;
@property(retain, nonatomic) NSString *system;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;
- (id)init;

@end

@interface AssetOnlyContainerElementBase : AbstractElement
{
    NSString *_mediaType;
    NSString *_vendorId;
    NSArray *_assets;
}

+ (id)allKnownKeyPaths;
- (id)descriptionWithLocale:(id)arg1 indent:(unsigned long long)arg2;
@property(retain, nonatomic) NSArray *assets;
@property(retain, nonatomic) NSString *vendorId;
@property(retain, nonatomic) NSString *mediaType;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;
- (id)init;

@end

@interface AttributeElementBase : AbstractElement
{
    NSString *_name;
    NSString *_value;
}

+ (id)allKnownKeyPaths;
- (id)descriptionWithLocale:(id)arg1 indent:(unsigned long long)arg2;
@property(retain, nonatomic) NSString *value;
@property(retain, nonatomic) NSString *name;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;
- (id)init;

@end

@interface VideoChapterContainerElementBase : AbstractElement
{
    NSString *_timecodeFormat;
    NSArray *_chapters;
}

+ (id)allKnownKeyPaths;
- (id)descriptionWithLocale:(id)arg1 indent:(unsigned long long)arg2;
@property(retain, nonatomic) NSArray *chapters;
@property(retain, nonatomic) NSString *timecodeFormat;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;
- (id)init;

@end

@interface VideoChapterElementBase : AbstractElement
{
    NSString *_startTime;
    LocalizedStringElement *_title;
    NSArray *_titles;
    AssetElement *_artworkFile;
}

+ (id)allKnownKeyPaths;
- (id)descriptionWithLocale:(id)arg1 indent:(unsigned long long)arg2;
@property(retain, nonatomic) AssetElement *artworkFile;
@property(retain, nonatomic) NSArray *titles;
@property(retain, nonatomic) LocalizedStringElement *title;
@property(retain, nonatomic) NSString *startTime;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;
- (id)init;

@end

@interface VideoCreditElementBase : AbstractElement
{
    NSString *_name;
    NSString *_display;
    NSString *_amgArtistId;
    NSString *_billing;
    NSString *_role;
}

+ (id)allKnownKeyPaths;
- (id)descriptionWithLocale:(id)arg1 indent:(unsigned long long)arg2;
@property(retain, nonatomic) NSString *role;
@property(retain, nonatomic) NSString *billing;
@property(retain, nonatomic) NSString *amgArtistId;
@property(retain, nonatomic) NSString *display;
@property(retain, nonatomic) NSString *name;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;
- (id)init;

@end

@interface VideoCueElementBase : AbstractElement
{
    NSString *_sequenceNumber;
    VideoCueTimeElement *_time;
    NSString *_title;
    NSArray *_artists;
    NSString *_isrc;
    NSString *_iswc;
    NSString *_copyrightCline;
    NSString *_copyrightPline;
    NSString *_usage;
}

+ (id)allKnownKeyPaths;
- (id)descriptionWithLocale:(id)arg1 indent:(unsigned long long)arg2;
@property(retain, nonatomic) NSString *usage;
@property(retain, nonatomic) NSString *copyrightPline;
@property(retain, nonatomic) NSString *copyrightCline;
@property(retain, nonatomic) NSString *iswc;
@property(retain, nonatomic) NSString *isrc;
@property(retain, nonatomic) NSArray *artists;
@property(retain, nonatomic) NSString *title;
@property(retain, nonatomic) VideoCueTimeElement *time;
@property(retain, nonatomic) NSString *sequenceNumber;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;
- (id)init;

@end

@interface VideoCueTimeElementBase : AbstractElement
{
    NSString *_startTimecode;
    NSString *_duration;
}

+ (id)allKnownKeyPaths;
- (id)descriptionWithLocale:(id)arg1 indent:(unsigned long long)arg2;
@property(retain, nonatomic) NSString *duration;
@property(retain, nonatomic) NSString *startTimecode;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;
- (id)init;

@end

@interface VideoPreviewElementBase : AbstractElement
{
    NSString *_startTime;
}

+ (id)allKnownKeyPaths;
- (id)descriptionWithLocale:(id)arg1 indent:(unsigned long long)arg2;
@property(retain, nonatomic) NSString *startTime;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;
- (id)init;

@end

@interface VideoProductElementBase : AbstractElement
{
    NSString *_territory;
    NSNumber *_clearedForSale;
    NSString *_wholesalePriceTier;
    NSString *_preorderSalesStartDate;
    NSString *_salesStartDate;
    NSString *_salesEndDate;
    NSNumber *_clearedForHDSale;
    NSNumber *_clearedForVOD;
    NSString *_vodType;
    NSString *_availableForVODDate;
    NSString *_unavailableForVODDate;
    NSString *_physicalReleaseDate;
    NSNumber *_clearedForHDVOD;
    NSNumber *_bundleOnly;
}

+ (id)allKnownKeyPaths;
- (id)descriptionWithLocale:(id)arg1 indent:(unsigned long long)arg2;
@property(retain, nonatomic) NSNumber *bundleOnly;
@property(retain, nonatomic) NSNumber *clearedForHDVOD;
@property(retain, nonatomic) NSString *physicalReleaseDate;
@property(retain, nonatomic) NSString *unavailableForVODDate;
@property(retain, nonatomic) NSString *availableForVODDate;
@property(retain, nonatomic) NSString *vodType;
@property(retain, nonatomic) NSNumber *clearedForVOD;
@property(retain, nonatomic) NSNumber *clearedForHDSale;
@property(retain, nonatomic) NSString *salesEndDate;
@property(retain, nonatomic) NSString *salesStartDate;
@property(retain, nonatomic) NSString *preorderSalesStartDate;
@property(retain, nonatomic) NSString *wholesalePriceTier;
@property(retain, nonatomic) NSNumber *clearedForSale;
@property(retain, nonatomic) NSString *territory;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;
- (id)init;

@end

@interface VideoRatingContainerElementBase : AbstractElement
{
    NSArray *_ratings;
}

+ (id)allKnownKeyPaths;
- (id)descriptionWithLocale:(id)arg1 indent:(unsigned long long)arg2;
@property(retain, nonatomic) NSArray *ratings;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;
- (id)init;

@end

@interface VideoRatingElementBase : AbstractVideoRatingElement
{
}

+ (id)allKnownKeyPaths;
- (id)descriptionWithLocale:(id)arg1 indent:(unsigned long long)arg2;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;
- (id)init;

@end

@interface VideoRegionElementBase : AbstractElement
{
    NSString *_territory;
    NSString *_copyrightPline;
    NSString *_copyrightCline;
    NSString *_theatricalReleaseDate;
}

+ (id)allKnownKeyPaths;
- (id)descriptionWithLocale:(id)arg1 indent:(unsigned long long)arg2;
@property(retain, nonatomic) NSString *theatricalReleaseDate;
@property(retain, nonatomic) NSString *copyrightCline;
@property(retain, nonatomic) NSString *copyrightPline;
@property(retain, nonatomic) NSString *territory;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;
- (id)init;

@end

@interface AlbumProductElementBase : AbstractElement
{
    NSString *_territory;
    NSString *_wholesalePriceTier;
    NSString *_preorderWholesalePriceTier;
    NSString *_defaultTrackWholesalePriceTier;
    NSString *_salesStartDate;
    NSString *_preorderSalesStartDate;
    NSNumber *_clearedForSale;
    NSNumber *_sellPlusQuality;
    NSNumber *_clearedForTicketmaster;
    NSNumber *_bundleOnly;
}

+ (id)allKnownKeyPaths;
- (id)descriptionWithLocale:(id)arg1 indent:(unsigned long long)arg2;
@property(retain, nonatomic) NSNumber *bundleOnly;
@property(retain, nonatomic) NSNumber *clearedForTicketmaster;
@property(retain, nonatomic) NSNumber *sellPlusQuality;
@property(retain, nonatomic) NSNumber *clearedForSale;
@property(retain, nonatomic) NSString *preorderSalesStartDate;
@property(retain, nonatomic) NSString *salesStartDate;
@property(retain, nonatomic) NSString *defaultTrackWholesalePriceTier;
@property(retain, nonatomic) NSString *preorderWholesalePriceTier;
@property(retain, nonatomic) NSString *wholesalePriceTier;
@property(retain, nonatomic) NSString *territory;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;
- (id)init;

@end

@interface AssetContainerElementBase : AbstractElement
{
    NSString *_type;
    NSString *_productId;
    NSArray *_territories;
    NSArray *_dataFiles;
}

+ (id)allKnownKeyPaths;
- (id)descriptionWithLocale:(id)arg1 indent:(unsigned long long)arg2;
@property(retain, nonatomic) NSArray *dataFiles;
@property(retain, nonatomic) NSArray *territories;
@property(retain, nonatomic) NSString *productId;
@property(retain, nonatomic) NSString *type;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;
- (id)init;

@end

@interface AssetElementBase : AbstractElement
{
    NSString *_type;
    NSString *_role;
    NSString *_remove;
    LocaleContainerElement *_locale;
    NSString *_file;
    NSNumber *_size;
    ChecksumElement *_checksum;
    NSArray *_attributes;
}

+ (id)allKnownKeyPaths;
- (id)descriptionWithLocale:(id)arg1 indent:(unsigned long long)arg2;
@property(retain, nonatomic) NSArray *attributes;
@property(retain, nonatomic) ChecksumElement *checksum;
@property(retain, nonatomic) NSNumber *size;
@property(retain, nonatomic) NSString *file;
@property(retain, nonatomic) LocaleContainerElement *locale;
@property(retain, nonatomic) NSString *remove;
@property(retain, nonatomic) NSString *role;
@property(retain, nonatomic) NSString *type;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;
- (id)init;

@end

@interface ChapterElementBase : AbstractElement
{
    NSString *_startTime;
    NSArray *_titles;
    AssetElement *_artworkFile;
}

+ (id)allKnownKeyPaths;
- (id)descriptionWithLocale:(id)arg1 indent:(unsigned long long)arg2;
@property(retain, nonatomic) AssetElement *artworkFile;
@property(retain, nonatomic) NSArray *titles;
@property(retain, nonatomic) NSString *startTime;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;
- (id)init;

@end

@interface ChecksumElementBase : AbstractElement
{
    NSString *_type;
    NSString *_value;
}

+ (id)allKnownKeyPaths;
- (id)descriptionWithLocale:(id)arg1 indent:(unsigned long long)arg2;
@property(retain, nonatomic) NSString *value;
@property(retain, nonatomic) NSString *type;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;
- (id)init;

@end

@interface NameElementBase : AbstractElement
{
    NSString *_name;
}

+ (id)allKnownKeyPaths;
- (id)descriptionWithLocale:(id)arg1 indent:(unsigned long long)arg2;
@property(retain, nonatomic) NSString *name;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;
- (id)init;

@end

@interface TrackProductElementBase : AbstractElement
{
    NSString *_territory;
    NSString *_wholesalePriceTier;
    NSNumber *_clearedForSale;
    NSString *_salesStartDate;
    NSNumber *_clearedForUserGeneratedRingtones;
    NSNumber *_bundleOnly;
}

+ (id)allKnownKeyPaths;
- (id)descriptionWithLocale:(id)arg1 indent:(unsigned long long)arg2;
@property(retain, nonatomic) NSNumber *bundleOnly;
@property(retain, nonatomic) NSNumber *clearedForUserGeneratedRingtones;
@property(retain, nonatomic) NSString *salesStartDate;
@property(retain, nonatomic) NSNumber *clearedForSale;
@property(retain, nonatomic) NSString *wholesalePriceTier;
@property(retain, nonatomic) NSString *territory;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;
- (id)init;

@end

@interface AbstractTrackContainerBase : AbstractElement
{
    NSArray *_tracks;
}

+ (id)allKnownKeyPaths;
- (id)descriptionWithLocale:(id)arg1 indent:(unsigned long long)arg2;
@property(retain, nonatomic) NSArray *tracks;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;
- (id)init;

@end

@interface TrackGroupElement : TrackGroupElementBase
{
}

+ (void)initialize;
- (id)init;

@end

@interface TrackGroupElementBase : AbstractTrackContainer
{
    NSString *_name;
    NSString *_vendorId;
    NSArray *_artwork;
}

+ (id)allKnownKeyPaths;
- (id)descriptionWithLocale:(id)arg1 indent:(unsigned long long)arg2;
@property(retain, nonatomic) NSArray *artwork;
@property(retain, nonatomic) NSString *vendorId;
@property(retain, nonatomic) NSString *name;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;
- (id)init;

@end

@interface ITunesPackageFactory : NSObject
{
}

+ (id)sharedFactory;
- (void)appendSoftwareIapElementsToPackageElement:(id)arg1;
- (id)defaultPublicationProductsWithError:(id *)arg1;
- (void)generatePublicationVendorIdCompleted:(id)arg1;
- (void)generatePublicationVendorIdForBook:(id)arg1;
- (void)appendPublicationElementsToPackageElement:(id)arg1 forPublicationType:(id)arg2;
- (id)fallbackDefaultAlbumProductsForType:(int)arg1;
- (id)defaultAlbumProductsForType:(int)arg1 WithError:(id *)arg2;
- (void)appendMusicElementsToPackageElement:(id)arg1 forType:(int)arg2;
- (void)appendAssetElementsToPackageElement:(id)arg1;
- (id)packageVersionForType:(int)arg1;
- (id)packageOfType:(int)arg1;

@end

@interface WorkElement : WorkElementBase
{
}

+ (void)initialize;
- (id)defaultTitle;
- (id)init;

@end

@interface WorkElementBase : AbstractTrackContainer
{
    NSString *_name;
}

+ (id)allKnownKeyPaths;
- (id)descriptionWithLocale:(id)arg1 indent:(unsigned long long)arg2;
@property(retain, nonatomic) NSString *name;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;
- (id)init;

@end

@interface AbstractSalableElementBase : AbstractElement
{
    NSString *_vendorId;
    XidElement *_xid;
}

+ (id)allKnownKeyPaths;
- (id)descriptionWithLocale:(id)arg1 indent:(unsigned long long)arg2;
@property(retain, nonatomic) XidElement *xid;
@property(retain, nonatomic) NSString *vendorId;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;
- (id)init;

@end

@interface ArtistElementBase : AbstractElement
{
    NSArray *_names;
    NSString *_name;
    NSString *_phoneticName;
    NSNumber *_appleId;
    NSArray *_roles;
    NSArray *_locales;
    NSNumber *_primary;
}

+ (id)allKnownKeyPaths;
- (id)descriptionWithLocale:(id)arg1 indent:(unsigned long long)arg2;
@property(retain, nonatomic) NSNumber *primary;
@property(retain, nonatomic) NSArray *locales;
@property(retain, nonatomic) NSArray *roles;
@property(retain, nonatomic) NSNumber *appleId;
@property(retain, nonatomic) NSString *phoneticName;
@property(retain, nonatomic) NSString *name;
@property(retain, nonatomic) NSArray *names;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;
- (id)init;

@end

@interface LocalizedStringElementBase : AbstractElement
{
    NSString *_translation;
    NSString *_locale;
    NSString *_value;
}

+ (id)allKnownKeyPaths;
- (id)descriptionWithLocale:(id)arg1 indent:(unsigned long long)arg2;
@property(retain, nonatomic) NSString *value;
@property(retain, nonatomic) NSString *locale;
@property(retain, nonatomic) NSString *translation;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;
- (id)init;

@end

@interface MusicExtraElementBase : AbstractSalableElement
{
    NSString *_title;
    NSNumber *_volume;
    NSNumber *_trackNumber;
    NSArray *_locales;
    NSArray *_screenshots;
    NSArray *_extraProducts;
    AssetElement *_archive;
    NSArray *_videoItems;
    NSString *_vendorOfferCode;
}

+ (id)allKnownKeyPaths;
- (id)descriptionWithLocale:(id)arg1 indent:(unsigned long long)arg2;
@property(retain, nonatomic) NSString *vendorOfferCode;
@property(retain, nonatomic) NSArray *videoItems;
@property(retain, nonatomic) AssetElement *archive;
@property(retain, nonatomic) NSArray *extraProducts;
@property(retain, nonatomic) NSArray *screenshots;
@property(retain, nonatomic) NSArray *locales;
@property(retain, nonatomic) NSNumber *trackNumber;
@property(retain, nonatomic) NSNumber *volume;
@property(retain, nonatomic) NSString *title;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;
- (id)init;

@end

@interface MusicExtraVideoItemElementBase : AbstractSalableElement
{
    NSString *_path;
    NSArray *_assets;
}

+ (id)allKnownKeyPaths;
- (id)descriptionWithLocale:(id)arg1 indent:(unsigned long long)arg2;
@property(retain, nonatomic) NSArray *assets;
@property(retain, nonatomic) NSString *path;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;
- (id)init;

@end

@interface XidElementBase : AbstractElement
{
    NSString *_scheme;
    NSString *_xid;
}

+ (id)allKnownKeyPaths;
- (id)descriptionWithLocale:(id)arg1 indent:(unsigned long long)arg2;
@property(retain, nonatomic) NSString *xid;
@property(retain, nonatomic) NSString *scheme;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;
- (id)init;

@end

@interface MusicExtraElement : MusicExtraElementBase <Track, TrackNumberAndVolume>
{
}

+ (void)initialize;
- (id)products;
- (void)setProducts:(id)arg1;
- (void)synchronizeProductsToTerritories:(id)arg1;
- (id)buildTrackProductElement:(id)arg1;
- (id)productWithTerritory:(id)arg1;
- (id)file;
- (void)setFile:(id)arg1;
- (BOOL)isBooklet;
- (BOOL)isITunesLP;
- (BOOL)isBonusMaterial;
- (double)duration;
- (void)setDuration:(double)arg1;
- (id)durationStringWithSeconds;
- (long long)compare:(id)arg1;
- (void)setNameWithAlbumTitle:(id)arg1;
- (void)setDefaultTitle:(id)arg1;
- (id)defaultTitle;
- (void)setFileElement:(id)arg1;
- (id)init;

@end

@interface MusicExtraVideoItemElement : MusicExtraVideoItemElementBase
{
}

+ (void)initialize;
- (id)init;

@end

@interface XidElement : XidElementBase
{
}

+ (void)initialize;
- (id)init;

@end

@interface AbstractSalableElement : AbstractSalableElementBase
{
}

+ (void)initialize;
- (void)setVendorIdWithoutPostingNotifications:(id)arg1;
- (id)init;

@end

@interface BonusMaterialElementBase : AbstractElement
{
    NSString *_vendorId;
    XidElement *_xid;
    NSString *_name;
    NSString *_copyright;
    AssetElement *_file;
}

+ (id)allKnownKeyPaths;
- (id)descriptionWithLocale:(id)arg1 indent:(unsigned long long)arg2;
@property(retain, nonatomic) AssetElement *file;
@property(retain, nonatomic) NSString *copyright;
@property(retain, nonatomic) NSString *name;
@property(retain, nonatomic) XidElement *xid;
@property(retain, nonatomic) NSString *vendorId;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;
- (id)init;

@end

@interface AbstractMusicElementBase : AbstractCopyrightableElement
{
    NSString *_labelName;
    NSString *_grid;
    NSArray *_titles;
    NSString *_phoneticTitle;
    NSArray *_titleVersions;
    NSString *_phoneticTitleVersion;
    NSArray *_locales;
}

+ (id)allKnownKeyPaths;
- (id)descriptionWithLocale:(id)arg1 indent:(unsigned long long)arg2;
@property(retain, nonatomic) NSArray *locales;
@property(retain, nonatomic) NSString *phoneticTitleVersion;
@property(retain, nonatomic) NSArray *titleVersions;
@property(retain, nonatomic) NSString *phoneticTitle;
@property(retain, nonatomic) NSArray *titles;
@property(retain, nonatomic) NSString *grid;
@property(retain, nonatomic) NSString *labelName;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;
- (id)init;

@end

@interface BulkContainerElement : BulkContainerElementBase
{
}

+ (void)initialize;
- (id)init;

@end

@interface BulkContainerElementBase : AbstractElement
{
    NSString *_scheme;
    NSArray *_dataFiles;
}

+ (id)allKnownKeyPaths;
- (id)descriptionWithLocale:(id)arg1 indent:(unsigned long long)arg2;
@property(retain, nonatomic) NSArray *dataFiles;
@property(retain, nonatomic) NSString *scheme;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;
- (id)init;

@end

@interface AlbumElementBase : AbstractMusicElement
{
    NSString *_type;
    NSString *_upc;
    NSString *_originalReleaseDate;
    NSArray *_artwork;
    NSString *_shortDescription;
    NSString *_longDescription;
    NSNumber *_preorderPreviewAllowed;
    NSNumber *_trackCount;
    NSArray *_products;
    NSArray *_tracks;
}

+ (id)allKnownKeyPaths;
- (id)descriptionWithLocale:(id)arg1 indent:(unsigned long long)arg2;
@property(retain, nonatomic) NSArray *tracks;
@property(retain, nonatomic) NSArray *products;
@property(retain, nonatomic) NSNumber *trackCount;
@property(retain, nonatomic) NSNumber *preorderPreviewAllowed;
@property(retain, nonatomic) NSString *longDescription;
@property(retain, nonatomic) NSString *shortDescription;
@property(retain, nonatomic) NSArray *artwork;
@property(retain, nonatomic) NSString *originalReleaseDate;
@property(retain, nonatomic) NSString *upc;
@property(retain, nonatomic) NSString *type;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;
- (id)init;

@end

@interface TrackElementBase : AbstractMusicElement
{
    NSString *_type;
    NSString *_isrc;
    NSString *_sourceIsrc;
    NSNumber *_gaplessPlay;
    NSArray *_products;
    NSString *_explicitContent;
    NSString *_lyrics;
    NSString *_lyricsFormat;
    NSNumber *_removeLyrics;
    NSString *_linerNotes;
    NSString *_beatsPerMinute;
    NSNumber *_volume;
    NSNumber *_trackNumber;
    AssetElement *_file;
    NSNumber *_toneStartTime;
    NSNumber *_toneDuration;
    NSString *_previewStartIndex;
    NSString *_language;
    NSString *_preorderType;
    NSArray *_chapters;
}

+ (id)allKnownKeyPaths;
- (id)descriptionWithLocale:(id)arg1 indent:(unsigned long long)arg2;
@property(retain, nonatomic) NSArray *chapters;
@property(retain, nonatomic) NSString *preorderType;
@property(retain, nonatomic) NSString *language;
@property(retain, nonatomic) NSString *previewStartIndex;
@property(retain, nonatomic) NSNumber *toneDuration;
@property(retain, nonatomic) NSNumber *toneStartTime;
@property(retain, nonatomic) AssetElement *file;
@property(retain, nonatomic) NSNumber *trackNumber;
@property(retain, nonatomic) NSNumber *volume;
@property(retain, nonatomic) NSString *beatsPerMinute;
@property(retain, nonatomic) NSString *linerNotes;
@property(retain, nonatomic) NSNumber *removeLyrics;
@property(retain, nonatomic) NSString *lyricsFormat;
@property(retain, nonatomic) NSString *lyrics;
@property(retain, nonatomic) NSString *explicitContent;
@property(retain, nonatomic) NSArray *products;
@property(retain, nonatomic) NSNumber *gaplessPlay;
@property(retain, nonatomic) NSString *sourceIsrc;
@property(retain, nonatomic) NSString *isrc;
@property(retain, nonatomic) NSString *type;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;
- (id)init;

@end

@interface BookContainerElement : BookContainerElementBase
{
}

+ (void)initialize;
+ (id)keyPathsForValuesAffectingIPadScreenshots;
+ (id)keyPathsForValuesAffectingHoldVersionForPreview;
+ (id)keyPathsForValuesAffectingHasPublication;
+ (id)keyPathsForValuesAffectingHasPreview;
+ (id)keyPathsForValuesAffectingPreviewAppliesToVersion;
- (void)removeInitialElements;
- (void)setAssets:(id)arg1;
- (void)setPreviewAppliesToVersion:(id)arg1;
- (id)previewAppliesToVersion;
- (BOOL)hasScreenshots;
- (BOOL)hasPublication;
- (BOOL)hasPreview;
- (BOOL)hasCoverArt;
- (id)screenshots;
- (void)setIPadScreenshots:(id)arg1;
- (id)iPadScreenshots;
- (id)iPadScreenshotContainerCreatingIfNeeded;
- (id)iPadScreenshotContainer;
- (id)previewContainerCreatingIfNeeded;
- (id)previewContainer;
- (id)publicationContainerCreatingIfNeeded;
- (id)publicationContainer;
- (id)coverArtContainerCreatingIfNeeded;
- (id)coverArtContainer;
- (id)assetContainerElementCreatingIfNeededWithType:(id)arg1;
- (id)assetContainerElementWithType:(id)arg1;
- (id)init;

@end

@interface BookContainerElementBase : AbstractSalableElement
{
    BookMetadataElement *_metadata;
    NSArray *_assets;
    NSNumber *_holdVersionForPreview;
}

+ (id)allKnownKeyPaths;
- (id)descriptionWithLocale:(id)arg1 indent:(unsigned long long)arg2;
@property(retain, nonatomic) NSNumber *holdVersionForPreview;
@property(retain, nonatomic) NSArray *assets;
@property(retain, nonatomic) BookMetadataElement *metadata;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;
- (id)init;

@end

@interface BookMetadataElement : BookMetadataElementBase
{
    NSMutableDictionary *_userInfo;
}

+ (id)keyPathsForValuesAffectingCoverPreorderPreviews;
+ (id)allKnownKeyPaths;
+ (void)initialize;
- (BOOL)isTextbookPublicationBookType;
- (void)setContributors:(id)arg1;
- (void)setSubjects:(id)arg1;
- (void)removeInitialElements;
- (BOOL)cleanArray:(id *)arg1;
- (id)productsCover;
- (void)setProducts:(id)arg1;
- (id)userInfo;
- (void)setCoverPreorderPreviews:(id)arg1;
- (id)coverPreorderPreviews;
- (void)setDefaultSequenceShouldSupress:(id)arg1;
- (id)defaultSequenceShouldSupress;
- (void)setDefaultSequenceDisplayString:(id)arg1;
- (id)defaultSequenceDisplayString;
- (void)setDefaultSequenceNumber:(id)arg1;
- (id)defaultSequenceNumber;
- (void)setDefaultSeriesPhoneticName:(id)arg1;
- (id)defaultSeriesPhoneticName;
- (void)setDefaultSeriesName:(id)arg1;
- (id)defaultSeriesName;
- (id)defaultSeriesElementInsertingIfNeeded;
- (id)defaultSeriesElement;
- (void)setIsbn13:(id)arg1;
- (id)isbn13;
- (id)setIsbn13IdentifierInsertingIfNeeded:(id)arg1;
- (id)isbn13Identifier;
- (id)productWithTerritoryCode:(id)arg1;
- (id)bookProductElement;
- (id)defaultPreOrderSalesStartDate;
- (id)defaultSalesStartDate;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;
- (id)init;

@end

@interface BookMetadataElementBase : AbstractElement
{
    NSString *_publicationType;
    NSArray *_identifiers;
    NSArray *_relatedContentItems;
    NSArray *_series;
    NSString *_title;
    NSString *_phoneticTitle;
    NSString *_subtitle;
    NSString *_phoneticSubtitle;
    NSArray *_contributors;
    NSArray *_languages;
    NSString *_numberOfPages;
    NSArray *_subjects;
    BookDescriptionElement *_contentDescription;
    NSString *_imprint;
    NSString *_publisher;
    NSNumber *_preorderPreviews;
    NSNumber *_explicitContent;
    NSString *_publicationDate;
    BookEmbedElement *_embed;
    NSArray *_products;
    NSArray *_audiences;
    BookVersionElement *_versionWhatsNew;
    NSNumber *_multitouchExpected;
}

+ (id)allKnownKeyPaths;
- (id)descriptionWithLocale:(id)arg1 indent:(unsigned long long)arg2;
@property(retain, nonatomic) NSNumber *multitouchExpected;
@property(retain, nonatomic) BookVersionElement *versionWhatsNew;
@property(retain, nonatomic) NSArray *audiences;
@property(retain, nonatomic) NSArray *products;
@property(retain, nonatomic) BookEmbedElement *embed;
@property(retain, nonatomic) NSString *publicationDate;
@property(retain, nonatomic) NSNumber *explicitContent;
@property(retain, nonatomic) NSNumber *preorderPreviews;
@property(retain, nonatomic) NSString *publisher;
@property(retain, nonatomic) NSString *imprint;
@property(retain, nonatomic) BookDescriptionElement *contentDescription;
@property(retain, nonatomic) NSArray *subjects;
@property(retain, nonatomic) NSString *numberOfPages;
@property(retain, nonatomic) NSArray *languages;
@property(retain, nonatomic) NSArray *contributors;
@property(retain, nonatomic) NSString *phoneticSubtitle;
@property(retain, nonatomic) NSString *subtitle;
@property(retain, nonatomic) NSString *phoneticTitle;
@property(retain, nonatomic) NSString *title;
@property(retain, nonatomic) NSArray *series;
@property(retain, nonatomic) NSArray *relatedContentItems;
@property(retain, nonatomic) NSArray *identifiers;
@property(retain, nonatomic) NSString *publicationType;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;
- (id)init;

@end

@interface BookProductElement : BookProductElementBase
{
}

+ (void)initialize;
- (void)setCurrency:(id)arg1;
- (id)currency;
- (void)setSuggestedRetailPrice:(id)arg1;
- (id)suggestedRetailPrice;
- (id)physicalListPriceInsertingIfNeeded;
- (void)notifyObserversOfPricingChange;
- (id)init;

@end

@interface BookProductElementBase : AbstractElement
{
    NSString *_territory;
    NSNumber *_clearedForSale;
    NSString *_wholesalePriceTier;
    NSString *_releaseType;
    NSString *_preorderSalesStartDate;
    NSString *_salesStartDate;
    NSString *_salesEndDate;
    BookPricingElement *_physicalListPrice;
    NSNumber *_drmFree;
}

+ (id)allKnownKeyPaths;
- (id)descriptionWithLocale:(id)arg1 indent:(unsigned long long)arg2;
@property(retain, nonatomic) NSNumber *drmFree;
@property(retain, nonatomic) BookPricingElement *physicalListPrice;
@property(retain, nonatomic) NSString *salesEndDate;
@property(retain, nonatomic) NSString *salesStartDate;
@property(retain, nonatomic) NSString *preorderSalesStartDate;
@property(retain, nonatomic) NSString *releaseType;
@property(retain, nonatomic) NSString *wholesalePriceTier;
@property(retain, nonatomic) NSNumber *clearedForSale;
@property(retain, nonatomic) NSString *territory;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;
- (id)init;

@end

@interface BookContributorElement : BookContributorElementBase
{
}

+ (void)initialize;
- (void)setRoles:(id)arg1;
- (void)setAppleId:(id)arg1;
- (void)setSortName:(id)arg1;
- (void)setPhoneticName:(id)arg1;
- (void)setPrimary:(id)arg1;
- (void)setName:(id)arg1;
- (void)setDefaultRole:(id)arg1;
- (id)defaultRole;
- (id)initWithDefaultRole;
- (id)init;

@end

@interface BookContributorElementBase : AbstractElement
{
    NSNumber *_primary;
    NSString *_name;
    NSString *_phoneticName;
    NSString *_sortName;
    NSNumber *_appleId;
    NSArray *_roles;
}

+ (id)allKnownKeyPaths;
- (id)descriptionWithLocale:(id)arg1 indent:(unsigned long long)arg2;
@property(retain, nonatomic) NSArray *roles;
@property(retain, nonatomic) NSNumber *appleId;
@property(retain, nonatomic) NSString *sortName;
@property(retain, nonatomic) NSString *phoneticName;
@property(retain, nonatomic) NSString *name;
@property(retain, nonatomic) NSNumber *primary;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;
- (id)init;

@end

@interface BookDescriptionElement : BookDescriptionElementBase
{
}

+ (int)formatCodeWithString:(id)arg1;
+ (id)stringWithFormatCode:(int)arg1;
+ (void)initialize;
- (int)formatCode;
- (void)setFormatCode:(int)arg1;
- (id)init;

@end

@interface BookDescriptionElementBase : AbstractElement
{
    NSString *_format;
    NSString *_content;
}

+ (id)allKnownKeyPaths;
- (id)descriptionWithLocale:(id)arg1 indent:(unsigned long long)arg2;
@property(retain, nonatomic) NSString *content;
@property(retain, nonatomic) NSString *format;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;
- (id)init;

@end

@interface BookIdentifierElement : BookIdentifierElementBase
{
}

+ (id)displayStringWithSchemeCode:(int)arg1;
+ (int)schemeCodeWithString:(id)arg1;
+ (id)stringWithSchemeCode:(int)arg1;
+ (void)initialize;
- (int)schemeCode;
- (void)setSchemeCode:(int)arg1;
- (id)initWithIsbn13:(id)arg1;
- (id)initWithIsbn10:(id)arg1;
- (id)init;

@end

@interface BookIdentifierElementBase : AbstractElement
{
    NSString *_scheme;
    NSString *_identifier;
}

+ (id)allKnownKeyPaths;
- (id)descriptionWithLocale:(id)arg1 indent:(unsigned long long)arg2;
@property(retain, nonatomic) NSString *identifier;
@property(retain, nonatomic) NSString *scheme;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;
- (id)init;

@end

@interface BookLanguageElement : BookLanguageElementBase
{
}

+ (int)typeCodeWithString:(id)arg1;
+ (id)stringWithTypeCode:(int)arg1;
+ (void)initialize;
- (int)typeCode;
- (void)setTypeCode:(int)arg1;
- (void)setMainLanguage:(id)arg1;
- (BOOL)isMainLanguage;
- (id)init;

@end

@interface BookLanguageElementBase : AbstractElement
{
    NSString *_type;
    NSString *_language;
}

+ (id)allKnownKeyPaths;
- (id)descriptionWithLocale:(id)arg1 indent:(unsigned long long)arg2;
@property(retain, nonatomic) NSString *language;
@property(retain, nonatomic) NSString *type;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;
- (id)init;

@end

@interface BookPricingElement : BookPricingElementBase
{
}

+ (void)initialize;
- (void)setPrice:(id)arg1;
- (void)setCurrency:(id)arg1;
- (id)init;

@end

@interface BookPricingElementBase : AbstractElement
{
    NSString *_currency;
    NSString *_price;
}

+ (id)allKnownKeyPaths;
- (id)descriptionWithLocale:(id)arg1 indent:(unsigned long long)arg2;
@property(retain, nonatomic) NSString *price;
@property(retain, nonatomic) NSString *currency;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;
- (id)init;

@end

@interface BookRelatedContentElement : BookRelatedContentElementBase
{
}

+ (BOOL)automaticallyNotifiesObserversForKey:(id)arg1;
+ (void)initialize;
- (id)allIdentifiersStringArray;
- (void)setIdentifiers:(id)arg1;
- (void)setIsbn13:(id)arg1;
- (id)isbn13;
- (void)setIsbn10:(id)arg1;
- (id)isbn10;
- (id)init;
- (id)initUsingDefaultType;

@end

@interface BookRelatedContentElementBase : AbstractElement
{
    NSString *_type;
    NSArray *_identifiers;
}

+ (id)allKnownKeyPaths;
- (id)descriptionWithLocale:(id)arg1 indent:(unsigned long long)arg2;
@property(retain, nonatomic) NSArray *identifiers;
@property(retain, nonatomic) NSString *type;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;
- (id)init;

@end

@interface BookSeriesElement : BookSeriesElementBase
{
}

+ (void)initialize;
- (id)init;

@end

@interface BookSeriesElementBase : AbstractElement
{
    NSString *_title;
    NSString *_phoneticTitle;
    NSString *_sequenceNumber;
    NSString *_sequenceDisplayString;
    NSNumber *_sequenceSuppressed;
}

+ (id)allKnownKeyPaths;
- (id)descriptionWithLocale:(id)arg1 indent:(unsigned long long)arg2;
@property(retain, nonatomic) NSNumber *sequenceSuppressed;
@property(retain, nonatomic) NSString *sequenceDisplayString;
@property(retain, nonatomic) NSString *sequenceNumber;
@property(retain, nonatomic) NSString *phoneticTitle;
@property(retain, nonatomic) NSString *title;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;
- (id)init;

@end

@interface BookSubjectElement : BookSubjectElementBase
{
    NSString *_mainCategory;
    NSString *_subCategory;
}

+ (void)initialize;
- (void)setSubject:(id)arg1;
- (void)setScheme:(id)arg1;
- (void)setPrimary:(id)arg1;
- (void)setSubCategory:(id)arg1;
- (id)subCategory;
- (void)setMainCategory:(id)arg1;
- (id)mainCategory;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;
- (id)init;

@end

@interface BookSubjectElementBase : AbstractElement
{
    NSNumber *_primary;
    NSString *_scheme;
    NSString *_subject;
}

+ (id)allKnownKeyPaths;
- (id)descriptionWithLocale:(id)arg1 indent:(unsigned long long)arg2;
@property(retain, nonatomic) NSString *subject;
@property(retain, nonatomic) NSString *scheme;
@property(retain, nonatomic) NSNumber *primary;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;
- (id)init;

@end

@interface ONIXHybridSpecToBookSpecConverter : NSObject <ITunesPackageLoaderProcessingDelegate>
{
}

- (id)postprocessObjectAfterUnmarshalling:(id)arg1 document:(id)arg2;
- (void)convertONIXEmbed:(id)arg1 metadata:(id)arg2 document:(id)arg3;
- (void)convertONIXEmbed:(id)arg1 metadata:(id)arg2 product:(id)arg3;
- (id)preprocessDocumentPriorToUnmarshalling:(id)arg1;
- (id)contributorMappings;

@end

@interface MusicScreenshotElement : MusicScreenshotElementBase
{
}

+ (void)initialize;
- (id)init;

@end

@interface MusicScreenshotElementBase : AbstractElement
{
    NSString *_fileName;
    NSString *_size;
    NSString *_checksum;
    NSString *_type;
}

+ (BOOL)automaticallyNotifiesObserversForKey:(id)arg1;
- (id)descriptionWithLocale:(id)arg1 indent:(unsigned long long)arg2;
- (id)type;
- (void)setType:(id)arg1;
- (id)checksum;
- (void)setChecksum:(id)arg1;
- (id)size;
- (void)setSize:(id)arg1;
- (id)fileName;
- (void)setFileName:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;
- (id)init;

@end

@interface BookEmbedElement : BookEmbedElementBase
{
}

+ (void)initialize;
- (void)setContent:(id)arg1;
- (id)init;

@end

@interface BookEmbedElementBase : AbstractElement
{
    NSString *_format;
    NSArray *_content;
}

+ (id)allKnownKeyPaths;
- (id)descriptionWithLocale:(id)arg1 indent:(unsigned long long)arg2;
@property(retain, nonatomic) NSArray *content;
@property(retain, nonatomic) NSString *format;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;
- (id)init;

@end

@interface ScreenshotAssetElement : ScreenshotAssetElementBase
{
}

+ (void)initialize;
- (id)order;
- (BOOL)isDefaultScreenshot;
- (id)init;

@end

@interface ScreenshotAssetElementBase : AssetElement
{
}

+ (id)allKnownKeyPaths;
- (id)descriptionWithLocale:(id)arg1 indent:(unsigned long long)arg2;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;
- (id)init;

@end

@interface BookNamespaceFixer : NSObject <ITunesPackageLoaderProcessingDelegate>
{
}

- (id)preprocessObjectPriorToMarshalling:(id)arg1;
- (id)postprocessDocumentAfterMarshalling:(id)arg1 object:(id)arg2;
- (id)postprocessObjectAfterUnmarshalling:(id)arg1 document:(id)arg2;
- (id)preprocessDocumentPriorToUnmarshalling:(id)arg1;
- (id)problematicNamespaces;

@end

@interface SoftwareAssetsContainerElement : SoftwareAssetsContainerElementBase
{
}

+ (void)initialize;
- (id)init;

@end

@interface SoftwareAssetsContainerElementBase : AbstractElement
{
    NSString *_appleId;
    NSString *_bundleShortVersionString;
    NSString *_bundleVersion;
    NSString *_bundleIdentifier;
    NSNumber *_verifiedUnder30;
    NSNumber *_verifiedUnder40;
    NSString *_verifiedUnderVersion;
    NSArray *_assets;
}

+ (id)allKnownKeyPaths;
- (id)descriptionWithLocale:(id)arg1 indent:(unsigned long long)arg2;
@property(retain, nonatomic) NSArray *assets;
@property(retain, nonatomic) NSString *verifiedUnderVersion;
@property(retain, nonatomic) NSNumber *verifiedUnder40;
@property(retain, nonatomic) NSNumber *verifiedUnder30;
@property(retain, nonatomic) NSString *bundleIdentifier;
@property(retain, nonatomic) NSString *bundleVersion;
@property(retain, nonatomic) NSString *bundleShortVersionString;
@property(retain, nonatomic) NSString *appleId;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;
- (id)init;

@end

@interface SoftwareFamilyElement : SoftwareFamilyElementBase
{
}

+ (void)initialize;
- (BOOL)isFamily;
- (id)initWithName:(id)arg1;
- (id)init;

@end

@interface SoftwareFamilyElementBase : AbstractSoftwareInAppPurchaseElement
{
    NSString *_name;
    NSArray *_inAppPurchases;
}

+ (id)allKnownKeyPaths;
- (id)descriptionWithLocale:(id)arg1 indent:(unsigned long long)arg2;
@property(retain, nonatomic) NSArray *inAppPurchases;
@property(retain, nonatomic) NSString *name;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;
- (id)init;

@end

@interface BookBic2BicConverter : NSObject <ITunesPackageLoaderProcessingDelegate>
{
}

- (id)postprocessObjectAfterUnmarshalling:(id)arg1 document:(id)arg2;
- (id)preprocessDocumentPriorToUnmarshalling:(id)arg1;

@end

@interface SoftwareInAppPurchaseElement : SoftwareInAppPurchaseElementBase
{
}

+ (id)iTunesConnectPurpleSoftwareTypeForMacOS;
+ (id)iTunesConnectPurpleSoftwareTypeForIOS;
+ (void)initialize;
- (id)products;
- (void)setProducts:(id)arg1;
- (id)iapContentAssetContainerElementCreatingIfNeeded;
- (id)iapContentAssetContainerElement;
- (id)assetContainerElementWithType:(id)arg1;
- (BOOL)addSoftwareIAPInfoFromElement:(id)arg1 error:(id *)arg2;
- (id)defaultProductIntervalsWithoutTopLevelInterval;
- (id)defaultProductIntervalsWithTimeGapsFilledInUsingTopLevelInterval;
- (void)setDefaultProductIntervals:(id)arg1;
- (id)defaultProductIntervals;
- (void)setDefaultProductClearedForSale:(id)arg1;
- (id)defaultProductClearedForSale;
- (id)defaultProduct;
- (id)defaultProductInsertingIfNeeded;
- (BOOL)isSubscription;
- (BOOL)isNonConsumable;
- (BOOL)isConsumable;
- (BOOL)isAutoRenewable;
- (id)init;

@end

@interface SoftwareInAppPurchaseElementBase : AbstractSoftwareInAppPurchaseElement
{
    NSNumber *_remove;
    NSArray *_readOnlyInfo;
    NSString *_productId;
    NSString *_referenceName;
    NSString *_type;
    NSString *_duration;
    NSString *_bonusDuration;
    NSArray *_products;
    NSNumber *_hasHostedContent;
    NSArray *_softwareAssets;
}

+ (id)allKnownKeyPaths;
- (id)descriptionWithLocale:(id)arg1 indent:(unsigned long long)arg2;
@property(retain, nonatomic) NSArray *softwareAssets;
@property(retain, nonatomic) NSNumber *hasHostedContent;
@property(retain, nonatomic) NSArray *products;
@property(retain, nonatomic) NSString *bonusDuration;
@property(retain, nonatomic) NSString *duration;
@property(retain, nonatomic) NSString *type;
@property(retain, nonatomic) NSString *referenceName;
@property(retain, nonatomic) NSString *productId;
@property(retain, nonatomic) NSArray *readOnlyInfo;
@property(retain, nonatomic) NSNumber *remove;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;
- (id)init;

@end

@interface SoftwareMetadataElement : SoftwareMetadataElementBase
{
}

+ (void)initialize;
- (BOOL)addSoftwareMetadataInfoFromElement:(id)arg1 error:(id *)arg2;
- (id)findSameInAppPurchase:(id)arg1;
- (void)addInAppPurchase:(id)arg1;
- (void)addInAppPurchases:(id)arg1;
- (id)findNonFamilyInAppPurchaseWithProductId:(id)arg1;
- (id)nonFamilyInAppPurchases;
- (id)familyWithNameInsertingIfNeeded:(id)arg1;
- (id)init;

@end

@interface SoftwareMetadataElementBase : AbstractElement
{
    NSArray *_inAppPurchases;
}

+ (id)allKnownKeyPaths;
- (id)descriptionWithLocale:(id)arg1 indent:(unsigned long long)arg2;
@property(retain, nonatomic) NSArray *inAppPurchases;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;
- (id)init;

@end

@interface SoftwareProductElement : SoftwareProductElementBase
{
}

+ (void)initialize;
- (id)intervals;
- (void)setIntervals:(id)arg1;
- (id)init;

@end

@interface SoftwareProductElementBase : AbstractProductElement
{
}

+ (id)allKnownKeyPaths;
- (id)descriptionWithLocale:(id)arg1 indent:(unsigned long long)arg2;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;
- (id)init;

@end

@interface ITunesPackageTypes : NSObject
{
}

+ (id)nameForType:(int)arg1;
+ (int)typeForName:(id)arg1;
+ (id)typeToNameDict;
+ (id)nameToTypeDict;

@end

@interface AbstractSoftwareInAppPurchaseElement : AbstractSoftwareInAppPurchaseElementBase
{
}

+ (void)initialize;
- (void)addLocale:(id)arg1;
- (void)addLocales:(id)arg1;
- (id)findLocaleWithName:(id)arg1;
- (BOOL)isFamily;
- (id)init;

@end

@interface AbstractSoftwareInAppPurchaseElementBase : AbstractElement
{
    NSArray *_locales;
    NSString *_reviewNotes;
    AssetElement *_reviewScreenshot;
}

+ (id)allKnownKeyPaths;
- (id)descriptionWithLocale:(id)arg1 indent:(unsigned long long)arg2;
@property(retain, nonatomic) AssetElement *reviewScreenshot;
@property(retain, nonatomic) NSString *reviewNotes;
@property(retain, nonatomic) NSArray *locales;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;
- (id)init;

@end

@interface AbstractProductElement : AbstractProductElementBase
{
}

+ (void)initialize;
- (id)intervalsWithTimeGapsFilledInUsingTopLevelInterval;
- (id)intervalsWithoutTopLevelInterval;
- (BOOL)fixTopLevelIntervalIfNeeded;
- (BOOL)hasExistingTopLevelInterval;
- (id)existingTopLevelInterval;
- (id)createTopLevelIntervalIfAvailable;
- (id)init;

@end

@interface AbstractProductElementBase : AbstractElement
{
    NSString *_territory;
    NSString *_wholesalePriceTier;
    NSString *_preorderWholesalePriceTier;
    NSString *_salesStartDate;
    NSString *_salesEndDate;
    NSString *_preorderSalesStartDate;
    NSNumber *_clearedForSale;
    NSNumber *_bundleOnly;
    NSArray *_intervals;
}

+ (id)allKnownKeyPaths;
- (id)descriptionWithLocale:(id)arg1 indent:(unsigned long long)arg2;
@property(retain, nonatomic) NSArray *intervals;
@property(retain, nonatomic) NSNumber *bundleOnly;
@property(retain, nonatomic) NSNumber *clearedForSale;
@property(retain, nonatomic) NSString *preorderSalesStartDate;
@property(retain, nonatomic) NSString *salesEndDate;
@property(retain, nonatomic) NSString *salesStartDate;
@property(retain, nonatomic) NSString *preorderWholesalePriceTier;
@property(retain, nonatomic) NSString *wholesalePriceTier;
@property(retain, nonatomic) NSString *territory;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;
- (id)init;

@end

@interface ProductIntervalElement : ProductIntervalElementBase
{
}

+ (void)initialize;
- (id)endDateAsDate;
- (id)startDateAsDate;
- (long long)compareBasedOnStartDate:(id)arg1;
- (id)init;

@end

@interface ProductIntervalElementBase : AbstractElement
{
    NSString *_startDate;
    NSString *_endDate;
    NSString *_wholesalePriceTier;
}

+ (id)allKnownKeyPaths;
- (id)descriptionWithLocale:(id)arg1 indent:(unsigned long long)arg2;
@property(retain, nonatomic) NSString *wholesalePriceTier;
@property(retain, nonatomic) NSString *endDate;
@property(retain, nonatomic) NSString *startDate;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;
- (id)init;

@end

@interface MZProductIntervalHelper : NSObject
{
    Class _intervalClass;
}

+ (id)helper;
- (BOOL)isDefaultInterval:(id)arg1;
- (id)_collapseIntervals:(id)arg1;
- (id)intervalsWithTimeGapsFilledInUsingTopLevelInterval:(id)arg1 intervals:(id)arg2;
- (id)createIntervalAndValidateWholesalePriceTier:(id)arg1 startDate:(id)arg2 endDate:(id)arg3 error:(id *)arg4;
- (id)_endDateForComparisonFromInterval:(id)arg1;
- (id)_startDateForComparisonFromInterval:(id)arg1;
- (BOOL)_isDate:(id)arg1 laterThanOrEqualTo:(id)arg2;
- (BOOL)_isDate:(id)arg1 laterThan:(id)arg2;
- (BOOL)_isDate:(id)arg1 earlierThanOrEqualTo:(id)arg2;
- (BOOL)_isDate:(id)arg1 earlierThan:(id)arg2;
- (id)_addNoneOptionToList:(id)arg1;
- (id)_addNowOptionToList:(id)arg1;
- (BOOL)isEndDateNoneForInterval:(id)arg1;
- (BOOL)isStartDateNoneForInterval:(id)arg1;
- (BOOL)isNeverStringValue:(id)arg1;
- (BOOL)isNoneStringValue:(id)arg1;
- (BOOL)isNowStringValue:(id)arg1;
- (id)_datePartWithFormat:(id)arg1 date:(id)arg2;
- (id)_datePartWithFormat:(id)arg1 dateString:(id)arg2;
- (id)neverString;
- (id)noneString;
- (id)nowString;
- (id)dateStringForDay:(id)arg1 month:(id)arg2 year:(id)arg3;
- (id)dateStringForDate:(id)arg1;
- (id)dateForDateString:(id)arg1;
- (id)yearFromDate:(id)arg1;
- (id)monthFromDate:(id)arg1;
- (id)dayFromDate:(id)arg1;
- (id)yearFromDateString:(id)arg1;
- (id)monthFromDateString:(id)arg1;
- (id)dayFromDateString:(id)arg1;
- (id)intervalsByAddingInterval:(id)arg1 toProduct:(id)arg2;
- (id)intervalsByRemovingInterval:(id)arg1 fromIntervals:(id)arg2;
- (id)intervalsByAddingInterval:(id)arg1 toIntervals:(id)arg2;
- (id)handleConflictingIntervals:(id)arg1 forNewInterval:(id)arg2;
- (id)addToplevelInterval:(id)arg1 toIntervals:(id)arg2;
- (id)orderIntervals:(id)arg1;
- (id)normalizedIntervalsWithProduct:(id)arg1;
- (id)allowedDaysWithSelectedYear:(id)arg1 month:(id)arg2 allowedIntervalDates:(id)arg3 addNowOptionToList:(BOOL)arg4 addNoneOptionToList:(BOOL)arg5;
- (id)allowedMonthsWithSelectedYear:(id)arg1 day:(id)arg2 allowedIntervalDates:(id)arg3 addNowOptionToList:(BOOL)arg4 addNoneOptionToList:(BOOL)arg5;
- (id)allowedYearsWithSelectedMonth:(id)arg1 day:(id)arg2 allowedIntervalDates:(id)arg3 addNowOptionToList:(BOOL)arg4 addNoneOptionToList:(BOOL)arg5;
- (id)allowedIntervalDatesAfterDate:(id)arg1;
- (id)allowedIntervalDates;
- (void)setIntervalClass:(Class)arg1;
- (Class)intervalClass;
- (void)dealloc;
- (id)init;

@end

@interface LocaleContainerElement : LocaleContainerElementBase
{
}

+ (void)initialize;
- (void)setDefault:(id)arg1;
- (id)default;
- (id)init;

@end

@interface LocaleContainerElementBase : AbstractElement
{
    NSString *_name;
    NSString *_title;
    NSString *_synopsis;
    NSNumber *_defaultValue;
    NSNumber *_remove;
    NSString *_contentDescription;
}

+ (id)allKnownKeyPaths;
- (id)descriptionWithLocale:(id)arg1 indent:(unsigned long long)arg2;
@property(retain, nonatomic) NSString *contentDescription;
@property(retain, nonatomic) NSNumber *remove;
@property(retain, nonatomic) NSNumber *defaultValue;
@property(retain, nonatomic) NSString *synopsis;
@property(retain, nonatomic) NSString *title;
@property(retain, nonatomic) NSString *name;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;
- (id)init;

@end

@interface BookAudienceElement : BookAudienceElementBase
{
}

+ (void)initialize;
+ (id)keyPathsForValuesAffectingDefaultMaxValue;
+ (id)keyPathsForValuesAffectingDefaultMinValue;
- (void)setRange:(id)arg1;
- (void)setValue:(id)arg1;
- (void)setScheme:(id)arg1;
- (void)setDefaultMaxValue:(id)arg1;
- (id)defaultMaxValue;
- (void)setDefaultMinValue:(id)arg1;
- (id)defaultMinValue;
- (id)rangeInsertingIfNeeded;
- (id)init;

@end

@interface BookAudienceElementBase : AbstractElement
{
    NSString *_scheme;
    NSString *_value;
    BookAudienceRangeElement *_range;
}

+ (id)allKnownKeyPaths;
- (id)descriptionWithLocale:(id)arg1 indent:(unsigned long long)arg2;
@property(retain, nonatomic) BookAudienceRangeElement *range;
@property(retain, nonatomic) NSString *value;
@property(retain, nonatomic) NSString *scheme;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;
- (id)init;

@end

@interface BookAudienceRangeElement : BookAudienceRangeElementBase
{
}

+ (void)initialize;
- (id)init;

@end

@interface BookAudienceRangeElementBase : AbstractElement
{
    NSString *_minValue;
    NSString *_maxValue;
}

+ (id)allKnownKeyPaths;
- (id)descriptionWithLocale:(id)arg1 indent:(unsigned long long)arg2;
@property(retain, nonatomic) NSString *maxValue;
@property(retain, nonatomic) NSString *minValue;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;
- (id)init;

@end

@interface AbstractCopyrightableElement : AbstractCopyrightableElementBase <ArtistableElement>
{
}

+ (void)initialize;
- (id)findExistingGenreWithName:(id)arg1 code:(id)arg2;
- (void)removeGenre:(id)arg1;
- (void)removeGenreAtPosition:(int)arg1;
- (void)removeGenreWithName:(id)arg1 code:(id)arg2;
- (id)addGenreAtPosition:(int)arg1 withCode:(id)arg2;
- (id)addGenreAtIndex:(unsigned long long)arg1 withCode:(id)arg2;
- (id)init;

@end

@interface AbstractCopyrightableElementBase : AbstractSalableElement
{
    NSArray *_genres;
    NSArray *_artists;
    NSString *_copyrightPline;
    NSString *_copyrightCline;
    NSString *_vendorOfferCode;
}

+ (id)allKnownKeyPaths;
- (id)descriptionWithLocale:(id)arg1 indent:(unsigned long long)arg2;
@property(retain, nonatomic) NSString *vendorOfferCode;
@property(retain, nonatomic) NSString *copyrightCline;
@property(retain, nonatomic) NSString *copyrightPline;
@property(retain, nonatomic) NSArray *artists;
@property(retain, nonatomic) NSArray *genres;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;
- (id)init;

@end

@interface MusicExtraLocaleElement : MusicExtraLocaleElementBase
{
}

+ (void)initialize;
- (id)default;
- (void)setDefault:(id)arg1;
- (void)setInternalDefault:(id)arg1;
- (id)init;

@end

@interface MusicExtraLocaleElementBase : AbstractElement
{
    NSString *_name;
    NSNumber *_defaultValue;
    NSNumber *_remove;
    NSString *_contentDescription;
}

+ (id)allKnownKeyPaths;
- (id)descriptionWithLocale:(id)arg1 indent:(unsigned long long)arg2;
@property(retain, nonatomic) NSString *contentDescription;
@property(retain, nonatomic) NSNumber *remove;
@property(retain, nonatomic) NSNumber *defaultValue;
@property(retain, nonatomic) NSString *name;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;
- (id)init;

@end

@interface MusicLocaleElement : MusicLocaleElementBase
{
}

+ (void)initialize;
- (void)setPhoneticArtistName:(id)arg1;
- (void)setArtistName:(id)arg1;
- (void)setTitleVersion:(id)arg1;
- (void)setPhoneticTitle:(id)arg1;
- (void)setTitle:(id)arg1;
- (id)locale;
- (id)initWithLocale:(id)arg1;
- (id)init;

@end

@interface MusicLocaleElementBase : AbstractElement
{
    NSString *_name;
    NSString *_title;
    NSString *_phoneticTitle;
    NSString *_titleVersion;
    NSString *_artistName;
    NSString *_phoneticArtistName;
}

+ (id)allKnownKeyPaths;
- (id)descriptionWithLocale:(id)arg1 indent:(unsigned long long)arg2;
@property(retain, nonatomic) NSString *phoneticArtistName;
@property(retain, nonatomic) NSString *artistName;
@property(retain, nonatomic) NSString *titleVersion;
@property(retain, nonatomic) NSString *phoneticTitle;
@property(retain, nonatomic) NSString *title;
@property(retain, nonatomic) NSString *name;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;
- (id)init;

@end

@interface MusicTranslationToLocaleConverter : NSObject <ITunesPackageLoaderProcessingDelegate>
{
}

- (id)postprocessObjectAfterUnmarshalling:(id)arg1 document:(id)arg2;
- (void)convertAlbumTranslations:(id)arg1 forLanguage:(id)arg2;
- (void)convertTrackTranslations:(id)arg1 forLanguage:(id)arg2;
- (void)convertArtists:(id)arg1 forLanguage:(id)arg2;
- (void)setKeyValues:(id)arg1 onElement:(id)arg2;
- (id)convertTranslations:(id)arg1 withKey:(id)arg2 forlanguage:(id)arg3 intoLocales:(id)arg4;
- (id)convertTranslations:(id)arg1 withKey:(id)arg2 forlanguage:(id)arg3 intoLocales:(id)arg4 usingDefault:(BOOL)arg5;
- (id)localeCreatingIfNeeded:(id)arg1 inLocales:(id)arg2;
- (id)preprocessDocumentPriorToUnmarshalling:(id)arg1;

@end

@interface MZLocale : NSObject
{
    NSString *_language;
    NSString *_country;
    NSString *_script;
}

+ (BOOL)isStringEnglish:(id)arg1;
+ (BOOL)isStringEnglishInUSOrEnglishOnly:(id)arg1;
+ (BOOL)isStringJapaneseInJapanOrJapaneseOnly:(id)arg1;
+ (id)findBestMatch:(id)arg1 inLocales:(id)arg2 index:(unsigned long long *)arg3;
+ (id)findLanguageMatch:(id)arg1 inLocales:(id)arg2 index:(unsigned long long *)arg3;
+ (id)findExactMatch:(id)arg1 inLocales:(id)arg2 index:(unsigned long long *)arg3;
+ (id)japaneseInJapan;
+ (id)japanese;
+ (id)englishInUS;
+ (id)english;
+ (id)localeWithString:(id)arg1;
- (id)description;
- (int)isEquivalent:(id)arg1;
- (void)setScript:(id)arg1;
- (id)script;
- (void)setCountry:(id)arg1;
- (id)country;
- (void)setLanguage:(id)arg1;
- (id)language;
- (void)dealloc;
- (id)code;
- (id)initWithString:(id)arg1;

@end

@interface MZLocaleParser : NSObject
{
}

+ (BOOL)decomposeRFC4646String:(id)arg1 language:(id *)arg2 region:(id *)arg3 script:(id *)arg4 error:(id *)arg5;
+ (id)regexLanguage;
+ (id)regexLanguageRegion;
+ (id)regexLanguageScript;
+ (id)scriptExpression;
+ (id)regionExpression;
+ (id)languageExpression;
+ (id)seperatorExpression;
+ (id)decomposeRFC4646String:(id)arg1 language:(id *)arg2 country:(id *)arg3;
+ (BOOL)isRFC4646Code:(id)arg1;
+ (id)codeExpression;

@end

@interface SoftwareLocaleElement : SoftwareLocaleElementBase
{
}

+ (void)initialize;
- (id)init;

@end

@interface SoftwareLocaleElementBase : LocaleContainerElement
{
    NSString *_publicationName;
}

+ (id)allKnownKeyPaths;
- (id)descriptionWithLocale:(id)arg1 indent:(unsigned long long)arg2;
@property(retain, nonatomic) NSString *publicationName;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;
- (id)init;

@end

@interface MusicLocalizationHelper : MZGenericRecord
{
}

+ (id)defaultHelper;
- (void)updatedObject:(id)arg1 forKey:(id)arg2;

@end

@interface SoftwareReadOnlyValueElement : SoftwareReadOnlyValueElementBase
{
}

+ (void)initialize;
- (id)init;

@end

@interface SoftwareReadOnlyValueElementBase : AbstractElement
{
    NSString *_key;
    NSString *_value;
}

+ (id)allKnownKeyPaths;
- (id)descriptionWithLocale:(id)arg1 indent:(unsigned long long)arg2;
@property(retain, nonatomic) NSString *value;
@property(retain, nonatomic) NSString *key;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;
- (id)init;

@end

@interface BookAssetContainerElement : BookAssetContainerElementBase
{
    BOOL _needsRepair;
}

+ (BOOL)isIBooksExtension:(id)arg1;
+ (BOOL)isEpubExtension:(id)arg1;
+ (void)initialize;
@property(nonatomic) BOOL needsRepair; // @synthesize needsRepair=_needsRepair;
- (BOOL)hasIBooksFile;
- (BOOL)hasEpubFile;
- (id)init;

@end

@interface BookAssetContainerElementBase : AssetContainerElement
{
    NSString *_appliesToVersion;
}

+ (id)allKnownKeyPaths;
- (id)descriptionWithLocale:(id)arg1 indent:(unsigned long long)arg2;
@property(retain, nonatomic) NSString *appliesToVersion;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;
- (id)init;

@end

@interface BookVersionElement : BookVersionElementBase
{
}

+ (void)initialize;
- (id)init;

@end

@interface BookVersionElementBase : AbstractElement
{
    NSString *_appliesToVersion;
    NSString *_value;
}

+ (id)allKnownKeyPaths;
- (id)descriptionWithLocale:(id)arg1 indent:(unsigned long long)arg2;
@property(retain, nonatomic) NSString *value;
@property(retain, nonatomic) NSString *appliesToVersion;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;
- (id)init;

@end

@interface MusicBookletElement : MusicBookletElementBase <Track, TrackNumberAndVolume>
{
}

+ (void)initialize;
- (BOOL)isBooklet;
- (BOOL)isITunesLP;
- (BOOL)isBonusMaterial;
- (double)duration;
- (void)setDuration:(double)arg1;
- (id)durationStringWithSeconds;
- (long long)compare:(id)arg1;
- (void)setNameWithAlbumTitle:(id)arg1;
- (id)defaultTitle;
- (void)setFileElement:(id)arg1;
- (id)init;

@end

@interface MusicBookletElementBase : AbstractElement
{
    NSString *_vendorID;
    NSString *_title;
    NSString *_copyright;
    NSNumber *_trackNumber;
    NSString *_explicitContent;
    AssetElement *_file;
    NSNumber *_volume;
    NSString *_vendorOfferCode;
}

+ (id)allKnownKeyPaths;
- (id)descriptionWithLocale:(id)arg1 indent:(unsigned long long)arg2;
@property(retain, nonatomic) NSString *vendorOfferCode;
@property(retain, nonatomic) NSNumber *volume;
@property(retain, nonatomic) AssetElement *file;
@property(retain, nonatomic) NSString *explicitContent;
@property(retain, nonatomic) NSNumber *trackNumber;
@property(retain, nonatomic) NSString *copyright;
@property(retain, nonatomic) NSString *title;
@property(retain, nonatomic) NSString *vendorID;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;
- (id)init;

@end

@interface MusicBonusMaterialToBookletConverter : NSObject <ITunesPackageLoaderProcessingDelegate>
{
}

- (id)convertBonusToBooklet:(id)arg1 inAlbum:(id)arg2;
- (id)postprocessObjectAfterUnmarshalling:(id)arg1 document:(id)arg2;
- (id)preprocessDocumentPriorToUnmarshalling:(id)arg1;

@end

@interface GenreElement : GenreElementBase
{
}

+ (void)initialize;
- (id)initWithCode:(id)arg1;
- (id)init;

@end

@interface GenreElementBase : NameElement
{
    NSString *_code;
}

+ (id)allKnownKeyPaths;
- (id)descriptionWithLocale:(id)arg1 indent:(unsigned long long)arg2;
@property(retain, nonatomic) NSString *code;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;
- (id)init;

@end

@interface ArtistPackageElement : ArtistPackageElementBase
{
}

+ (void)initialize;
- (id)init;

@end

@interface ArtistPackageElementBase : AbstractElement
{
    NSArray *_names;
    NSString *_name;
    NSString *_phoneticName;
    NSNumber *_appleId;
    NSNumber *_generateAppleId;
    NSArray *_locales;
}

+ (id)allKnownKeyPaths;
- (id)descriptionWithLocale:(id)arg1 indent:(unsigned long long)arg2;
@property(retain, nonatomic) NSArray *locales;
@property(retain, nonatomic) NSNumber *generateAppleId;
@property(retain, nonatomic) NSNumber *appleId;
@property(retain, nonatomic) NSString *phoneticName;
@property(retain, nonatomic) NSString *name;
@property(retain, nonatomic) NSArray *names;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;
- (id)init;

@end

